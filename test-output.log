MNEMONIC_ETHEREUM_TESTNET_DEPLOYER is not set in the .env file
No private keys found for ethereum_testnet in the .env file
MNEMONIC_ETHEREUM_MAINNET_DEPLOYER is not set in the .env file
No private keys found for ethereum_mainnet in the .env file


  Compare library
    isWithinTolerance
      ✔ returns true when values are equal and tolerance is 0 (918ms)
      ✔ returns false when difference is 1 and tolerance is 0
      ✔ returns true when difference equals tolerance boundary
      ✔ returns true when difference is below tolerance and false when above
      ✔ handles zero values correctly
      ✔ handles extreme max uint256 values
      ✔ is symmetric for observed < expected and observed > expected
    checkBalanceDelta
      ✔ Increase: direction false when after <= before
      ✔ Increase: correct delta and tolerance within/at/above boundary
      ✔ Decrease: direction false when after >= before
      ✔ Decrease: correct delta and tolerance within/at/above boundary
      ✔ handles extreme max uint256 delta for Increase
      ✔ handles extreme max uint256 delta for Decrease
      ✔ tolerance = max always passes when direction is satisfied

  SwappableVault Tolerance Tests
    Tolerance Constant
      ✔ should have BALANCE_DIFF_TOLERANCE = 1
    Happy Path Tests
      ✔ should succeed when spent equals returned amount (exact match)
      ✔ should succeed when difference is +1 (within tolerance)
      ✔ should succeed when difference is -1 (within tolerance)
    Failure Cases - Outside Tolerance
      ✔ should revert when difference is +2 (outside tolerance)
      ✔ should revert when difference is -2 (outside tolerance)
    Amount In Maximum Checks
      ✔ should revert when spent > amountInMaximum (exceeds maximum)
      ✔ should revert with correct error when spent = amountInMaximum + 1
    Output Token Validation
      ✔ should succeed when output amount is exact match
      ✔ should succeed when receiving +1 output token (within tolerance)
      ✔ should succeed when receiving -1 output token (within tolerance)
      ✔ should revert when receiving +2 output tokens (outside tolerance)
      ✔ should revert when receiving -2 output tokens (outside tolerance)
      ✔ should revert when output token balance doesn't increase
    Edge Cases
      ✔ should handle zero amounts correctly
      ✔ should handle exactly at tolerance boundary
    Gas Usage
      ✔ should not significantly increase gas usage

  WithdrawalFee math overflow protection
    ✔ _calculateWithdrawalFee handles uint256 max without overflow

  AmoManager Ecosystem Tests for dUSD
    AMO ecosystem interactions
      1) "before each" hook for "verifies oracle prices for pegged and yield-bearing collateral"

  AmoManager Ecosystem Tests for dETH
    AMO ecosystem interactions
      2) "before each" hook for "verifies oracle prices for pegged and yield-bearing collateral"

  AmoManager
    AmoManager for dUSD
      Role-based access control
        3) "before each" hook for "should have correct role assignments after deployment"
    AmoManager for dETH
      Role-based access control
        4) "before each" hook for "should have correct role assignments after deployment"

  CollateralHolderVault for dUSD
    Collateral management
      5) "before each" hook for "allows frxUSD as collateral"

  CollateralHolderVault for dETH
    Collateral management
      6) "before each" hook for "allows WETH as collateral"

  Issuer for dUSD
    Permissionless issuance
      - issues dUSD in exchange for frxUSD collateral
      - cannot issue dUSD with more than user's frxUSD balance
      - issues dUSD in exchange for USDC collateral
      - cannot issue dUSD with more than user's USDC balance
      - issues dUSD in exchange for USDS collateral
      - cannot issue dUSD with more than user's USDS balance
      - circulatingDstable function calculates correctly for dUSD
      - baseValueToDstableAmount converts correctly for dUSD
      - reverts when issuing with unsupported collateral
    Permissioned issuance
      - increaseAmoSupply mints dUSD to AMO Manager
      - issueUsingExcessCollateral mints dUSD up to excess collateral

  Issuer for dETH
    Permissionless issuance
      - issues dETH in exchange for WETH collateral
      - cannot issue dETH with more than user's WETH balance
      - circulatingDstable function calculates correctly for dETH
      - baseValueToDstableAmount converts correctly for dETH
      - reverts when issuing with unsupported collateral
    Permissioned issuance
      - increaseAmoSupply mints dETH to AMO Manager
      - issueUsingExcessCollateral mints dETH up to excess collateral

  IssuerV2 for dUSD
    Permissionless issuance
      7) "before each" hook for "issues dUSD in exchange for frxUSD collateral"

  IssuerV2 for dETH
    Permissionless issuance
      8) "before each" hook for "issues dETH in exchange for WETH collateral"

  DEPRECATED: Redeemer for dUSD
    Basic redemption
      - redeems dUSD for frxUSD
      - cannot redeem dUSD with insufficient balance
      - cannot redeem dUSD when slippage is too high
      - redeems dUSD for USDC
      - cannot redeem dUSD with insufficient balance
      - cannot redeem dUSD when slippage is too high
      - redeems dUSD for USDS
      - cannot redeem dUSD with insufficient balance
      - cannot redeem dUSD when slippage is too high
    Administrative functions
      - allows changing the collateral vault
      - allows setting collateral vault only by admin
      - allows admin to grant REDEMPTION_MANAGER_ROLE

  DEPRECATED: Redeemer for dETH
    Basic redemption
      - redeems dETH for WETH
      - cannot redeem dETH with insufficient balance
      - cannot redeem dETH when slippage is too high
    Administrative functions
      - allows changing the collateral vault
      - allows setting collateral vault only by admin
      - allows admin to grant REDEMPTION_MANAGER_ROLE

  RedeemerV2 for dUSD
    9) "before each" hook for "per-asset pause prevents redemption"

  RedeemerV2 for dETH
    10) "before each" hook for "per-asset pause prevents redemption"

  RedeemerWithFees for dUSD
    Deployment and Configuration
      - should have the correct fee receiver and default redemption fee
    Public Redemption with Fees
      - redeems dUSD for frxUSD with default fee
      - reverts if slippage is too high for dUSD
      - reverts when redeeming an unsupported collateral asset
      - redeems dUSD for USDC with default fee
      - reverts if slippage is too high for dUSD
      - reverts when redeeming an unsupported collateral asset
      - redeems dUSD for USDS with default fee
      - reverts if slippage is too high for dUSD
      - reverts when redeeming an unsupported collateral asset
    Protocol Redemption (No Fees)
      - allows manager to redeem without fees
      - reverts if non-manager calls redeemAsProtocol
    Administrative functions
      - allows admin to set fee receiver
      - reverts when non-admin tries to set fee receiver
      - allows admin to set default redemption fee
      - reverts if admin sets default fee above max
      - allows admin to set collateral-specific fee
      - reverts if admin sets collateral fee above max
    Utility functions
      - dstableAmountToBaseValue returns correct base value

  RedeemerWithFees for dETH
    Deployment and Configuration
      - should have the correct fee receiver and default redemption fee
    Public Redemption with Fees
      - redeems dETH for WETH with default fee
      - reverts if slippage is too high for dETH
      - reverts when redeeming an unsupported collateral asset
    Protocol Redemption (No Fees)
      - allows manager to redeem without fees
      - reverts if non-manager calls redeemAsProtocol
    Administrative functions
      - allows admin to set fee receiver
      - reverts when non-admin tries to set fee receiver
      - allows admin to set default redemption fee
      - reverts if admin sets default fee above max
      - allows admin to set collateral-specific fee
      - reverts if admin sets collateral fee above max
    Utility functions
      - dstableAmountToBaseValue returns correct base value

  ERC20StablecoinUpgradeable
    Initialization
      11) "before each" hook for "should initialize with correct name and symbol"

  dUSD Ecosystem Lifecycle
    Oracle Setup
      12) "before each" hook for "verifies oracle prices for all collateral tokens"

  dETH Ecosystem Lifecycle
    Oracle Setup
      13) "before each" hook for "verifies oracle prices for all collateral tokens"

  AaveOracle
    Initialization
      14) "before each" hook for "should initialize with correct base currency unit (8 decimals)"

  dLEND AaveProtocolDataProvider
    Reserve Configuration Data (`getReserveConfigurationData`)
      15) "before each" hook for "should return correct configuration data for a collateral reserve"

  dLEND Pool
    Supply
      16) "before each" hook for "should allow users to supply assets"

  StaticATokenLM – Signature malleability guard
    17) "before each" hook for "rejects malleated metaDeposit & accepts canonical one"

  StaticATokenFactory & StaticATokenLM
    createStaticATokens
      18) "before each" hook for "factory starts empty"

  dLEND UiPoolDataProviderV3
    getReservesList
      19) "before each" hook for "should return the list of all reserve assets matching the fixture"

  DLoopCoreDLend.getTotalCollateralAndDebtOfUserInBase — per-asset only
    Test Case 1: Baseline per-asset calculation - exact equality
      ✔ baseline calculation matches manual per-asset formula
    Test Case 2: Baseline for the vault address
      ✔ calculates correctly for vault address (address(this))
    Test Case 3: Ignore unrelated collateral donations (attack regression)
      ✔ ignores unrelated collateral donations (aOther)
      ✔ massive donation attack has no effect
    Test Case 4: Ignore unrelated debt positions
      ✔ counts only designated debt token balances (stable + variable)
    Test Case 5: Zero positions → zeroes
      ✔ returns (0, 0) for zero positions
      ✔ returns zero collateral with debt present
      ✔ returns zero debt with collateral present
    Test Case 6: Decimals sanity and mixed-decimals correctness
      ✔ handles mixed decimals correctly
      ✔ handles different decimal combinations
    Test Case 7: Oracle price changes propagate
      ✔ reflects oracle price changes proportionally
    Test Case 8: Invariance under aToken direct transfer-in/out
      ✔ reflects aToken balance changes linearly
    Test Case 9: User vs Vault address symmetry
      ✔ returns same values for identical positions
    Test Case 10: Price = 0 edge behavior
      ✔ handles zero collateral price gracefully
      ✔ handles zero debt price gracefully
    Test Case 11: Multiple unrelated donations do not accumulate
      ✔ massive multi-asset donations have no cumulative effect
    Test Case 12: Integration smoke - leverage quote neutrality
      ✔ leverage calculations unaffected by donations
    Test Case 13: Parameterized edge cases
      ✔ handles different decimals with main tokens
      ✔ handles various price points correctly

  DLoopCoreDLend – Reward Compounding (vault shares as exchange asset)
    ✔ Should burn shares and distribute rewards with treasury fee on compound
    ✔ Should enforce threshold on amount
    ✔ compounding uses share burn, not debt repay

  DLoopCoreLogic - Conversion Logic
    convertFromBaseCurrencyToToken
      ✔ 1e18 base to 18d token at price 1e18
      ✔ 2e18 base to 18d token at price 2e18
      ✔ 1e6 base to 6d token at price 1e6
      ✔ rounding down
      ✔ tiny amount
      ✔ huge amount
      ✔ price > 1
      ✔ price < 1
      ✔ decimals 8
      ✔ decimals 0
    convertFromTokenAmountToBaseCurrency
      ✔ 1e18 token to base at price 1e18
      ✔ 2e18 token to base at price 2e18
      ✔ 1e6 token to base at price 1e6
      ✔ rounding down
      ✔ tiny amount
      ✔ huge amount
      ✔ price > 1
      ✔ price < 1
      ✔ decimals 8
      ✔ decimals 0

  DLoopCoreLogic - Decrease Leverage
    getDebtRepayAmountInBaseToReachTargetLeverage
      ✔ moderate decrease, no subsidy
      ✔ moderate decrease, small subsidy
      ✔ strong decrease, no subsidy
      ✔ strong decrease, subsidy
      ✔ tiny surplus case
      ✔ large numbers
      ✔ edge: TT just below current
      ✔ edge: TT much lower
      ✔ k large
      ✔ varied
      ✔ returns zero when equal to target, reverts when below target
    getCollateralWithdrawAmountInBaseToDecreaseLeverage
      ✔ no subsidy
      ✔ +100 bps (ceil)
      ✔ +333 bps (ceil)
      ✔ zero
      ✔ tiny
      ✔ large y
      ✔ large k
      ✔ mid
      ✔ k=1
      ✔ k=SCALE-1
    getCollateralWithdrawTokenAmountToDecreaseLeverage
      ✔ 1e18, no subsidy, equal price
      ✔ 3e18, +100bps
      ✔ 6 decimals
      ✔ collateral more expensive
      ✔ collateral cheaper
      ✔ tiny
      ✔ big
      ✔ different decimals
      ✔ non-1 prices
      ✔ edge k=SCALE-1
      ✔ error: zero input debt

  DLoopCoreLogic - Fee Logic
    getGrossAmountRequiredForNet
      ✔ table-driven cases
    getNetAmountAfterFee
      ✔ table-driven cases

  DLoopCoreLogic - Increase Leverage
    getCollateralTokenDepositAmountToReachTargetLeverage
      ✔ error: C=0
      ✔ error: C<D
      ✔ simple 2x, no subsidy
      ✔ 3x, no subsidy
      ✔ 2x, small subsidy
      ✔ high subsidy cap
      ✔ already near target (tiny)
      ✔ large numbers
      ✔ tiny surplus
      ✔ with subsidy rounding up
    getDebtBorrowAmountInBaseToIncreaseLeverage
      ✔ no subsidy
      ✔ +100 bps
      ✔ +333 bps rounding down
      ✔ zero
      ✔ tiny
      ✔ large x
      ✔ large k
      ✔ mid
      ✔ k=1
      ✔ k=SCALE-1
    getDebtBorrowTokenAmountToIncreaseLeverage
      ✔ 1e18, no subsidy, equal price
      ✔ 3e18, +100bps
      ✔ 6 decimals
      ✔ debt cheaper
      ✔ debt more expensive
      ✔ tiny
      ✔ big
      ✔ different decimals
      ✔ non-1 prices
      ✔ edge k=SCALE-1
      ✔ error: zero input collateral

  DLoopCoreLogic - Leverage Scaling
    getUnleveragedAssetsWithLeverage
      ✔ 1x
      ✔ 2x
      ✔ 4x
      ✔ 10x
      ✔ rounding down
      ✔ large numbers
      ✔ SCALE edge
      ✔ minimum leveraged
      ✔ 3x
      ✔ 7x
    getLeveragedAssetsWithLeverage
      ✔ 1x
      ✔ 2x
      ✔ 4x
      ✔ 10x
      ✔ rounding exact
      ✔ large numbers
      ✔ SCALE edge
      ✔ min asset
      ✔ 3x
      ✔ 7x

  DLoopCoreLogic - Maintain Leverage
    getRepayAmountThatKeepCurrentLeverage
      ✔ leverage=0 -> 0
      ✔ 1e18 withdraw, 2x leverage, equal prices/decimals
      ✔ 0.5x price debt cheaper
      ✔ debt more expensive
      ✔ 6 decimals
      ✔ rounding down
      ✔ tiny withdraw
      ✔ big numbers
      ✔ different decimals
      ✔ non-1 prices
    getBorrowAmountThatKeepCurrentLeverage
      ✔ no prior leverage -> use target
      ✔ 2x prior
      ✔ 3x prior, debt cheaper
      ✔ 4x prior, debt expensive
      ✔ 6 decimals
      ✔ rounding
      ✔ tiny
      ✔ big
      ✔ different decimals
      ✔ non-1 prices
      ✔ uses target leverage when prior leverage is zero

  DLoopCoreLogic - Rebalance Quote
    quoteRebalanceAmountToReachTargetLeverage
      ✔ no collateral
      ✔ increase simple
      ✔ decrease with subsidy (label corrected)
      ✔ decrease simple
      ✔ decrease with subsidy
      ✔ already at target
      ✔ increase with decimals/prices mismatch
      ✔ decrease with decimals/prices mismatch
      ✔ produces final leverage close to target (property)

  DLoopCoreLogic - State Logic
    getCurrentLeverageBps
      ✔ no collateral
      ✔ no debt -> 1x
      ✔ equal C=D -> infinite
      ✔ 2x leverage
      ✔ 10x leverage
      ✔ just above 1x (rounding)
      ✔ large numbers
      ✔ tiny surplus (C-D=1)
      ✔ D=0 minimal C
      ✔ C slightly > D
      ✔ error: C < D
    getCurrentSubsidyBps
      ✔ no deviation (equal)
      ✔ + deviation below min
      ✔ + deviation at min
      ✔ + deviation above min
      ✔ - deviation below min
      ✔ - deviation at min
      ✔ - deviation above min
      ✔ cap at maxSubsidy
      ✔ zero maxSubsidy caps to 0
      ✔ huge values within cap
    isTooImbalanced
      ✔ no deposit (current=0) -> false
      ✔ inside range lower boundary
      ✔ inside range upper boundary
      ✔ strictly inside range
      ✔ below lower
      ✔ above upper
      ✔ tight range exact match
      ✔ tight range not match (below)
      ✔ tight range not match (above)
      ✔ very large numbers in range

  DLoopCoreMock Calculation Tests
    I. Basic Calculation Functions
      getTargetLeveragedAssets
        - Should calculate leveraged assets with small amount
        - Should calculate leveraged assets with medium amount
        - Should calculate leveraged assets with large amount
        - Should handle zero assets
        - Should handle 1 wei
        - Should handle large amount without overflow
        - Should calculate with fractional assets
        - Should calculate with very small fractional assets
        - Should handle exact division
        - Should handle rounding down
      getCurrentLeverageBps
        - Should return 0 for no collateral
        - Should calculate minimal leverage with tiny debt
        - Should calculate 200% leverage
        - Should calculate 300% leverage (target)
        - Should calculate 500% leverage
        - Should handle high leverage (1000%)
        - Should handle very high leverage (10000%)
        - Should handle fractional leverage
        - Should handle large amounts
        - Should handle very high leverage (near infinite)
      getCurrentLeveragedAssets
        - No collateral → zero leveraged result
        - 2x leverage calculation (200/100)
        - 3x leverage calculation (300/200)
        - High leverage 10x (500/450)
      getUnleveragedAssetsWithTargetLeverage
        - Simple conversion
        - Zero leveraged amount
        - Large leveraged amount
      getUnleveragedAssetsWithCurrentLeverage
        - 2x leverage → halve assets
        - 3x leverage → one-third assets
        - 10x leverage → divide by ten
    II. Price Conversion Functions
      convertFromBaseCurrencyToToken
        - Should convert base currency to token with 18 decimals
        - Should convert with 6 decimal token
        - Should convert with 8 decimal token
        - Should handle zero amount
        - Should handle fractional result
        - Should handle high price token
        - Should handle low price token
        - Should handle very small amounts
        - Should handle precision edge case
        - Should handle rounding down
      convertFromTokenAmountToBaseCurrency
        - Should convert token amount to base currency with 18 decimals
        - Should convert with 6 decimal token
        - Should convert with 8 decimal token
        - Should handle zero amount
        - Should handle fractional tokens
        - Should handle high price token
        - Should handle low price token
        - Should handle reasonable token amounts
        - Should handle precision calculations
        - Should handle large token amounts

  DLoopCoreMock Calculation Tests
    I. Leverage Calculation Functions
      getBorrowAmountThatKeepCurrentLeverage
        - Should calculate borrow amount for 300% leverage
        - Should calculate borrow amount for 200% leverage
        - Should calculate borrow amount for 500% leverage
        - Should handle different token prices
        - Should handle 6 decimal debt token
        - Should handle very high leverage (1000%)
        - Should handle zero collateral supply
        - Should handle 100% leverage (no borrowing)
        - Should handle small supply amounts
        - Should handle large supply amounts

  DLoopCoreMock Deposit Tests
    I. Basic Deposit Functionality
      - Should handle first deposit with target leverage
      - Should handle small deposit amounts
      - Should handle large deposit amounts
    II. Deposit and price change
      - Collateral price decrease, debt price increase, leverage 300% -> 550%
      - Collateral price increase, debt price increase, leverage 300% -> 280%
      - Collateral price increase, debt price decrease, leverage 300% -> 175%
      - Collateral price decrease, debt price decrease, leverage 300% -> 400%
    III. Multiple deposits
      - With single user and constant price
      - With single user and price change
      - With multiple users and constant price
      - With multiple users and price change
    IV. Reach too imbalance and cannot deposit
      - Should reject deposit when leverage is too high (above upper bound)
      - Should reject deposit when leverage is too low (below lower bound)
      - Should allow deposit when leverage returns to acceptable range
      - Should reject deposit when vault starts imbalanced due to extreme price movements
      - Should confirm TooImbalanced error exists in contract logic
      - Should handle multiple users when vault becomes imbalanced

  DLoopCoreMock - Inflation Attack Tests
    I. ERC4626 Inflation Attack Analysis
      First Deposit Vulnerability Check
        - Should revert with TokenBalanceNotIncreasedAfterBorrow on minimal deposit
        - Should correctly convert assets/shares in an empty vault
      Real-world Attack Scenarios
        - Should ensure attacker cannot profit from front-running scenario
        - Should maintain reasonable share pricing after large donation
      Vault-Specific Protection Tests
        - Should block new deposits when vault leverage is imbalanced
        - Should prevent profitable sandwich attacks
    II. Edge Cases and Stress Tests
      Extreme Donation Amounts
        - Should handle small donation without breaking share issuance
        - Should handle medium donation without breaking share issuance
        - Should handle large donation without breaking share issuance
        - Should handle extreme donation without breaking share issuance
      First Depositor Protection
        - First depositor should always receive shares for deposit of 1 wei
        - First depositor should always receive shares for deposit of 1000 wei
        - First depositor should always receive shares for deposit of 1000000000000000 wei
        - First depositor should always receive shares for deposit of 1000000000000000000 wei
        - First depositor should always receive shares for deposit of 1000000000000000000000 wei
    III. Mitigation and Recovery Tests
      - Should allow vault to recover share issuance after extreme inflation
      - Should flag vault as imbalanced when leverage bounds are violated

  IV. Real ERC-4626 share-inflation attack (supply on-behalf-of vault)
    ✔ Attacker can inflate share-price so that the next depositor receives 0 shares

  V. Donation griefing causes DoS but no value theft
    ✔ Attacker donation locks vault and prevents further interactions until rebalance
    ✔ Keeper can rebalance the vault and restore normal operations

  DLoopCoreMock Post-Execution Leverage Validation Tests (Hats Finance Issue #63)
    I. Post-Execution IncreaseLeverage Validation
      1.1 Normal Operation Success Cases
        ✔ should validate leverage after execution in increaseLeverage()
        ✔ should handle small increases that reach exactly target leverage
      1.2 Post-Execution Error Cases
        ✔ should revert when post-execution leverage exceeds target in increaseLeverage()
        ✔ should revert when trying to increase at target leverage
        ✔ should provide correct error parameters in IncreaseLeverageOutOfRange
    II. Post-Execution DecreaseLeverage Validation
      2.1 Normal Operation Success Cases
        ✔ should validate leverage after execution in decreaseLeverage()
        ✔ should handle decreases that reach exactly target leverage
      2.2 Post-Execution Error Cases
        ✔ should revert when post-execution leverage falls below target in decreaseLeverage()
        ✔ should revert when trying to decrease at target leverage
    III. Interest Accrual Simulation Tests
      3.1 High Utilization Pool Scenario
        ✔ should demonstrate post-execution validation prevents over-leverage - Hats Finance Issue #63
        ✔ should prevent over-leverage when interest accrues during transaction
    IV. Boundary Condition Tests
      4.1 Leverage Boundary Testing
        ✔ should handle leverage within 1 basis point of target
        ✔ should maintain precision in leverage calculations
    V. Regression Tests
      5.1 Existing Functionality Preservation
        ✔ should preserve normal operation functionality for small adjustments
        ✔ should handle various price scenarios without regression
    VI. Gas and Performance Tests
      ✔ should not significantly increase gas costs for normal operations
      ✔ should handle multiple sequential operations efficiently

  DLoopCoreMock.maxRedeem: leverage guard
    ✔ returns 0 when leverage exceeds the upper bound

  DLoopCoreMock Mock Methods Tests
    I. Constructor and Initial State
      ✔ Constructor: Valid parameters with proper allowances
      ✔ Should have correct initial state
    II. Mock Functions
      Price Setting
        ✔ Should set and get mock prices
      Collateral Management
        ✔ Should set mock collateral for user
      Debt Management
        ✔ Should set mock debt for user

  DLoopCoreMock Oracle Tests
    I. Basic Oracle Functionality
      - Should set and get mock prices correctly
      - Should handle different token decimals correctly
      - Should update mock prices correctly
    II. Oracle Implementation Functions
      - Should get asset price from oracle implementation
      - Should revert when getting price for asset without price set
      - Should use oracle price via public wrapper function
      - Should revert with AssetPriceIsZero when price is zero
    III. Price Conversion Functions
      Base Currency to Token Conversion
        - Should convert from base currency to collateral token correctly
        - Should convert from base currency to debt token correctly
        - Should convert from base currency to token with different decimals
        - Should handle zero amount conversion
      Token to Base Currency Conversion
        - Should convert from collateral token to base currency correctly
        - Should convert from debt token to base currency correctly
        - Should convert from token with different decimals to base currency
        - Should handle zero token amount conversion
      Round-trip Conversion Tests
        - Should maintain precision in round-trip conversions
        - Should handle precision for tokens with different decimals
    IV. Oracle Integration with Vault Operations
      - Should use oracle prices for totalAssets calculation
      - Should use oracle prices for leverage calculation
      - Should reflect price changes in leverage calculation
      - Should use oracle prices for deposit amount calculations
    V. Oracle Error Handling
      - Should revert when accessing price for unset asset
      - Should revert when price is zero
      - Should handle conversion with zero price gracefully in mock
      - Should handle price updates during operations
    VI. Oracle Price Edge Cases
      - Should handle very large prices
      - Should handle very small prices
      - Should handle price precision correctly
      - Should handle multiple price updates for same asset
      - Should handle simultaneous price updates for multiple assets

  DLoopCoreMock Rebalance Calculation Tests
    I. Rebalance Calculation Functions
      quoteRebalanceAmountToReachTargetLeverage
        - Should return increase direction when leverage is below target (useVaultTokenBalance)
        - Should return increase direction when leverage is below target 
        - Should return no rebalance when leverage equals target (useVaultTokenBalance)
        - Should return no rebalance when leverage equals target 
        - Should handle very low leverage (useVaultTokenBalance)
        - Should handle very low leverage 
        - Should handle zero collateral and debt (useVaultTokenBalance)
        - Should handle zero collateral and debt 
        - Should handle small differences near target (useVaultTokenBalance)
        - Should handle small differences near target 
        - Should handle moderate below-target leverage (useVaultTokenBalance)
        - Should handle moderate below-target leverage 
        - Should handle below-target leverage with vault balance (useVaultTokenBalance)
        - Should handle below-target leverage with vault balance 
        - Should handle fractional amounts (useVaultTokenBalance)
        - Should handle fractional amounts 
        - Should return decrease direction when leverage is above target (useVaultTokenBalance)
        - Should return decrease direction when leverage is above target 
        - Should handle high leverage scenario requiring decrease (useVaultTokenBalance)
        - Should handle high leverage scenario requiring decrease 
        - Should handle moderate above-target leverage requiring decrease (useVaultTokenBalance)
        - Should handle moderate above-target leverage requiring decrease 
        - Should handle extreme high leverage requiring decrease (useVaultTokenBalance)
        - Should handle extreme high leverage requiring decrease 
        - Should handle slightly above target leverage (useVaultTokenBalance)
        - Should handle slightly above target leverage 
        - Should handle above-target leverage with vault balance (useVaultTokenBalance)
        - Should handle above-target leverage with vault balance 
        - Should handle high leverage with sufficient vault debt balance (useVaultTokenBalance)
        - Should handle high leverage with sufficient vault debt balance 
        - Should handle large amounts requiring decrease (useVaultTokenBalance)
        - Should handle large amounts requiring decrease 
        - Should handle fractional amounts requiring decrease (useVaultTokenBalance)
        - Should handle fractional amounts requiring decrease 
        - Should handle exact target leverage with different amounts (useVaultTokenBalance)
        - Should handle exact target leverage with different amounts 
        - Should handle target leverage with fractional amounts (useVaultTokenBalance)
        - Should handle target leverage with fractional amounts 
        - Should handle target leverage with large amounts (useVaultTokenBalance)
        - Should handle target leverage with large amounts 
    II. Internal Calculation Functions
      _getCollateralTokenDepositAmountToReachTargetLeverage
        - Should calculate collateral needed for below-target leverage (200% to 300%) (useVaultTokenBalance)
        - Should calculate collateral needed for below-target leverage (200% to 300%) 
        - Should handle exact target leverage scenario (useVaultTokenBalance)
        - Should handle exact target leverage scenario 
        - Should handle zero position (useVaultTokenBalance)
        - Should handle zero position 
        - Should handle very low leverage (101% to 300%) (useVaultTokenBalance)
        - Should handle very low leverage (101% to 300%) 
        - Should handle moderate leverage gap (233% to 300%) (useVaultTokenBalance)
        - Should handle moderate leverage gap (233% to 300%) 
        - Should handle small differences near target (useVaultTokenBalance)
        - Should handle small differences near target 
        - Should handle fractional amounts (useVaultTokenBalance)
        - Should handle fractional amounts 
        - Should handle large amounts (useVaultTokenBalance)
        - Should handle large amounts 
        - Should handle with subsidy - below target leverage (useVaultTokenBalance)
        - Should handle with subsidy - below target leverage 
        - Should handle with high subsidy (useVaultTokenBalance)
        - Should handle with high subsidy 
        - Should handle vault token balance mode - below target (useVaultTokenBalance)
        - Should handle vault token balance mode - below target 
        - Should handle vault token balance mode - at target (useVaultTokenBalance)
        - Should handle vault token balance mode - at target 
        - Should handle vault token balance mode with subsidy (useVaultTokenBalance)
        - Should handle vault token balance mode with subsidy 
        - Should handle different target leverage (400%) (useVaultTokenBalance)
        - Should handle different target leverage (400%) 
        - Should handle different target leverage (500%) (useVaultTokenBalance)
        - Should handle different target leverage (500%) 
        - Should handle edge case - very high leverage target (1000%) (useVaultTokenBalance)
        - Should handle edge case - very high leverage target (1000%) 
        - Should handle minimal position amounts (useVaultTokenBalance)
        - Should handle minimal position amounts 
        - Should handle debt-only position (infinite leverage to 300%) (useVaultTokenBalance)
        - Should handle debt-only position (infinite leverage to 300%) 
        - Should handle high subsidy with vault tokens (useVaultTokenBalance)
        - Should handle high subsidy with vault tokens 
      _getDebtRepayAmountInBaseToReachTargetLeverage
        - Should calculate debt to repay for above-target leverage (400% to 300%) (useVaultTokenBalance)
        - Should calculate debt to repay for above-target leverage (400% to 300%) 
        - Should return 0 when at target leverage (useVaultTokenBalance)
        - Should return 0 when at target leverage 
        - Should handle zero position (useVaultTokenBalance)
        - Should handle zero position 
        - Should throw for low leverage scenario requiring debt increase (this method is only used for decreasing leverage) (useVaultTokenBalance)
        - Should throw for low leverage scenario requiring debt increase (this method is only used for decreasing leverage) 
        - Should handle high leverage scenario (500% to 300%) (useVaultTokenBalance)
        - Should handle high leverage scenario (500% to 300%) 
        - Should handle very high leverage scenario (1000% to 300%) (useVaultTokenBalance)
        - Should handle very high leverage scenario (1000% to 300%) 
        - Should handle with subsidy - above target leverage (useVaultTokenBalance)
        - Should handle with subsidy - above target leverage 
        - Should handle fractional amounts - above target (useVaultTokenBalance)
        - Should handle fractional amounts - above target 
        - Should handle large amounts - above target (useVaultTokenBalance)
        - Should handle large amounts - above target 
        - Should handle different target leverage (400% current to 200% target) (useVaultTokenBalance)
        - Should handle different target leverage (400% current to 200% target) 
        - Should handle high subsidy with above-target leverage (useVaultTokenBalance)
        - Should handle high subsidy with above-target leverage 
        - Should handle edge case - extremely high leverage (2000% to 300%) (useVaultTokenBalance)
        - Should handle edge case - extremely high leverage (2000% to 300%) 
        - Should handle minimal amounts with above-target leverage (useVaultTokenBalance)
        - Should handle minimal amounts with above-target leverage 
        - Should handle vault mode with subsidy and above-target leverage (useVaultTokenBalance)
        - Should handle vault mode with subsidy and above-target leverage 

  DLoopCoreMock Rebalance Tests
    I. Basic Increase Leverage Functionality
      - Should increase leverage from below target to target (equal prices)
      - Should increase leverage with debt price higher than collateral
      - Should increase leverage with collateral price lower than debt
      - Should handle multiple increase operations with different price ratios
    II. Basic Decrease Leverage Functionality
      - Should decrease leverage from above target to target (equal prices)
      - Should decrease leverage with debt price lower than collateral
      - Should decrease leverage with both prices changing unfavorably
      - Should handle multiple decrease operations with asymmetric prices
    III. Rebalance with Subsidies
      - Should provide subsidy when increasing leverage far from target (high debt price)
      - Should provide subsidy when decreasing leverage far from target (low collateral price)
      - Should cap subsidy at maximum rate with extreme price differences
      - Should provide minimal subsidy when close to target (slight price asymmetry)
    IV. Error Cases
      - Should revert when trying to increase leverage above target (asymmetric prices)
      - Should revert when trying to decrease leverage below target (different price scenario)
      - Should revert when increase leverage amount is too large (high debt price)
      - Should revert when decrease leverage amount is too large (price asymmetry)
      - Should revert when slippage protection fails on increase leverage (high debt price scenario)
      - Should revert when slippage protection fails on decrease leverage (low collateral price scenario)
    V. Multiple Users Rebalancing
      - Should handle multiple users increasing leverage independently (diverse prices)
      - Should handle multiple users decreasing leverage independently (asymmetric prices)
    VI. Rebalance with Vault Token Balance
      - Should use vault collateral balance for increase leverage when available (price asymmetry)
      - Should use vault debt balance for decrease leverage when available (inverse prices)
    VII. Integration with Deposit/Withdraw
      - Should prevent deposits when leverage is too imbalanced (extreme price divergence)
      - Should maintain proper leverage bounds after rebalancing (complex price scenarios)
    VIII. Exact Target Leverage Achievement Tests
      - Should achieve exact target leverage when using quoteRebalanceAmountToReachTargetLeverage for increase (debt price higher)
      - Should achieve exact target leverage when using quoteRebalanceAmountToReachTargetLeverage for decrease (collateral price lower)
      - Should achieve exact target leverage with asymmetric price changes (increase scenario)
      - Should achieve exact target leverage with inverse price movements (decrease scenario)
      - Should handle edge case when already very close to target leverage
      - Should achieve target with moderate price divergence (decrease scenario)
      - Should handle case when already at target leverage
    IX. Underflow tests
      decreaseLeverage
        - Case 1
        - Case 2

  DLoopCoreMock Calculation Tests
    I. Leverage Calculation Functions
      getRepayAmountThatKeepCurrentLeverage
        - Should calculate repay amount for 300% leverage
        - Should calculate repay amount for 200% leverage
        - Should calculate repay amount for 500% leverage
        - Should handle different token prices
        - Should handle 6 decimal debt token
        - Should handle very high leverage (1000%)
        - Should handle zero withdraw amount
        - Should handle 100% leverage (no repaying needed)
        - Should handle small withdraw amounts
        - Should handle large withdraw amounts

  DLoopCoreMock Redeem Tests
    I. Basic Redeem Functionality
      - Should handle basic redeem with target leverage
      - Should handle small redeem amounts
      - Should handle large redeem amounts
      - Should handle full redeem
    II. Redeem with price changes
      - Redeem after collateral price increase
      - Redeem after modest debt price increase
      - Redeem after modest collateral price decrease
      - Redeem with both prices changing favorably
    III. Multiple users redeeming
      - Should handle multiple users redeeming with constant prices
      - Should handle multiple users redeeming with price changes
    IV. Redeem when imbalanced
      - Should reject redeem when leverage is too high (above upper bound)
      - Should reject redeem when leverage is too low (below lower bound)
      - Should allow redeem when leverage returns to acceptable range
      - Should reject redeem when vault starts imbalanced due to extreme price movements
      - Should handle multiple users when vault becomes imbalanced
    V. Delegated redeem (on behalf of another user)
      - Should allow basic delegated redeem with proper allowances
      - Should handle full delegated redeem
      - Should allow delegated redeem with price changes
      - Should demonstrate the workaround where owner transfers debt tokens to relayer
      - Should fail delegated redeem when relayer has insufficient debt token allowance
      - Should fail delegated redeem when relayer has insufficient debt token balance
      - Should fail delegated redeem when relayer has insufficient share allowance
    VI. Edge cases and error conditions
      - Should revert when redeeming more shares than owned
      - Should revert when insufficient debt token allowance for repayment
      - Should handle redeem when leveraged position is at exactly target leverage
      - Should handle redeem with small shares

  DLoopCoreMock Reentrancy Attack Tests
    V. Reentrancy attack
      ✔ Should verify nonReentrant modifier is applied to deposit
      ✔ Should verify nonReentrant modifier is applied to increaseLeverage
      ✔ Should verify nonReentrant modifier is applied to decreaseLeverage
      ✔ Should verify nonReentrant modifier is applied to withdraw
      ✔ Should allow sequential operations in separate transactions
      ✔ Should demonstrate reentrancy protection exists in contract

  DLoopCoreMock Rescue Token Tests
    I. Restricted Rescue Tokens
      - Should return correct restricted rescue tokens
      - Should use getRestrictedRescueTokens correctly
      - Should include additional rescue tokens from implementation
    II. Rescue Token Access Control
      - Should allow owner to rescue non-restricted tokens
      - Should revert when non-owner tries to rescue tokens
      - Should revert when trying to rescue restricted collateral token
      - Should revert when trying to rescue restricted debt token
    III. Rescue Token Functionality
      - Should rescue full balance of non-restricted token
      - Should rescue partial balance of non-restricted token
      - Should handle zero amount rescue
      - Should rescue to different receivers
    IV. Multiple Token Types
      - Should rescue multiple different non-restricted tokens
      - Should handle tokens with different decimals
    V. Edge Cases and Error Handling
      - Should revert when trying to rescue more tokens than available
      - Should handle rescue when vault has no tokens
      - Should handle rescue to zero address
      - Should work with zero token address (should revert)
    VI. Integration with Vault Operations
      - Should not affect vault operations after token rescue
      - Should demonstrate reentrancy protection on rescue function
    VII. Security and Permission Verification
      - Should verify rescue functionality follows secure patterns
      - Should maintain consistency with base contract restrictions

  DLoopCoreShortfallMock – 1-wei rounding shortfall
    ✔ deposit handles 1-wei shortfall gracefully (allow revert or success)
    ✔ wrapper shows 1-wei shortfall on withdraw

  DLoopCoreMock - Supply/Repay Donation Edge Case Tests
    Edge Case 1: Direct collateral donation to lending pool
      ✔ should disallow deposit and withdrawal until leverage is restored, and allow increaseLeverage to rebalance
    Edge Case 2: Direct debt repayment donation to lending pool
      ✔ should temporarily freeze the vault when debt is repaid directly to the lending pool
    Detailed Error Analysis
      ✔ Should demonstrate the exact division by zero in getRepayAmountThatKeepCurrentLeverage
      ✔ should handle small donation amounts correctly
    Post-fix Impact Verification
      ✔ should demonstrate the vault remains locked until leverage is restored

  DLoopCoreMock – tolerant balance differences (supply / withdraw)
    _supplyToPool wrapper
      ✔ allows 1 wei rounding difference on supply
    _withdrawFromPool wrapper
      ✔ allows 1 wei rounding difference on withdraw

  DLoopCoreMock – tolerant balance differences
    ✔ allows 1 wei rounding difference on repay
    ✔ allows 1 wei rounding difference on borrow

  DLoopCoreMock Virtual Methods Tests
    I. Pool Operations
      Supply To Pool
        ✔ Should supply tokens to pool using testSupplyToPoolImplementation
      Borrow From Pool
        ✔ Should borrow tokens from pool using testBorrowFromPoolImplementation
    II. Pool Operations - Error Cases
      Repay Debt To Pool
        ✔ Should repay debt to pool using testRepayDebtToPoolImplementation
        ✔ Should fail when user has insufficient balance to repay
      Withdraw From Pool
        ✔ Should withdraw tokens from pool using testWithdrawFromPoolImplementation
        ✔ Should fail when pool has insufficient balance to withdraw
      Error Conditions
        ✔ Should fail when getting price for asset without price set
        ✔ Should fail when pool has insufficient balance to borrow
        ✔ Should fail when user has insufficient balance to supply
    III. Total Collateral and Debt Calculation
      ✔ Should calculate total collateral and debt correctly
      ✔ Should handle different token prices
      ✔ Should handle no collateral or debt
      ✔ Should handle multiple tokens for the same user
    IV. Integration Tests
      ✔ Should handle complete supply and borrow flow
      ✔ Should handle complete repay and withdraw flow

  DLoopCoreMock - Withdraw Fee
    ✔ zero fee keeps previous behavior
    ✔ non-zero fee adjusts previewRedeem and redeem output (fee retained in vault)
    ✔ previewWithdraw inverts net→shares using gross+fee
    ✔ decreaseLeverage returns net-of-fee collateral (no external fee transfer)
    ✔ maxRedeem equals share balance regardless of fee
    ✔ previewRedeem and previewWithdraw handle zero and tiny amounts
    ✔ maxWithdraw returns net-of-fee and withdraw(max) burns expected shares
    ✔ supports MAX_FEE_BPS (5%) and rejects above max
    ✔ setWithdrawalFeeBps is onlyOwner
    ✔ large amounts maintain precision and match previews

  DLoopCoreMock Wrapper Methods Tests
    I. Wrapper Validation Tests
      Supply To Pool Wrapper Validation
        ✔ Should trigger TokenBalanceNotDecreasedAfterSupply validation error
        ✔ Should trigger UnexpectedSupplyAmountToPool validation error
      Borrow From Pool Wrapper Validation
        ✔ Should trigger TokenBalanceNotIncreasedAfterBorrow validation error
        ✔ Should trigger UnexpectedBorrowAmountFromPool validation error
      Repay Debt To Pool Wrapper Validation
        ✔ Should trigger TokenBalanceNotDecreasedAfterRepay validation error
        ✔ Should trigger UnexpectedRepayAmountToPool validation error
      Withdraw From Pool Wrapper Validation
        ✔ Should trigger TokenBalanceNotIncreasedAfterWithdraw validation error
        ✔ Should trigger UnexpectedWithdrawAmountFromPool validation error
      Balance Validation Edge Cases
        ✔ Should handle zero amount operations correctly
        ✔ Should validate balance changes match expected amounts

  dLOOP zero-share vulnerability
    ✔ reverts on deposit smaller than dust
    ✔ reverts on deposit equal to dust
    ✔ accepts deposit above dust
    ✔ reverts on zero-asset deposit

  Fuzz testing deposits vs dust threshold
    - handles 100 random values above and below dust correctly

  DLoopDecreaseLeverageBase – double-counting collateral protection
    ✔ Should successfully decrease leverage with a flash loan when user supplies exactly the required debt (48ms)

  DLoopDecreaseLeverageMock - Issue #324 Fix - Happy Path
Leverage after imbalance: 4636363 bps
    ✔ transfers all collateral to user (no leftovers kept by periphery)

  DLoopDecreaseLeverageMock - Leftover Collateral Token Handling
    ✔ transfers leftover collateral tokens to user and emits event

  DLoopDepositorMock Deposit Tests
    I. Basic Deposit Functionality
      ✔ Should handle small leveraged deposit
      ✔ Should handle medium leveraged deposit
      ✔ Should handle large leveraged deposit
      ✔ Should handle deposit with minimal slippage tolerance
      ✔ Should handle deposit with higher slippage tolerance
    II. Flash Loan Integration
      ✔ Should utilize flash loans for small deposit
      ✔ Should utilize flash loans for medium deposit
      ✔ Should utilize flash loans for large deposit
      ✔ Should handle flash loan fees correctly
      ✔ Should fail if flash loan amount exceeds available
    III. DEX Integration
      ✔ Should swap debt tokens to collateral tokens for small amount
      ✔ Should swap debt tokens to collateral tokens for medium amount
      ✔ Should handle different exchange rates (1:1.5)
      ✔ Should handle different exchange rates (1:1.2)
      ✔ Should handle DEX execution slippage (1%)
      ✔ Should handle DEX execution slippage (2%)
    IV. Edge Cases and Error Handling
      ✔ Should revert with insufficient collateral token balance
      ✔ Should revert with insufficient allowance
      ✔ Should handle zero deposit amount
      ✔ Should revert when slippage exceeds acceptable limits
    V. Multiple Users and Complex Scenarios
      ✔ Should handle deposits from multiple users with same amount
      ✔ Should handle deposits from multiple users with different amounts
      ✔ Should handle sequential deposits by same user
      ✔ Should maintain leverage after multiple deposits
    VI. Leftover Token Handling - Receiver Gets Leftover
      ✔ Should handle leftover debt tokens for small deposit
      ✔ Should handle leftover debt tokens for medium deposit
      ✔ Should handle leftover debt tokens for large deposit
      ✔ Should transfer leftover debt tokens to receiver (no event)
    Helper Calculation Functions With Existing Leverage
      ✔ getLeveragedAssets should use current leverage when > 0

  DLoopIncreaseLeverageBase – double-counting collateral bug
Test failed with error: Error: VM Exception while processing transaction: reverted with custom error 'IncreaseLeverageOutOfRange(32558212, 3000000, 2249999)'
    at DLoopCoreMock.setTransferPortionBps (contracts/vaults/dloop/core/venue/mock/DLoopCoreMock.sol:76)
    at DLoopCoreMock.increaseLeverage (contracts/vaults/dloop/core/DLoopCoreBase.sol:1225)
    at DLoopIncreaseLeverageMock._increaseLeverageWithoutFlashLoan (contracts/vaults/dloop/periphery/DLoopIncreaseLeverageBase.sol:409)
    at DLoopIncreaseLeverageMock.increaseLeverage (contracts/vaults/dloop/periphery/DLoopIncreaseLeverageBase.sol:186)
    at EdrProviderWrapper.request (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat/src/internal/hardhat-network/provider/provider.ts:359:41)
    at async HardhatEthersSigner.sendTransaction (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/@nomicfoundation/hardhat-ethers/src/signers.ts:181:18)
    at async send (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/ethers/src.ts/contract/contract.ts:313:20)
    at async Proxy.increaseLeverage (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/ethers/src.ts/contract/contract.ts:352:16)
    at async Context.<anonymous> (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/test/dloop/DLoopIncreaseLeverageMock/double-counting-bug-test.ts:60:7)
This might be due to leverage constraints in the mock contract
    ✔ Should successfully increase leverage with a flash loan when user supplies exactly the required collateral (40ms)

  DLoopIncreaseLeverageMock - Leftover Debt Token Handling
Direction: 1, Required: 20000000000
Test failed with error: Error: VM Exception while processing transaction: reverted with custom error 'IncreaseLeverageOutOfRange(33299999, 3000000, 2999999)'
    at DLoopCoreMock.setTransferPortionBps (contracts/vaults/dloop/core/venue/mock/DLoopCoreMock.sol:76)
    at DLoopCoreMock.increaseLeverage (contracts/vaults/dloop/core/DLoopCoreBase.sol:1225)
    at DLoopIncreaseLeverageMock._increaseLeverageWithoutFlashLoan (contracts/vaults/dloop/periphery/DLoopIncreaseLeverageBase.sol:409)
    at DLoopIncreaseLeverageMock.increaseLeverage (contracts/vaults/dloop/periphery/DLoopIncreaseLeverageBase.sol:186)
    at EdrProviderWrapper.request (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat/src/internal/hardhat-network/provider/provider.ts:359:41)
    at async HardhatEthersSigner.sendTransaction (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/@nomicfoundation/hardhat-ethers/src/signers.ts:181:18)
    at async send (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/ethers/src.ts/contract/contract.ts:313:20)
    at async Proxy.increaseLeverage (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/ethers/src.ts/contract/contract.ts:352:16)
    at async Context.<anonymous> (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/test/dloop/DLoopIncreaseLeverageMock/leftover.test.ts:65:18)
This might be due to leverage constraints in the mock contract
    ✔ transfers leftover debt tokens to user and emits event

  DLoopRedeemerMock Redeem Tests
    I. Basic Redeem Functionality
      ✔ Should handle small leveraged redeem
      ✔ Should handle partial redeem (50%)
      ✔ Should handle medium leveraged redeem
      ✔ Should handle large leveraged redeem
      ✔ Should handle redeem with minimal slippage tolerance
      ✔ Should handle redeem with higher slippage tolerance
    II. Flash Loan Integration
      ✔ Should utilize flash loans for small redeem
      ✔ Should utilize flash loans for medium redeem
      ✔ Should utilize flash loans for large redeem
      ✔ Should utilize flash loans for partial redeem
      ✔ Should handle flash loan fees correctly
    III. DEX Integration
      ✔ Should swap collateral tokens to debt tokens for small amount
      ✔ Should swap collateral tokens to debt tokens for medium amount
      ✔ Should handle different exchange rates (1:1.5)
      ✔ Should handle different exchange rates (1:1.2)
      ✔ Should handle DEX execution slippage (1%)
      ✔ Should handle DEX execution slippage (2%)
    IV. Edge Cases and Error Handling
      ✔ Should revert with insufficient share balance
      ✔ Should revert with insufficient allowance
      ✔ Should handle zero redeem amount
      ✔ Should revert when slippage exceeds acceptable limits
    V. Multiple Users and Complex Scenarios
      ✔ Should handle redeems from multiple users with same amount
      ✔ Should handle redeems from multiple users with different amounts
      ✔ Should handle sequential redeems by same user
      ✔ Should maintain leverage after partial redemptions
    VI. Leftover Token Handling - Receiver Gets Leftover
      ✔ Should handle leftover collateral tokens for small redeem
      ✔ Should handle leftover collateral tokens for medium redeem
      ✔ Should handle leftover collateral tokens for large redeem
      ✔ Should transfer leftover collateral tokens to receiver (no event)
    Helper Calculation Functions With Existing Leverage
      ✔ getUnleveragedAssets should use current leverage when > 0

  DStakeCollateralVault for sdUSD
    Initialization & Deployment State (from fixture)
      20) "before each" hook for "Should have deployed the vault correctly"

  DStakeCollateralVault for sdETH
    Initialization & Deployment State (from fixture)
      21) "before each" hook for "Should have deployed the vault correctly"

  DStakeRewardManagerDLend for sdUSD
    Deployment and Initialization
Deployed USDC (USD Coin) at 0xf3a7Aa52f75B5136668b9F2bf2f68606BDb2CDFA
Deployed USDS (USDS Stablecoin) at 0x242e50f40E771da8F19aAF1b813658A8562B2ad2
Deployed sUSDS (Savings USDS) at 0x366FDba679A8ece0567C1aFFC8C543f6FE9964d5
Deployed frxUSD (Frax USD) at 0x7B670a01E1D521ff232846dE0F7fE857a85c37A6
Deployed sfrxUSD (Staked Frax USD) at 0xEb2cF97CB2616f4c4a5C66ce4406B34955e57397
Deployed WETH (Wrapped ETH) at 0xA93cA2b7Ce13960Ec0806f19fB1133C933Ce23B3
Deployed stETH (Staked ETH) at 0x7c4D072293651Df0BF274A454F4C3EC70fc5A866
🪙  deploy-mocks/01_mock_token_setup.ts: ✅
Deployed MockRedstoneChainlinkOracleAlwaysAlive_WETH_USD at 0x618aB3160c5bbBc5bFa034ACa8e37dF3Eea0316D with price 2500
Deployed MockRedstoneChainlinkOracleAlwaysAlive_USDC_USD at 0x82C9d5501a2C46125A82cc82D0881FA27751EA3E with price 1
Deployed MockRedstoneChainlinkOracleAlwaysAlive_USDS_USD at 0x8999CaBc43E28202c5A2257f2a95A45b1F8A62BD with price 1
Deployed MockRedstoneChainlinkOracleAlwaysAlive_frxUSD_USD at 0x984f797d26d3da2E9b9f8Ae4eeFEACC60fCAA90C with price 1
Deployed MockRedstoneChainlinkOracleAlwaysAlive_sUSDS_USDS at 0x380de6769c9ECC5e8D032F8a3904bF17DC852cA5 with price 1.1
Deployed MockRedstoneChainlinkOracleAlwaysAlive_sfrxUSD_frxUSD at 0xbca08355Bcc24B2Be996c24c0D2f1829D6752630 with price 1.1
Deployed MockRedstoneChainlinkOracleAlwaysAlive_stETH_WETH at 0x7B3754E8aF59Cf676ad123c8A2643f6c77E50C4A with price 1.1
🔮 deploy-mocks/02_mock_oracle_setup.ts: ✅
⚠️  Skipping mock Curve pool deployment: dPool functionality disabled in this fork
☯️ 01_dusd_token.ts: ✅
Set plain Redstone feed for asset 0xA93cA2b7Ce13960Ec0806f19fB1133C933Ce23B3 to 0x618aB3160c5bbBc5bFa034ACa8e37dF3Eea0316D
[oracle-setup] Invalid or missing assetAddress in plainFeeds: ''
      22) "before each" hook for "should deploy with valid constructor parameters"

  DStakeRewardManagerDLend for sdETH
    Deployment and Initialization
      23) "before each" hook for "should deploy with valid constructor parameters"

  DStakeRouterDLend for sdUSD
    Initialization and State
      24) "before each" hook for "should set correct immutable addresses"

  DStakeRouterDLend for sdETH
    Initialization and State
      25) "before each" hook for "should set correct immutable addresses"

  DStakeToken for sdUSD
    Initialization & State
      26) "before each" hook for "Should set immutable dStable address via asset()"

  DStakeToken for sdETH
    Initialization & State
      27) "before each" hook for "Should set immutable dStable address via asset()"

  WrappedDLendConversionAdapter for sdUSD
    Initialization & Deployment State
      28) "before each" hook for "should deploy with correct initial state"

  WrappedDLendConversionAdapter for sdETH
    Initialization & Deployment State
      29) "before each" hook for "should deploy with correct initial state"

  Zero-share vulnerability
    30) "before each" hook for "reaches dust state and mints 0 shares for small deposit"

  dStake Ecosystem - sdUSD - Basic Deposit and dLEND Interaction Verification
    31) "before each" hook for "should deposit dStable, mint shares, and supply to dLEND"

  dStake Ecosystem - sdETH - Basic Deposit and dLEND Interaction Verification
    32) "before each" hook for "should deposit dStable, mint shares, and supply to dLEND"

  dSTAKE Ecosystem - sdUSD - Yield Accrual and Exchange Rate Update
    33) "before each" hook for "should accrue yield over time, improve exchange rate, and allow correct withdrawals"

  dSTAKE Ecosystem - sdETH - Yield Accrual and Exchange Rate Update
    34) "before each" hook for "should accrue yield over time, improve exchange rate, and allow correct withdrawals"

  DStakeRouterDLend – surplus < 1 share withdraw DoS
    35) "before each" hook for "Withdrawal should succeed (test will FAIL on current code)"

  SimpleDEXMock Tests
    I. Configuration and Setup
      ✔ Should set exchange rates correctly
      ✔ Should set execution slippage correctly
      ✔ Should emit events when setting exchange rates
      ✔ Should emit events when setting execution slippage
      ✔ Should revert when setting invalid exchange rate
      ✔ Should revert when setting invalid execution slippage
    II. ExactInput Swap Functionality
      ✔ Basic swap A->B with execution slippage
      ✔ Reverse swap B->A with execution slippage
      ✔ Cross-decimal swap A->C
      ✔ Small amount swap
      ✔ Large amount swap
      ✔ High exchange rate A->B (1:3)
      ✔ Low exchange rate A->B (1:0.5)
      ✔ Fractional rate A->C (1:0.75)
      ✔ Very high rate B->A (1:10)
      ✔ Decimal precision test B->C (1:1.25)
      ✔ No slippage swap A->B (0%)
      ✔ Low slippage swap A->B (0.5%)
      ✔ Medium slippage swap A->B (1%)
      ✔ High slippage swap A->B (5%)
      ✔ Very high slippage swap A->B (10%)
      ✔ Minimal slippage swap A->B (0.1%)
      ✔ Small slippage swap A->B (0.25%)
      ✔ Moderate slippage swap A->B (1.5%)
      ✔ Higher slippage swap A->B (3%)
      ✔ Exchange rate A->B (1:4)
      ✔ Exchange rate A->C (1:5.5)
      ✔ Exchange rate B->A (1:0.8)
      ✔ Exchange rate A->B (1:0.25)
      ✔ Exchange rate C->A (1:2.5)
      ✔ Should revert when output is below minimum
      ✔ Should revert when exchange rate not set
      ✔ Should revert when insufficient allowance
    III. ExactOutput Swap Functionality
      ✔ Basic exact output swap A->B
      ✔ Reverse exact output swap B->A
      ✔ Cross-decimal exact output swap A->C
      ✔ Small exact output swap
      ✔ Large exact output swap
      ✔ High rate exact output A->B (1:3)
      ✔ Low rate exact output A->B (1:0.5)
      ✔ No slippage exact output A->B (0%)
      ✔ Low slippage exact output A->B (1%)
      ✔ High slippage exact output A->B (5%)
      ✔ Minimal slippage exact output A->B (0.1%)
      ✔ Small slippage exact output A->B (0.25%)
      ✔ Half percent exact output A->B (0.5%)
      ✔ Moderate slippage exact output A->B (1.5%)
      ✔ Higher slippage exact output A->B (3%)
      ✔ Significant slippage exact output A->B (10%)
      ✔ Exact output A->C (1:0.75)
      ✔ Exact output B->A (1:10)
      ✔ Exact output B->C (1:1.25)
      ✔ Exact output A->B (1:4)
      ✔ Exact output A->C (1:5.5)
      ✔ Exact output B->A (1:0.8)
      ✔ Exact output A->B (1:0.25)
      ✔ Exact output C->A (1:2.5)
      ✔ Exact output A->B (1:6.7)
      ✔ Exact output C->B (1:1.8)
      ✔ Should revert when input exceeds maximum
      ✔ Should revert when DEX has insufficient output tokens
    IV. Multiple Users and Complex Scenarios
      ✔ Should handle multiple users swapping simultaneously
      ✔ Should handle swaps with different execution slippage rates independently
    V. Stress Tests
      ✔ Should handle rapid consecutive swaps
Extreme decimal difference caused expected arithmetic issues
      ✔ Should handle extreme decimal differences
      ✔ Should handle very large amounts
      ✔ Should handle edge case amounts (1 wei)
      ✔ Should maintain precision across multiple different token pairs
    VI. Error Conditions and Edge Cases
      ✔ Should revert with zero addresses
      ✔ Should revert with zero amounts
      ✔ Should handle preview functions with no exchange rate
      ✔ Should work with different receivers
    VII. Emergency Functions
      ✔ Should allow emergency withdrawal
      ✔ Should revert emergency withdrawal to zero address

  TestERC20FlashMintable
    Basic ERC20 functionality
      ✔ should have correct name, symbol, and decimals
      ✔ should start with zero total supply
    Minting functionality
      ✔ should allow minting tokens
      ✔ should allow multiple mints
    Burning functionality
      ✔ should allow burning own tokens
      ✔ should allow burning from approved account
      ✔ should revert when burning more than balance
    Flash loan functionality
      ✔ should support flash loans for the token itself
      ✔ should return zero max loan for other tokens
      ✔ should return zero flash fee
      ✔ should revert flash fee for unsupported token
      ✔ should successfully execute flash loan
      ✔ should revert if flash loan amount exceeds max loan
    Transfer functionality
      ✔ should allow transfers

  BaseOdosBuyAdapter - Surplus Handling
    ✔ [NEED-TO-FIX-AUDIT-ISSUE] should handle surplus correctly when router delivers more than requested
    ✔ [NEED-TO-FIX-AUDIT-ISSUE] demonstrates large surplus accumulation issue
    ✔ works correctly when exact amount received

  BaseOdosBuyAdapter
    ✔ executes happy-path buy with correct amounts and event
    ✔ reverts when adapter has insufficient balance
    ✔ reverts when router delivers less than requested

  BaseOdosSellAdapter - Surplus Handling
    ✔ [NEED-TO-FIX-AUDIT-ISSUE] should handle surplus correctly when router delivers more than minimum
    ✔ [NEED-TO-FIX-AUDIT-ISSUE] demonstrates large surplus accumulation in sell operations
    ✔ [NEED-TO-FIX-AUDIT-ISSUE] surplus handling should be consistent across multiple operations
    ✔ works correctly when exact minimum amount received

  BaseOdosSellAdapter
    ✔ executes happy-path sell with correct amounts and event
    ✔ reverts when adapter has insufficient balance
    ✔ reverts when router delivers less than minAmountToReceive

  OdosSwapLogic - Surplus Refund
    ✔ refunds surplus output to receiver
    ✔ refunds minimal surplus (1 wei) to receiver
    ✔ no refund when receiver is contract itself
    ✔ no surplus refund when exact amount received

  OdosSwapLogic
    ✔ swapExactOutput refunds surplus correctly to receiver
    ✔ swapExactOutput handles exact amount without refund
    ✔ reverts when router delivers less than amountOut

  OdosSwapUtils
    ✔ executes happy-path swap
    ✔ reverts when received < exactOut

  ChainlinkCompositeAggregator
    Constructor and initialization
      ✔ should initialize with correct parameters
      ✔ should revert with zero feed addresses
      ✔ should return correct description
      ✔ should return correct version
    Price composition without thresholding
      ✔ should correctly compose prices from two feeds
      ✔ should handle different decimal precisions
      ✔ should handle negative prices by converting to zero
      ✔ should return latest data for getRoundData regardless of roundId
    Price composition with thresholding
      ✔ should apply thresholds when prices exceed thresholds
      ✔ should not apply thresholds when prices are below thresholds
      ✔ should apply threshold to only one feed when mixed
    Staleness checks
      ✔ should revert when prices are stale
      ✔ should work when prices are fresh
    Edge cases
      ✔ should handle zero prices
      ✔ should handle very large prices

  RedstoneChainlinkCompositeWrapperWithThresholding
    ✔ should run tests for each oracle aggregator

  RedstoneChainlinkWrapper
    ✔ should run tests for each oracle aggregator

  RedstoneChainlinkWrapperWithThresholding
    ✔ should run tests for each oracle aggregator

  PendleSwapPOC - Mainnet Integration
Skipping Pendle POC tests - not on Sonic mainnet
    Full POC flow simulation
      - Should demonstrate complete off-chain → on-chain flow

  Pendle SDK Functions
Skipping Pendle SDK tests - not on Sonic mainnet
    isPT function
      - Should return true for valid PT tokens
      - Should return false for non-PT tokens
      - Should return false for invalid addresses
    getPTMarketInfo function
      - Should return correct market info for PT-aUSDC (inactive market)
      - Should return correct market info for PT-wstkscUSD (active market)
      - Should validate all fixture PT tokens have market info

  RewardClaimable
    getTreasuryFee
      ✔ Zero fee
      ✔ 10% fee
      ✔ Maximum fee (30%)
      ✔ Small amount with fee
      ✔ Should revert if fee exceeds max
      ✔ Should revert if initial fee exceeds max fee in constructor
    Treasury Management
      ✔ Should set treasury address
      ✔ Should only allow REWARDS_MANAGER_ROLE to set treasury
      ✔ Should revert if treasury is zero address
    ExchangeThreshold Management
      ✔ Should set exchange threshold
      ✔ Should only allow REWARDS_MANAGER_ROLE to set exchange threshold
      ✔ Should revert if exchange threshold is zero
    claimRewards
      ✔ Should claim rewards according to emission amount
      ✔ Should revert on invalid reward token
      Should handle different emission rates for different tokens
        ✔ Different emission amounts
        ✔ Different initial balances
      Should only allow to compound when reaching the exchange threshold
        ✔ Should revert if below threshold
        ✔ Should not revert if above threshold
    compoundRewards
      ✔ Compound with 10% treasury fee
      ✔ Compound with zero treasury fee
      ✔ Should revert if amount is below threshold
    Reward Token Management
      ✔ Should correctly add reward tokens
    Access Control
      ✔ Should have DEFAULT_ADMIN_ROLE for deployer
      ✔ Should have REWARDS_MANAGER_ROLE for deployer
      ✔ Should allow granting and revoking roles

  ERC20VestingNFT: tokenURI
    ✔ returns valid JSON metadata before and after maturity

  ERC20VestingNFT
    Contract Deployment & Initialization
      ✔ Should deploy with valid parameters
      ✔ Should revert deployment with zero dSTAKE token address
      ✔ Should revert deployment with zero initial owner
      ✔ Should revert deployment with zero vesting period
      ✔ Should revert deployment with zero max total supply
    Deposit Functionality
      ✔ Should successfully deposit and mint NFT
      ✔ Should revert deposit with zero amount
      ✔ Should revert deposit when deposits are disabled
      ✔ Should revert deposit exceeding max total supply
      ✔ Should handle multiple deposits from different users
      ✔ Should revert deposit below minimum threshold
      ✔ Should allow deposit equal to or above minimum threshold
    Early Redemption Functionality
      ✔ Should successfully redeem early
      ✔ Should revert redeem early for non-existent token
      ✔ Should revert redeem early for token not owned by caller
      ✔ Should revert redeem early when vesting is complete
      ✔ Should revert redeem early for matured token
    Matured Withdrawal Functionality
      ✔ Should successfully withdraw matured
      ✔ Should revert withdraw matured for non-existent token
      ✔ Should revert withdraw matured for token not owned by caller
      ✔ Should revert withdraw matured before vesting period ends
      ✔ Should revert withdraw matured if already matured
    NFT Transfer Logic (Soul-bound Feature)
      ✔ Should allow transfer of non-matured NFT
      ✔ Should prevent transfer of matured NFT
      ✔ Should allow new owner to redeem early after transfer
    Owner Functions
      setDepositsEnabled
        ✔ Should allow owner to disable deposits
        ✔ Should allow owner to re-enable deposits
        ✔ Should revert if non-owner tries to set deposits enabled
      setMaxTotalSupply
        ✔ Should allow owner to update max total supply
        ✔ Should allow setting max supply below current total deposited
        ✔ Should allow deposits to resume after withdrawals bring total below new cap
        ✔ Should revert if non-owner tries to set max total supply
      setMinDepositAmount
        ✔ Should allow owner to update minimum deposit amount
        ✔ Should allow setting minimum deposit to zero
        ✔ Should revert if non-owner tries to set minimum deposit amount
        ✔ Should enforce new minimum deposit amount immediately
    View Functions
      isVestingComplete
        ✔ Should return false before vesting period ends
        ✔ Should return true after vesting period ends
        ✔ Should return false for non-existent token
      getRemainingVestingTime
        ✔ Should return positive value while vesting
        ✔ Should return 0 after vesting complete
        ✔ Should revert for non-existent token
      getVestingPosition
        ✔ Should return correct details for active position
        ✔ Should return correct details after vesting ends
        ✔ Should return correct details after matured withdrawal
        ✔ Should return zeros for non-existent token
        ✔ Should return zeros for early redeemed token
    Edge Cases & Interactions
      ✔ Should handle operations on transferred tokens correctly
      ✔ Should correctly track totalDeposited through multiple operations
      ✔ Should handle max supply interactions correctly

  ERC20VestingNFT: getRemainingVestingTime
    ✔ reverts with TokenNotExists for an invalid tokenId
    ✔ returns remaining time > 0 while vesting in progress
    ✔ returns 0 after vesting period has elapsed

  RedstoneChainlinkCompositeWrapperWithThresholding for USD
    Base currency and units
      36) "before each" hook for "should return correct BASE_CURRENCY"

  RedstoneChainlinkCompositeWrapperWithThresholding for ETH
    Base currency and units
      37) "before each" hook for "should return correct BASE_CURRENCY"

  RedstoneChainlinkWrapper for USD
    Base currency and units
      38) "before each" hook for "should return correct BASE_CURRENCY"

  RedstoneChainlinkWrapper for ETH
    Base currency and units
      39) "before each" hook for "should return correct BASE_CURRENCY"

  RedstoneChainlinkWrapperWithThresholding for USD
    Base currency and units
      40) "before each" hook for "should return correct BASE_CURRENCY"

  RedstoneChainlinkWrapperWithThresholding for ETH
    Base currency and units
      41) "before each" hook for "should return correct BASE_CURRENCY"


  573 passing (13s)
  396 pending
  41 failing

  1) AmoManager Ecosystem Tests for dUSD
       "before each" hook for "verifies oracle prices for pegged and yield-bearing collateral":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  2) AmoManager Ecosystem Tests for dETH
       "before each" hook for "verifies oracle prices for pegged and yield-bearing collateral":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  3) AmoManager
       AmoManager for dUSD
         "before each" hook for "should have correct role assignments after deployment":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  4) AmoManager
       AmoManager for dETH
         "before each" hook for "should have correct role assignments after deployment":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  5) CollateralHolderVault for dUSD
       "before each" hook for "allows frxUSD as collateral":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  6) CollateralHolderVault for dETH
       "before each" hook for "allows WETH as collateral":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  7) IssuerV2 for dUSD
       "before each" hook for "issues dUSD in exchange for frxUSD collateral":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  8) IssuerV2 for dETH
       "before each" hook for "issues dETH in exchange for WETH collateral":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  9) RedeemerV2 for dUSD
       "before each" hook for "per-asset pause prevents redemption":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  10) RedeemerV2 for dETH
       "before each" hook for "per-asset pause prevents redemption":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  11) ERC20StablecoinUpgradeable
       "before each" hook for "should initialize with correct name and symbol":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  12) dUSD Ecosystem Lifecycle
       "before each" hook for "verifies oracle prices for all collateral tokens":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  13) dETH Ecosystem Lifecycle
       "before each" hook for "verifies oracle prices for all collateral tokens":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  14) AaveOracle
       "before each" hook for "should initialize with correct base currency unit (8 decimals)":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  15) dLEND AaveProtocolDataProvider
       "before each" hook for "should return correct configuration data for a collateral reserve":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  16) dLEND Pool
       "before each" hook for "should allow users to supply assets":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  17) StaticATokenLM – Signature malleability guard
       "before each" hook for "rejects malleated metaDeposit & accepts canonical one":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  18) StaticATokenFactory & StaticATokenLM
       "before each" hook for "factory starts empty":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  19) dLEND UiPoolDataProviderV3
       "before each" hook for "should return the list of all reserve assets matching the fixture":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  20) DStakeCollateralVault for sdUSD
       "before each" hook for "Should have deployed the vault correctly":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  21) DStakeCollateralVault for sdETH
       "before each" hook for "Should have deployed the vault correctly":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  22) DStakeRewardManagerDLend for sdUSD
       "before each" hook for "should deploy with valid constructor parameters":
     ERROR processing /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/deploy/02_dusd_ecosystem/02_setup_usd_redstone_oracle_wrappers.ts:
Error: [oracle-setup] Invalid or missing assetAddress in plainFeeds: ''
    at Object.func (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/deploy/02_dusd_ecosystem/02_setup_usd_redstone_oracle_wrappers.ts:92:13)
    at async DeploymentsManager.executeDeployScripts (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat-deploy/src/DeploymentsManager.ts:1212:22)
    at async DeploymentsManager.runDeploy (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat-deploy/src/DeploymentsManager.ts:1061:5)
    at async Object.fixture (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat-deploy/src/DeploymentsManager.ts:316:9)
    at async executeSetupDLendRewards (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/test/dstake/fixture.ts:201:3)
    at async /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat-deploy/src/DeploymentsManager.ts:341:24
    at async Context.<anonymous> (/Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/test/dstake/DStakeRewardManagerDLend.ts:67:24)
  Error: ERROR processing /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/deploy/02_dusd_ecosystem/02_setup_usd_redstone_oracle_wrappers.ts:
  Error: [oracle-setup] Invalid or missing assetAddress in plainFeeds: ''
      at Object.func (deploy/02_dusd_ecosystem/02_setup_usd_redstone_oracle_wrappers.ts:92:13)
      at async DeploymentsManager.executeDeployScripts (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1212:22)
      at async DeploymentsManager.runDeploy (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1061:5)
      at async Object.fixture (node_modules/hardhat-deploy/src/DeploymentsManager.ts:316:9)
      at async executeSetupDLendRewards (test/dstake/fixture.ts:201:3)
      at async /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat-deploy/src/DeploymentsManager.ts:341:24
      at async Context.<anonymous> (test/dstake/DStakeRewardManagerDLend.ts:67:24)
      at DeploymentsManager.executeDeployScripts (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1215:19)
      at async DeploymentsManager.runDeploy (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1061:5)
      at async Object.fixture (node_modules/hardhat-deploy/src/DeploymentsManager.ts:316:9)
      at async executeSetupDLendRewards (test/dstake/fixture.ts:201:3)
      at async /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat-deploy/src/DeploymentsManager.ts:341:24
      at async Context.<anonymous> (test/dstake/DStakeRewardManagerDLend.ts:67:24)

  23) DStakeRewardManagerDLend for sdETH
       "before each" hook for "should deploy with valid constructor parameters":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  24) DStakeRouterDLend for sdUSD
       "before each" hook for "should set correct immutable addresses":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  25) DStakeRouterDLend for sdETH
       "before each" hook for "should set correct immutable addresses":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  26) DStakeToken for sdUSD
       "before each" hook for "Should set immutable dStable address via asset()":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  27) DStakeToken for sdETH
       "before each" hook for "Should set immutable dStable address via asset()":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  28) WrappedDLendConversionAdapter for sdUSD
       "before each" hook for "should deploy with correct initial state":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  29) WrappedDLendConversionAdapter for sdETH
       "before each" hook for "should deploy with correct initial state":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  30) Zero-share vulnerability
       "before each" hook for "reaches dust state and mints 0 shares for small deposit":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  31) dStake Ecosystem - sdUSD - Basic Deposit and dLEND Interaction Verification
       "before each" hook for "should deposit dStable, mint shares, and supply to dLEND":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  32) dStake Ecosystem - sdETH - Basic Deposit and dLEND Interaction Verification
       "before each" hook for "should deposit dStable, mint shares, and supply to dLEND":
     RangeError: Maximum call stack size exceeded
      at Array.values (<anonymous>)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1154:45)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  33) dSTAKE Ecosystem - sdUSD - Yield Accrual and Exchange Rate Update
       "before each" hook for "should accrue yield over time, improve exchange rate, and allow correct withdrawals":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  34) dSTAKE Ecosystem - sdETH - Yield Accrual and Exchange Rate Update
       "before each" hook for "should accrue yield over time, improve exchange rate, and allow correct withdrawals":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  35) DStakeRouterDLend – surplus < 1 share withdraw DoS
       "before each" hook for "Withdrawal should succeed (test will FAIL on current code)":
     RangeError: Maximum call stack size exceeded
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1148:33)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)
      at recurseDependencies (node_modules/hardhat-deploy/src/DeploymentsManager.ts:1158:15)

  36) RedstoneChainlinkCompositeWrapperWithThresholding for USD
       "before each" hook for "should return correct BASE_CURRENCY":
     Error: Oracle aggregator integration tests require deployed oracle wrappers. Please run deployment scripts first or use a network with pre-deployed contracts. Missing deployment: No deployment found for: USD_RedstoneChainlinkWrapper
      at /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/test/oracle_aggregator/fixtures.ts:108:15
      at async /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat-deploy/src/DeploymentsManager.ts:341:24
      at async Context.<anonymous> (test/oracle_aggregator/RedstoneChainlinkCompositeWrapperWithThresholding.ts:60:23)

  37) RedstoneChainlinkCompositeWrapperWithThresholding for ETH
       "before each" hook for "should return correct BASE_CURRENCY":
     Error: Oracle aggregator integration tests require deployed oracle wrappers. Please run deployment scripts first or use a network with pre-deployed contracts. Missing deployment: No deployment found for: ETH_RedstoneWrapper
      at /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/test/oracle_aggregator/fixtures.ts:108:15
      at async /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat-deploy/src/DeploymentsManager.ts:341:24
      at async Context.<anonymous> (test/oracle_aggregator/RedstoneChainlinkCompositeWrapperWithThresholding.ts:60:23)

  38) RedstoneChainlinkWrapper for USD
       "before each" hook for "should return correct BASE_CURRENCY":
     Error: Oracle aggregator integration tests require deployed oracle wrappers. Please run deployment scripts first or use a network with pre-deployed contracts. Missing deployment: No deployment found for: USD_RedstoneChainlinkWrapper
      at /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/test/oracle_aggregator/fixtures.ts:108:15
      at async /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat-deploy/src/DeploymentsManager.ts:341:24
      at async Context.<anonymous> (test/oracle_aggregator/RedstoneChainlinkWrapper.ts:57:23)

  39) RedstoneChainlinkWrapper for ETH
       "before each" hook for "should return correct BASE_CURRENCY":
     Error: Oracle aggregator integration tests require deployed oracle wrappers. Please run deployment scripts first or use a network with pre-deployed contracts. Missing deployment: No deployment found for: ETH_RedstoneWrapper
      at /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/test/oracle_aggregator/fixtures.ts:108:15
      at async /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat-deploy/src/DeploymentsManager.ts:341:24
      at async Context.<anonymous> (test/oracle_aggregator/RedstoneChainlinkWrapper.ts:57:23)

  40) RedstoneChainlinkWrapperWithThresholding for USD
       "before each" hook for "should return correct BASE_CURRENCY":
     Error: Oracle aggregator integration tests require deployed oracle wrappers. Please run deployment scripts first or use a network with pre-deployed contracts. Missing deployment: No deployment found for: USD_RedstoneChainlinkWrapper
      at /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/test/oracle_aggregator/fixtures.ts:108:15
      at async /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat-deploy/src/DeploymentsManager.ts:341:24
      at async Context.<anonymous> (test/oracle_aggregator/RedstoneChainlinkWrapperWithThresholding.ts:60:23)

  41) RedstoneChainlinkWrapperWithThresholding for ETH
       "before each" hook for "should return correct BASE_CURRENCY":
     Error: Oracle aggregator integration tests require deployed oracle wrappers. Please run deployment scripts first or use a network with pre-deployed contracts. Missing deployment: No deployment found for: ETH_RedstoneWrapper
      at /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/test/oracle_aggregator/fixtures.ts:108:15
      at async /Users/dazheng/workspace/dtrinity/ethereum-solidity-contracts/node_modules/hardhat-deploy/src/DeploymentsManager.ts:341:24
      at async Context.<anonymous> (test/oracle_aggregator/RedstoneChainlinkWrapperWithThresholding.ts:60:23)



make: *** [test.hardhat] Error 41
