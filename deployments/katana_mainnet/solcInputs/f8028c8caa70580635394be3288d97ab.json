{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {IERC20Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC20\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20Upgradeable} from \"../ERC20Upgradeable.sol\";\nimport {ContextUpgradeable} from \"../../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20FlashMintUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20FlashMint.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC3156FlashBorrower} from \"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\";\nimport {IERC3156FlashLender} from \"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\";\nimport {ERC20Upgradeable} from \"../ERC20Upgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC-3156 Flash loans extension, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n *\n * Adds the {flashLoan} method, which provides flash loan support at the token\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\n *\n * NOTE: When this extension is used along with the {ERC20Capped} or {ERC20Votes} extensions,\n * {maxFlashLoan} will not correctly reflect the maximum that can be flash minted. We recommend\n * overriding {maxFlashLoan} so that it correctly reflects the supply cap.\n */\nabstract contract ERC20FlashMintUpgradeable is Initializable, ERC20Upgradeable, IERC3156FlashLender {\n    bytes32 private constant RETURN_VALUE = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    /**\n     * @dev The loan token is not valid.\n     */\n    error ERC3156UnsupportedToken(address token);\n\n    /**\n     * @dev The requested loan exceeds the max loan value for `token`.\n     */\n    error ERC3156ExceededMaxLoan(uint256 maxLoan);\n\n    /**\n     * @dev The receiver of a flashloan is not a valid {IERC3156FlashBorrower-onFlashLoan} implementer.\n     */\n    error ERC3156InvalidReceiver(address receiver);\n\n    function __ERC20FlashMint_init() internal onlyInitializing {\n    }\n\n    function __ERC20FlashMint_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the maximum amount of tokens available for loan.\n     * @param token The address of the token that is requested.\n     * @return The amount of token that can be loaned.\n     *\n     * NOTE: This function does not consider any form of supply cap, so in case\n     * it's used in a token with a cap like {ERC20Capped}, make sure to override this\n     * function to integrate the cap instead of `type(uint256).max`.\n     */\n    function maxFlashLoan(address token) public view virtual returns (uint256) {\n        return token == address(this) ? type(uint256).max - totalSupply() : 0;\n    }\n\n    /**\n     * @dev Returns the fee applied when doing flash loans. This function calls\n     * the {_flashFee} function which returns the fee applied when doing flash\n     * loans.\n     * @param token The token to be flash loaned.\n     * @param value The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n    function flashFee(address token, uint256 value) public view virtual returns (uint256) {\n        if (token != address(this)) {\n            revert ERC3156UnsupportedToken(token);\n        }\n        return _flashFee(token, value);\n    }\n\n    /**\n     * @dev Returns the fee applied when doing flash loans. By default this\n     * implementation has 0 fees. This function can be overloaded to make\n     * the flash loan mechanism deflationary.\n     * @param token The token to be flash loaned.\n     * @param value The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n    function _flashFee(address token, uint256 value) internal view virtual returns (uint256) {\n        // silence warning about unused variable without the addition of bytecode.\n        token;\n        value;\n        return 0;\n    }\n\n    /**\n     * @dev Returns the receiver address of the flash fee. By default this\n     * implementation returns the address(0) which means the fee amount will be burnt.\n     * This function can be overloaded to change the fee receiver.\n     * @return The address for which the flash fee will be sent to.\n     */\n    function _flashFeeReceiver() internal view virtual returns (address) {\n        return address(0);\n    }\n\n    /**\n     * @dev Performs a flash loan. New tokens are minted and sent to the\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\n     * interface. By the end of the flash loan, the receiver is expected to own\n     * value + fee tokens and have them approved back to the token contract itself so\n     * they can be burned.\n     * @param receiver The receiver of the flash loan. Should implement the\n     * {IERC3156FlashBorrower-onFlashLoan} interface.\n     * @param token The token to be flash loaned. Only `address(this)` is\n     * supported.\n     * @param value The amount of tokens to be loaned.\n     * @param data An arbitrary datafield that is passed to the receiver.\n     * @return `true` if the flash loan was successful.\n     */\n    // This function can reenter, but it doesn't pose a risk because it always preserves the property that the amount\n    // minted at the beginning is always recovered and burned at the end, or else the entire function will revert.\n    // slither-disable-next-line reentrancy-no-eth\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 value,\n        bytes calldata data\n    ) public virtual returns (bool) {\n        uint256 maxLoan = maxFlashLoan(token);\n        if (value > maxLoan) {\n            revert ERC3156ExceededMaxLoan(maxLoan);\n        }\n        uint256 fee = flashFee(token, value);\n        _mint(address(receiver), value);\n        if (receiver.onFlashLoan(_msgSender(), token, value, fee, data) != RETURN_VALUE) {\n            revert ERC3156InvalidReceiver(address(receiver));\n        }\n        address flashFeeReceiver = _flashFeeReceiver();\n        _spendAllowance(address(receiver), address(this), value + fee);\n        if (fee == 0 || flashFeeReceiver == address(0)) {\n            _burn(address(receiver), value + fee);\n        } else {\n            _burn(address(receiver), value);\n            _transfer(address(receiver), flashFeeReceiver, fee);\n        }\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20Upgradeable} from \"../ERC20Upgradeable.sol\";\nimport {PausableUpgradeable} from \"../../../utils/PausableUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC-20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\n */\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\n    function __ERC20Pausable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Pausable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {ERC20-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\n        super._update(from, to, value);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {ERC20Upgradeable} from \"../ERC20Upgradeable.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {EIP712Upgradeable} from \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport {NoncesUpgradeable} from \"../../../utils/NoncesUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20Permit, EIP712Upgradeable, NoncesUpgradeable {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC-20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /// @inheritdoc IERC20Permit\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /// @inheritdoc IERC20Permit\n    function nonces(address owner) public view virtual override(IERC20Permit, NoncesUpgradeable) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /// @inheritdoc IERC20Permit\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {ERC20Upgradeable} from \"../ERC20Upgradeable.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC4626} from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC-4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC-20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC-20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * [CAUTION]\n * ====\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n * with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * Since v4.9, this implementation introduces configurable virtual assets and shares to help developers mitigate that risk.\n * The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals\n * and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which\n * itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default\n * offset (0) makes it non-profitable even if an attacker is able to capture value from multiple user deposits, as a result\n * of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains.\n * With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the\n * underlying math can be found xref:ROOT:erc4626.adoc#inflation-attack[here].\n *\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n * `_convertToShares` and `_convertToAssets` functions.\n *\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n * ====\n */\nabstract contract ERC4626Upgradeable is Initializable, ERC20Upgradeable, IERC4626 {\n    using Math for uint256;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC4626\n    struct ERC4626Storage {\n        IERC20 _asset;\n        uint8 _underlyingDecimals;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC4626\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC4626StorageLocation = 0x0773e532dfede91f04b12a73d3d2acd361424f41f76b4fb79f090161e36b4e00;\n\n    function _getERC4626Storage() private pure returns (ERC4626Storage storage $) {\n        assembly {\n            $.slot := ERC4626StorageLocation\n        }\n    }\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC-20 or ERC-777).\n     */\n    function __ERC4626_init(IERC20 asset_) internal onlyInitializing {\n        __ERC4626_init_unchained(asset_);\n    }\n\n    function __ERC4626_init_unchained(IERC20 asset_) internal onlyInitializing {\n        ERC4626Storage storage $ = _getERC4626Storage();\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\n        $._underlyingDecimals = success ? assetDecimals : 18;\n        $._asset = asset_;\n    }\n\n    /**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool ok, uint8 assetDecimals) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeCall(IERC20Metadata.decimals, ())\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n        ERC4626Storage storage $ = _getERC4626Storage();\n        return $._underlyingDecimals + _decimalsOffset();\n    }\n\n    /// @inheritdoc IERC4626\n    function asset() public view virtual returns (address) {\n        ERC4626Storage storage $ = _getERC4626Storage();\n        return address($._asset);\n    }\n\n    /// @inheritdoc IERC4626\n    function totalAssets() public view virtual returns (uint256) {\n        return IERC20(asset()).balanceOf(address(this));\n    }\n\n    /// @inheritdoc IERC4626\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /// @inheritdoc IERC4626\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /// @inheritdoc IERC4626\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /// @inheritdoc IERC4626\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /// @inheritdoc IERC4626\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /// @inheritdoc IERC4626\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /// @inheritdoc IERC4626\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /// @inheritdoc IERC4626\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /// @inheritdoc IERC4626\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /// @inheritdoc IERC4626\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /// @inheritdoc IERC4626\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /// @inheritdoc IERC4626\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /// @inheritdoc IERC4626\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /// @inheritdoc IERC4626\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If asset() is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(IERC20(asset()), caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If asset() is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(IERC20(asset()), receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _decimalsOffset() internal view virtual returns (uint8) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\nimport {IERC5267} from \"@openzeppelin/contracts/interfaces/IERC5267.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: The upgradeable version of this contract does not use an immutable cache and recomputes the domain separator\n * each time {_domainSeparatorV4} is called. That is cheaper than accessing a cached version in cold storage.\n */\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\n    struct EIP712Storage {\n        /// @custom:oz-renamed-from _HASHED_NAME\n        bytes32 _hashedName;\n        /// @custom:oz-renamed-from _HASHED_VERSION\n        bytes32 _hashedVersion;\n\n        string _name;\n        string _version;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.EIP712\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\n\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\n        assembly {\n            $.slot := EIP712StorageLocation\n        }\n    }\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        EIP712Storage storage $ = _getEIP712Storage();\n        $._name = name;\n        $._version = version;\n\n        // Reset prior values in storage if upgrading\n        $._hashedName = 0;\n        $._hashedVersion = 0;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator();\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /// @inheritdoc IERC5267\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        EIP712Storage storage $ = _getEIP712Storage();\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\n        require($._hashedName == 0 && $._hashedVersion == 0, \"EIP712: Uninitialized\");\n\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Name() internal view virtual returns (string memory) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Version() internal view virtual returns (string memory) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        return $._version;\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\n     */\n    function _EIP712NameHash() internal view returns (bytes32) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        string memory name = _EIP712Name();\n        if (bytes(name).length > 0) {\n            return keccak256(bytes(name));\n        } else {\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\n            bytes32 hashedName = $._hashedName;\n            if (hashedName != 0) {\n                return hashedName;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\n     */\n    function _EIP712VersionHash() internal view returns (bytes32) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        string memory version = _EIP712Version();\n        if (bytes(version).length > 0) {\n            return keccak256(bytes(version));\n        } else {\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\n            bytes32 hashedVersion = $._hashedVersion;\n            if (hashedVersion != 0) {\n                return hashedVersion;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract NoncesUpgradeable is Initializable {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.Nonces\n    struct NoncesStorage {\n        mapping(address account => uint256) _nonces;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Nonces\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant NoncesStorageLocation = 0x5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00;\n\n    function _getNoncesStorage() private pure returns (NoncesStorage storage $) {\n        assembly {\n            $.slot := NoncesStorageLocation\n        }\n    }\n\n    function __Nonces_init() internal onlyInitializing {\n    }\n\n    function __Nonces_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        NoncesStorage storage $ = _getNoncesStorage();\n        return $._nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        NoncesStorage storage $ = _getNoncesStorage();\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return $._nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    function __Pausable_init() internal onlyInitializing {\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1967.sol)\n\npragma solidity >=0.4.11;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC3156FlashBorrower.sol)\n\npragma solidity >=0.5.0;\n\n/**\n * @dev Interface of the ERC-3156 FlashBorrower, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n */\ninterface IERC3156FlashBorrower {\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC3156FlashLender.sol)\n\npragma solidity >=0.5.0;\n\nimport {IERC3156FlashBorrower} from \"./IERC3156FlashBorrower.sol\";\n\n/**\n * @dev Interface of the ERC-3156 FlashLender, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n */\ninterface IERC3156FlashLender {\n    /**\n     * @dev The amount of currency available to be lended.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(address token) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(address token, uint256 amount) external view returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC4626.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC-4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC5267.sol)\n\npragma solidity >=0.4.16;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.22;\n\nimport {Proxy} from \"../Proxy.sol\";\nimport {ERC1967Utils} from \"./ERC1967Utils.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    constructor(address implementation, bytes memory _data) payable {\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return ERC1967Utils.getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.21;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This library provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\n */\nlibrary ERC1967Utils {\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit IERC1967.Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit IERC1967.BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\n     * function and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.22;\n\nimport {ITransparentUpgradeableProxy} from \"./TransparentUpgradeableProxy.sol\";\nimport {Ownable} from \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgrade(address,address)`\n     * and `upgradeAndCall(address,address,bytes)` are present, and `upgrade` must be used if no function should be called,\n     * while `upgradeAndCall` will invoke the `receive` function if the third argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeAndCall(address,address,bytes)` is present, and the third argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev Sets the initial owner who can perform upgrades.\n     */\n    constructor(address initialOwner) Ownable(initialOwner) {}\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation.\n     * See {TransparentUpgradeableProxy-_dispatchUpgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    function upgradeAndCall(\n        ITransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.22;\n\nimport {ERC1967Utils} from \"../ERC1967/ERC1967Utils.sol\";\nimport {ERC1967Proxy} from \"../ERC1967/ERC1967Proxy.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {ProxyAdmin} from \"./ProxyAdmin.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and its upgradeability mechanism is implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    /// @dev See {UUPSUpgradeable-upgradeToAndCall}\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable through an associated {ProxyAdmin} instance.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches the {ITransparentUpgradeableProxy-upgradeToAndCall} function exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can call the `upgradeToAndCall` function but any other call won't be forwarded to\n * the implementation. If the admin tries to call a function on the implementation it will fail with an error indicating\n * the proxy admin cannot fallback to the target implementation.\n *\n * These properties mean that the admin account can only be used for upgrading the proxy, so it's best if it's a\n * dedicated account that is not used for anything else. This will avoid headaches due to sudden errors when trying to\n * call a function from the proxy implementation. For this reason, the proxy deploys an instance of {ProxyAdmin} and\n * allows upgrades only if they come through it. You should think of the `ProxyAdmin` instance as the administrative\n * interface of the proxy, including the ability to change who can trigger upgrades by transferring ownership.\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead `upgradeToAndCall` is implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * NOTE: This proxy does not inherit from {Context} deliberately. The {ProxyAdmin} of this contract won't send a\n * meta-transaction in any way, and any other meta-transaction setup should be made in the implementation contract.\n *\n * IMPORTANT: This contract avoids unnecessary storage reads by setting the admin only during construction as an\n * immutable variable, preventing any changes thereafter. However, the admin slot defined in ERC-1967 can still be\n * overwritten by the implementation logic pointed to by this proxy. In such cases, the contract may end up in an\n * undesirable state where the admin slot is different from the actual admin. Relying on the value of the admin slot\n * is generally fine if the implementation is trusted.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the\n * compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new\n * function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This\n * could render the `upgradeToAndCall` function inaccessible, preventing upgradeability and compromising transparency.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    // An immutable address for the admin to avoid unnecessary SLOADs before each call\n    // at the expense of removing the ability to change the admin once it's set.\n    // This is acceptable if the admin is always a ProxyAdmin instance or similar contract\n    // with its own ability to transfer the permissions to another account.\n    address private immutable _admin;\n\n    /**\n     * @dev The proxy caller is the current admin, and can't fallback to the proxy target.\n     */\n    error ProxyDeniedAdminAccess();\n\n    /**\n     * @dev Initializes an upgradeable proxy managed by an instance of a {ProxyAdmin} with an `initialOwner`,\n     * backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in\n     * {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address initialOwner, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        _admin = address(new ProxyAdmin(initialOwner));\n        // Set the storage value and emit an event for ERC-1967 compatibility\n        ERC1967Utils.changeAdmin(_proxyAdmin());\n    }\n\n    /**\n     * @dev Returns the admin of this proxy.\n     */\n    function _proxyAdmin() internal view virtual returns (address) {\n        return _admin;\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior.\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _proxyAdmin()) {\n            if (msg.sig != ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                revert ProxyDeniedAdminAccess();\n            } else {\n                _dispatchUpgradeToAndCall();\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy. See {ERC1967Utils-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    function _dispatchUpgradeToAndCall() private {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        ERC1967Utils.upgradeToAndCall(newImplementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20FlashMint.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC3156FlashBorrower} from \"../../../interfaces/IERC3156FlashBorrower.sol\";\nimport {IERC3156FlashLender} from \"../../../interfaces/IERC3156FlashLender.sol\";\nimport {ERC20} from \"../ERC20.sol\";\n\n/**\n * @dev Implementation of the ERC-3156 Flash loans extension, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n *\n * Adds the {flashLoan} method, which provides flash loan support at the token\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\n *\n * NOTE: When this extension is used along with the {ERC20Capped} or {ERC20Votes} extensions,\n * {maxFlashLoan} will not correctly reflect the maximum that can be flash minted. We recommend\n * overriding {maxFlashLoan} so that it correctly reflects the supply cap.\n */\nabstract contract ERC20FlashMint is ERC20, IERC3156FlashLender {\n    bytes32 private constant RETURN_VALUE = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    /**\n     * @dev The loan token is not valid.\n     */\n    error ERC3156UnsupportedToken(address token);\n\n    /**\n     * @dev The requested loan exceeds the max loan value for `token`.\n     */\n    error ERC3156ExceededMaxLoan(uint256 maxLoan);\n\n    /**\n     * @dev The receiver of a flashloan is not a valid {IERC3156FlashBorrower-onFlashLoan} implementer.\n     */\n    error ERC3156InvalidReceiver(address receiver);\n\n    /**\n     * @dev Returns the maximum amount of tokens available for loan.\n     * @param token The address of the token that is requested.\n     * @return The amount of token that can be loaned.\n     *\n     * NOTE: This function does not consider any form of supply cap, so in case\n     * it's used in a token with a cap like {ERC20Capped}, make sure to override this\n     * function to integrate the cap instead of `type(uint256).max`.\n     */\n    function maxFlashLoan(address token) public view virtual returns (uint256) {\n        return token == address(this) ? type(uint256).max - totalSupply() : 0;\n    }\n\n    /**\n     * @dev Returns the fee applied when doing flash loans. This function calls\n     * the {_flashFee} function which returns the fee applied when doing flash\n     * loans.\n     * @param token The token to be flash loaned.\n     * @param value The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n    function flashFee(address token, uint256 value) public view virtual returns (uint256) {\n        if (token != address(this)) {\n            revert ERC3156UnsupportedToken(token);\n        }\n        return _flashFee(token, value);\n    }\n\n    /**\n     * @dev Returns the fee applied when doing flash loans. By default this\n     * implementation has 0 fees. This function can be overloaded to make\n     * the flash loan mechanism deflationary.\n     * @param token The token to be flash loaned.\n     * @param value The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n    function _flashFee(address token, uint256 value) internal view virtual returns (uint256) {\n        // silence warning about unused variable without the addition of bytecode.\n        token;\n        value;\n        return 0;\n    }\n\n    /**\n     * @dev Returns the receiver address of the flash fee. By default this\n     * implementation returns the address(0) which means the fee amount will be burnt.\n     * This function can be overloaded to change the fee receiver.\n     * @return The address for which the flash fee will be sent to.\n     */\n    function _flashFeeReceiver() internal view virtual returns (address) {\n        return address(0);\n    }\n\n    /**\n     * @dev Performs a flash loan. New tokens are minted and sent to the\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\n     * interface. By the end of the flash loan, the receiver is expected to own\n     * value + fee tokens and have them approved back to the token contract itself so\n     * they can be burned.\n     * @param receiver The receiver of the flash loan. Should implement the\n     * {IERC3156FlashBorrower-onFlashLoan} interface.\n     * @param token The token to be flash loaned. Only `address(this)` is\n     * supported.\n     * @param value The amount of tokens to be loaned.\n     * @param data An arbitrary datafield that is passed to the receiver.\n     * @return `true` if the flash loan was successful.\n     */\n    // This function can reenter, but it doesn't pose a risk because it always preserves the property that the amount\n    // minted at the beginning is always recovered and burned at the end, or else the entire function will revert.\n    // slither-disable-next-line reentrancy-no-eth\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 value,\n        bytes calldata data\n    ) public virtual returns (bool) {\n        uint256 maxLoan = maxFlashLoan(token);\n        if (value > maxLoan) {\n            revert ERC3156ExceededMaxLoan(maxLoan);\n        }\n        uint256 fee = flashFee(token, value);\n        _mint(address(receiver), value);\n        if (receiver.onFlashLoan(_msgSender(), token, value, fee, data) != RETURN_VALUE) {\n            revert ERC3156InvalidReceiver(address(receiver));\n        }\n        address flashFeeReceiver = _flashFeeReceiver();\n        _spendAllowance(address(receiver), address(this), value + fee);\n        if (fee == 0 || flashFeeReceiver == address(0)) {\n            _burn(address(receiver), value + fee);\n        } else {\n            _burn(address(receiver), value);\n            _transfer(address(receiver), flashFeeReceiver, fee);\n        }\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20, IERC20Metadata, ERC20} from \"../ERC20.sol\";\nimport {SafeERC20} from \"../utils/SafeERC20.sol\";\nimport {IERC4626} from \"../../../interfaces/IERC4626.sol\";\nimport {Math} from \"../../../utils/math/Math.sol\";\n\n/**\n * @dev Implementation of the ERC-4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC-20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC-20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * [CAUTION]\n * ====\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n * with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * Since v4.9, this implementation introduces configurable virtual assets and shares to help developers mitigate that risk.\n * The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals\n * and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which\n * itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default\n * offset (0) makes it non-profitable even if an attacker is able to capture value from multiple user deposits, as a result\n * of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains.\n * With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the\n * underlying math can be found xref:ROOT:erc4626.adoc#inflation-attack[here].\n *\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n * `_convertToShares` and `_convertToAssets` functions.\n *\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n * ====\n */\nabstract contract ERC4626 is ERC20, IERC4626 {\n    using Math for uint256;\n\n    IERC20 private immutable _asset;\n    uint8 private immutable _underlyingDecimals;\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC-20 or ERC-777).\n     */\n    constructor(IERC20 asset_) {\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\n        _underlyingDecimals = success ? assetDecimals : 18;\n        _asset = asset_;\n    }\n\n    /**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool ok, uint8 assetDecimals) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeCall(IERC20Metadata.decimals, ())\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\n        return _underlyingDecimals + _decimalsOffset();\n    }\n\n    /// @inheritdoc IERC4626\n    function asset() public view virtual returns (address) {\n        return address(_asset);\n    }\n\n    /// @inheritdoc IERC4626\n    function totalAssets() public view virtual returns (uint256) {\n        return IERC20(asset()).balanceOf(address(this));\n    }\n\n    /// @inheritdoc IERC4626\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /// @inheritdoc IERC4626\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /// @inheritdoc IERC4626\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /// @inheritdoc IERC4626\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /// @inheritdoc IERC4626\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /// @inheritdoc IERC4626\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /// @inheritdoc IERC4626\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /// @inheritdoc IERC4626\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /// @inheritdoc IERC4626\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /// @inheritdoc IERC4626\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /// @inheritdoc IERC4626\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /// @inheritdoc IERC4626\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /// @inheritdoc IERC4626\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /// @inheritdoc IERC4626\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If asset() is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(IERC20(asset()), caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If asset() is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(IERC20(asset()), receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _decimalsOffset() internal view virtual returns (uint8) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {ERC721Utils} from \"./utils/ERC721Utils.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @inheritdoc IERC721\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /// @inheritdoc IERC721\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /// @inheritdoc IERC721\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /// @inheritdoc IERC721\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /// @inheritdoc IERC721\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /// @inheritdoc IERC721\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /// @inheritdoc IERC721\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /// @inheritdoc IERC721\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if:\n     * - `spender` does not have approval from `owner` for `tokenId`.\n     * - `spender` does not have approval to manage all of `owner`'s assets.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {IERC721Enumerable} from \"./IERC721Enumerable.sol\";\nimport {IERC165} from \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the ERC that adds enumerability\n * of all the token ids in the contract as well as all token ids owned by each account.\n *\n * CAUTION: {ERC721} extensions that implement custom `balanceOf` logic, such as {ERC721Consecutive},\n * interfere with enumerability and should not be used together with {ERC721Enumerable}.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\n\n    uint256[] private _allTokens;\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\n\n    /**\n     * @dev An `owner`'s token query was out of bounds for `index`.\n     *\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\n     */\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\n\n    /**\n     * @dev Batch mint is not allowed.\n     */\n    error ERC721EnumerableForbiddenBatchMint();\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /// @inheritdoc IERC721Enumerable\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\n        if (index >= balanceOf(owner)) {\n            revert ERC721OutOfBoundsIndex(owner, index);\n        }\n        return _ownedTokens[owner][index];\n    }\n\n    /// @inheritdoc IERC721Enumerable\n    function totalSupply() public view virtual returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /// @inheritdoc IERC721Enumerable\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\n        if (index >= totalSupply()) {\n            revert ERC721OutOfBoundsIndex(address(0), index);\n        }\n        return _allTokens[index];\n    }\n\n    /// @inheritdoc ERC721\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        if (previousOwner == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n\n        return previousOwner;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = balanceOf(to) - 1;\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = balanceOf(from);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        mapping(uint256 index => uint256) storage _ownedTokensByOwner = _ownedTokens[from];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];\n\n            _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokensByOwner[lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\n     */\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\n        if (amount > 0) {\n            revert ERC721EnumerableForbiddenBatchMint();\n        }\n        super._increaseBalance(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity >=0.5.0;\n\n/**\n * @title ERC-721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC-721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/utils/ERC721Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721Receiver} from \"../IERC721Receiver.sol\";\nimport {IERC721Errors} from \"../../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Library that provide common ERC-721 utility functions.\n *\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\n *\n * _Available since v5.1._\n */\nlibrary ERC721Utils {\n    /**\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721Receiver-onERC721Received}\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\n     *\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\n     * the transfer.\n     */\n    function checkOnERC721Received(\n        address operator,\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    // Token rejected\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-IERC721Receiver implementer\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\n                } else {\n                    assembly (\"memory-safe\") {\n                        revert(add(reason, 0x20), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                revert(add(returndata, 0x20), mload(returndata))\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Arrays.sol)\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\n\npragma solidity ^0.8.20;\n\nimport {Comparators} from \"./Comparators.sol\";\nimport {SlotDerivation} from \"./SlotDerivation.sol\";\nimport {StorageSlot} from \"./StorageSlot.sol\";\nimport {Math} from \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using SlotDerivation for bytes32;\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\n     *\n     * This function does the sorting \"in place\", meaning that it overrides the input. The object is returned for\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\n     *\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\n     * consume more gas than is available in a block, leading to potential DoS.\n     *\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\n     */\n    function sort(\n        uint256[] memory array,\n        function(uint256, uint256) pure returns (bool) comp\n    ) internal pure returns (uint256[] memory) {\n        _quickSort(_begin(array), _end(array), comp);\n        return array;\n    }\n\n    /**\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\n     */\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\n        sort(array, Comparators.lt);\n        return array;\n    }\n\n    /**\n     * @dev Sort an array of address (in memory) following the provided comparator function.\n     *\n     * This function does the sorting \"in place\", meaning that it overrides the input. The object is returned for\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\n     *\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\n     * consume more gas than is available in a block, leading to potential DoS.\n     *\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\n     */\n    function sort(\n        address[] memory array,\n        function(address, address) pure returns (bool) comp\n    ) internal pure returns (address[] memory) {\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\n        return array;\n    }\n\n    /**\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\n     */\n    function sort(address[] memory array) internal pure returns (address[] memory) {\n        sort(_castToUint256Array(array), Comparators.lt);\n        return array;\n    }\n\n    /**\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\n     *\n     * This function does the sorting \"in place\", meaning that it overrides the input. The object is returned for\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\n     *\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\n     * consume more gas than is available in a block, leading to potential DoS.\n     *\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\n     */\n    function sort(\n        bytes32[] memory array,\n        function(bytes32, bytes32) pure returns (bool) comp\n    ) internal pure returns (bytes32[] memory) {\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\n        return array;\n    }\n\n    /**\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\n     */\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\n        sort(_castToUint256Array(array), Comparators.lt);\n        return array;\n    }\n\n    /**\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\n     * at end (exclusive). Sorting follows the `comp` comparator.\n     *\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\n     *\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\n     * be used only if the limits are within a memory array.\n     */\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\n        unchecked {\n            if (end - begin < 0x40) return;\n\n            // Use first element as pivot\n            uint256 pivot = _mload(begin);\n            // Position where the pivot should be at the end of the loop\n            uint256 pos = begin;\n\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\n                if (comp(_mload(it), pivot)) {\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\n                    // position of the pivot and move the value there.\n                    pos += 0x20;\n                    _swap(pos, it);\n                }\n            }\n\n            _swap(begin, pos); // Swap pivot into place\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\n        }\n    }\n\n    /**\n     * @dev Pointer to the memory location of the first element of `array`.\n     */\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\n        assembly (\"memory-safe\") {\n            ptr := add(array, 0x20)\n        }\n    }\n\n    /**\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\n     * that comes just after the last element of the array.\n     */\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\n        unchecked {\n            return _begin(array) + array.length * 0x20;\n        }\n    }\n\n    /**\n     * @dev Load memory word (as a uint256) at location `ptr`.\n     */\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\n        assembly {\n            value := mload(ptr)\n        }\n    }\n\n    /**\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\n     */\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\n        assembly {\n            let value1 := mload(ptr1)\n            let value2 := mload(ptr2)\n            mstore(ptr1, value2)\n            mstore(ptr2, value1)\n        }\n    }\n\n    /// @dev Helper: low level cast address memory array to uint256 memory array\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /// @dev Helper: low level cast address comp function to uint256 comp function\n    function _castToUint256Comp(\n        function(address, address) pure returns (bool) input\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\n    function _castToUint256Comp(\n        function(bytes32, bytes32) pure returns (bool) input\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\n     * contain no repeated elements.\n     *\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\n     * support for repeated elements in the array. The {lowerBound} function should\n     * be used instead.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Searches an `array` sorted in ascending order and returns the first\n     * index that contains a value greater or equal than `element`. If no such index\n     * exists (i.e. all values in the array are strictly less than `element`), the array\n     * length is returned. Time complexity O(log n).\n     *\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\n     */\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value < element) {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            } else {\n                high = mid;\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Searches an `array` sorted in ascending order and returns the first\n     * index that contains a value strictly greater than `element`. If no such index\n     * exists (i.e. all values in the array are strictly less than `element`), the array\n     * length is returned. Time complexity O(log n).\n     *\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\n     */\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Same as {lowerBound}, but with an array in memory.\n     */\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeMemoryAccess(array, mid) < element) {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            } else {\n                high = mid;\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Same as {upperBound}, but with an array in memory.\n     */\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeMemoryAccess(array, mid) > element) {\n                high = mid;\n            } else {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getUint256Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes[] storage arr, uint256 pos) internal pure returns (StorageSlot.BytesSlot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getBytesSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(string[] storage arr, uint256 pos) internal pure returns (StorageSlot.StringSlot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getStringSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(bytes[] memory arr, uint256 pos) internal pure returns (bytes memory res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(string[] memory arr, uint256 pos) internal pure returns (string memory res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(bytes[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(string[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Base64.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     * See sections 4 and 5 of https://datatracker.ietf.org/doc/html/rfc4648\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    string internal constant _TABLE_URL = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        return _encode(data, _TABLE, true);\n    }\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64Url `string` representation.\n     * Output is not padded with `=` as specified in https://www.rfc-editor.org/rfc/rfc4648[rfc4648].\n     */\n    function encodeURL(bytes memory data) internal pure returns (string memory) {\n        return _encode(data, _TABLE_URL, false);\n    }\n\n    /**\n     * @dev Internal table-agnostic conversion\n     */\n    function _encode(bytes memory data, string memory table, bool withPadding) private pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // If padding is enabled, the final length should be `bytes` data length divided by 3 rounded up and then\n        // multiplied by 4 so that it leaves room for padding the last chunk\n        // - `data.length + 2`  -> Prepare for division rounding up\n        // - `/ 3`              -> Number of 3-bytes chunks (rounded up)\n        // - `4 *`              -> 4 characters for each chunk\n        // This is equivalent to: 4 * Math.ceil(data.length / 3)\n        //\n        // If padding is disabled, the final length should be `bytes` data length multiplied by 4/3 rounded up as\n        // opposed to when padding is required to fill the last chunk.\n        // - `4 * data.length`  -> 4 characters for each chunk\n        // - ` + 2`             -> Prepare for division rounding up\n        // - `/ 3`              -> Number of 3-bytes chunks (rounded up)\n        // This is equivalent to: Math.ceil((4 * data.length) / 3)\n        uint256 resultLength = withPadding ? 4 * ((data.length + 2) / 3) : (4 * data.length + 2) / 3;\n\n        string memory result = new string(resultLength);\n\n        assembly (\"memory-safe\") {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 0x20)\n            let dataPtr := data\n            let endPtr := add(data, mload(data))\n\n            // In some cases, the last iteration will read bytes after the end of the data. We cache the value, and\n            // set it to zero to make sure no dirty bytes are read in that section.\n            let afterPtr := add(endPtr, 0x20)\n            let afterCache := mload(afterPtr)\n            mstore(afterPtr, 0x00)\n\n            // Run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {} {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 byte (24 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F to bitmask the least significant 6 bits.\n                // Use this as an index into the lookup table, mload an entire word\n                // so the desired character is in the least significant byte, and\n                // mstore8 this least significant byte into the result and continue.\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // Reset the value that was cached\n            mstore(afterPtr, afterCache)\n\n            if withPadding {\n                // When data `bytes` is not exactly 3 bytes long\n                // it is padded with `=` characters at the end\n                switch mod(mload(data), 3)\n                case 1 {\n                    mstore8(sub(resultPtr, 1), 0x3d)\n                    mstore8(sub(resultPtr, 2), 0x3d)\n                }\n                case 2 {\n                    mstore8(sub(resultPtr, 1), 0x3d)\n                }\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Comparators.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides a set of functions to compare values.\n *\n * _Available since v5.1._\n */\nlibrary Comparators {\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\n        return a < b;\n    }\n\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\n        return a > b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32.\n     */\n    function toDataWithIntendedValidatorHash(\n        address validator,\n        bytes32 messageHash\n    ) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, hex\"19_00\")\n            mstore(0x02, shl(96, validator))\n            mstore(0x16, messageHash)\n            digest := keccak256(0x00, 0x36)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Return the 512-bit addition of two uint256.\n     *\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\n     */\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        assembly (\"memory-safe\") {\n            low := add(a, b)\n            high := lt(low, a)\n        }\n    }\n\n    /**\n     * @dev Return the 512-bit multiplication of two uint256.\n     *\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\n     */\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = high * 2²⁵⁶ + low.\n        assembly (\"memory-safe\") {\n            let mm := mulmod(a, b, not(0))\n            low := mul(a, b)\n            high := sub(sub(mm, low), lt(mm, low))\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            success = c >= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a - b;\n            success = c <= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a * b;\n            assembly (\"memory-safe\") {\n                // Only true when the multiplication doesn't overflow\n                // (c / a == b) || (a == 0)\n                success := or(eq(div(c, a), b), iszero(a))\n            }\n            // equivalent to: success ? c : 0\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `DIV` opcode returns zero when the denominator is 0.\n                result := div(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `MOD` opcode returns zero when the denominator is 0.\n                result := mod(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryAdd(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\n     */\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (, uint256 result) = trySub(a, b);\n        return result;\n    }\n\n    /**\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryMul(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (high == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return low / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= high) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [high low].\n            uint256 remainder;\n            assembly (\"memory-safe\") {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                high := sub(high, gt(remainder, low))\n                low := sub(low, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly (\"memory-safe\") {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [high low] by twos.\n                low := div(low, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from high into low.\n            low |= high * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\n            // is no longer required.\n            result = low * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n            if (high >= 1 << n) {\n                Panic.panic(Panic.UNDER_OVERFLOW);\n            }\n            return (high << (256 - n)) | (low >> n);\n        }\n    }\n\n    /**\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // If upper 8 bits of 16-bit half set, add 8 to result\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\n        // If upper 4 bits of 8-bit half set, add 4 to result\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\n\n        // Shifts value right by the current result and use it as an index into this lookup table:\n        //\n        // | x (4 bits) |  index  | table[index] = MSB position |\n        // |------------|---------|-----------------------------|\n        // |    0000    |    0    |        table[0] = 0         |\n        // |    0001    |    1    |        table[1] = 0         |\n        // |    0010    |    2    |        table[2] = 1         |\n        // |    0011    |    3    |        table[3] = 1         |\n        // |    0100    |    4    |        table[4] = 2         |\n        // |    0101    |    5    |        table[5] = 2         |\n        // |    0110    |    6    |        table[6] = 2         |\n        // |    0111    |    7    |        table[7] = 2         |\n        // |    1000    |    8    |        table[8] = 3         |\n        // |    1001    |    9    |        table[9] = 3         |\n        // |    1010    |   10    |        table[10] = 3        |\n        // |    1011    |   11    |        table[11] = 3        |\n        // |    1100    |   12    |        table[12] = 3        |\n        // |    1101    |   13    |        table[13] = 3        |\n        // |    1110    |   14    |        table[14] = 3        |\n        // |    1111    |   15    |        table[15] = 3        |\n        //\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\n        assembly (\"memory-safe\") {\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Panic.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/SlotDerivation.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/SlotDerivation.sol)\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\n * the solidity language / compiler.\n *\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\n *\n * Example usage:\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using StorageSlot for bytes32;\n *     using SlotDerivation for bytes32;\n *\n *     // Declare a namespace\n *     string private constant _NAMESPACE = \"<namespace>\"; // eg. OpenZeppelin.Slot\n *\n *     function setValueInNamespace(uint256 key, address newValue) internal {\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\n *     }\n *\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {StorageSlot}.\n *\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\n * upgrade safety will ignore the slots accessed through this library.\n *\n * _Available since v5.1._\n */\nlibrary SlotDerivation {\n    /**\n     * @dev Derive an ERC-7201 slot from a string (namespace).\n     */\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\n            slot := and(keccak256(0x00, 0x20), not(0xff))\n        }\n    }\n\n    /**\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\n     */\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\n        unchecked {\n            return bytes32(uint256(slot) + pos);\n        }\n    }\n\n    /**\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\n     */\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, slot)\n            result := keccak256(0x00, 0x20)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, and(key, shr(96, not(0))))\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, iszero(iszero(key)))\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, key)\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, key)\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, key)\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            let length := mload(key)\n            let begin := add(key, 0x20)\n            let end := add(begin, length)\n            let cache := mload(end)\n            mstore(end, slot)\n            result := keccak256(begin, add(length, 0x20))\n            mstore(end, cache)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            let length := mload(key)\n            let begin := add(key, 0x20)\n            let end := add(begin, length)\n            let cache := mload(end)\n            mstore(end, slot)\n            result := keccak256(begin, add(length, 0x20))\n            mstore(end, cache)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SafeCast} from \"./math/SafeCast.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    using SafeCast for *;\n\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\n        (1 << 0x08) | // backspace\n            (1 << 0x09) | // tab\n            (1 << 0x0a) | // newline\n            (1 << 0x0c) | // form feed\n            (1 << 0x0d) | // carriage return\n            (1 << 0x22) | // double quote\n            (1 << 0x5c); // backslash\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev The string being parsed contains characters that are not in scope of the given base.\n     */\n    error StringsInvalidChar();\n\n    /**\n     * @dev The string being parsed is not a properly formatted address.\n     */\n    error StringsInvalidAddressFormat();\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            assembly (\"memory-safe\") {\n                ptr := add(add(buffer, 0x20), length)\n            }\n            while (true) {\n                ptr--;\n                assembly (\"memory-safe\") {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n     * representation, according to EIP-55.\n     */\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\n        bytes memory buffer = bytes(toHexString(addr));\n\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\n        uint256 hashValue;\n        assembly (\"memory-safe\") {\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\n        }\n\n        for (uint256 i = 41; i > 1; --i) {\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\n                // case shift by xoring with 0x20\n                buffer[i] ^= 0x20;\n            }\n            hashValue >>= 4;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input) internal pure returns (uint256) {\n        return parseUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        uint256 result = 0;\n        for (uint256 i = begin; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 9) return (false, 0);\n            result *= 10;\n            result += chr;\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `int256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input) internal pure returns (int256) {\n        return parseInt(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\n        (bool success, int256 value) = tryParseInt(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n     * the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\n\n    /**\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character or if the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, int256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseIntUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseIntUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, int256 value) {\n        bytes memory buffer = bytes(input);\n\n        // Check presence of a negative sign.\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        bool positiveSign = sign == bytes1(\"+\");\n        bool negativeSign = sign == bytes1(\"-\");\n        uint256 offset = (positiveSign || negativeSign).toUint();\n\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\n\n        if (absSuccess && absValue < ABS_MIN_INT256) {\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\n            return (true, type(int256).min);\n        } else return (false, 0);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input) internal pure returns (uint256) {\n        return parseHexUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n     * invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseHexUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        // skip 0x prefix if present\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 offset = hasPrefix.toUint() * 2;\n\n        uint256 result = 0;\n        for (uint256 i = begin + offset; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 15) return (false, 0);\n            result *= 16;\n            unchecked {\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\n                result += chr;\n            }\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input) internal pure returns (address) {\n        return parseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\n        (bool success, address value) = tryParseAddress(input, begin, end);\n        if (!success) revert StringsInvalidAddressFormat();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n     * formatted address. See {parseAddress-string} requirements.\n     */\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\n        return tryParseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\n     */\n    function tryParseAddress(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, address value) {\n        if (end > bytes(input).length || begin > end) return (false, address(0));\n\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\n\n        // check that input is the correct length\n        if (end - begin == expectedLength) {\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\n            return (s, address(uint160(v)));\n        } else {\n            return (false, address(0));\n        }\n    }\n\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\n        uint8 value = uint8(chr);\n\n        // Try to parse `chr`:\n        // - Case 1: [0-9]\n        // - Case 2: [a-f]\n        // - Case 3: [A-F]\n        // - otherwise not supported\n        unchecked {\n            if (value > 47 && value < 58) value -= 48;\n            else if (value > 96 && value < 103) value -= 87;\n            else if (value > 64 && value < 71) value -= 55;\n            else return type(uint8).max;\n        }\n\n        return value;\n    }\n\n    /**\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\n     *\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\n     *\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\n     * characters that are not in this range, but other tooling may provide different results.\n     */\n    function escapeJSON(string memory input) internal pure returns (string memory) {\n        bytes memory buffer = bytes(input);\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\n        uint256 outputLength = 0;\n\n        for (uint256 i; i < buffer.length; ++i) {\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\n                output[outputLength++] = \"\\\\\";\n                if (char == 0x08) output[outputLength++] = \"b\";\n                else if (char == 0x09) output[outputLength++] = \"t\";\n                else if (char == 0x0a) output[outputLength++] = \"n\";\n                else if (char == 0x0c) output[outputLength++] = \"f\";\n                else if (char == 0x0d) output[outputLength++] = \"r\";\n                else if (char == 0x5c) output[outputLength++] = \"\\\\\";\n                else if (char == 0x22) {\n                    // solhint-disable-next-line quotes\n                    output[outputLength++] = '\"';\n                }\n            } else {\n                output[outputLength++] = char;\n            }\n        }\n        // write the actual length and deallocate unused memory\n        assembly (\"memory-safe\") {\n            mstore(output, outputLength)\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\n        }\n\n        return string(output);\n    }\n\n    /**\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\n     *\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n     * assembly block as such would prevent some optimizations.\n     */\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\n        assembly (\"memory-safe\") {\n            value := mload(add(add(buffer, 0x20), offset))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/structs/EnumerableMap.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\n\npragma solidity ^0.8.20;\n\nimport {EnumerableSet} from \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n * - Map can be cleared (all entries removed) in O(n).\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n * - `uint256 -> bytes32` (`UintToBytes32Map`) since v5.1.0\n * - `address -> address` (`AddressToAddressMap`) since v5.1.0\n * - `address -> bytes32` (`AddressToBytes32Map`) since v5.1.0\n * - `bytes32 -> address` (`Bytes32ToAddressMap`) since v5.1.0\n * - `bytes -> bytes` (`BytesToBytesMap`) since v5.4.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableMap.\n * ====\n */\nlibrary EnumerableMap {\n    using EnumerableSet for *;\n\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\n\n    /**\n     * @dev Query for a nonexistent map key.\n     */\n    error EnumerableMapNonexistentKey(bytes32 key);\n\n    struct Bytes32ToBytes32Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 key => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the map grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(Bytes32ToBytes32Map storage map) internal {\n        uint256 len = length(map);\n        for (uint256 i = 0; i < len; ++i) {\n            delete map._values[map._keys.at(i)];\n        }\n        map._keys.clear();\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32 key, bytes32 value) {\n        bytes32 atKey = map._keys.at(index);\n        return (atKey, map._values[atKey]);\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool exists, bytes32 value) {\n        bytes32 val = map._values[key];\n        if (val == bytes32(0)) {\n            return (contains(map, key), bytes32(0));\n        } else {\n            return (true, val);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        if (value == 0 && !contains(map, key)) {\n            revert EnumerableMapNonexistentKey(key);\n        }\n        return value;\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\n        return map._keys.values();\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(\n        Bytes32ToBytes32Map storage map,\n        uint256 start,\n        uint256 end\n    ) internal view returns (bytes32[] memory) {\n        return map._keys.values(start, end);\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(UintToUintMap storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256 key, uint256 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (uint256(atKey), uint256(val));\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool exists, uint256 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\n        return (success, uint256(val));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key)));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToUintMap storage map, uint256 start, uint256 end) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(UintToAddressMap storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256 key, address value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (uint256(atKey), address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool exists, address value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToAddressMap storage map, uint256 start, uint256 end) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintToBytes32Map\n\n    struct UintToBytes32Map {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToBytes32Map storage map, uint256 key, bytes32 value) internal returns (bool) {\n        return set(map._inner, bytes32(key), value);\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToBytes32Map storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(UintToBytes32Map storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToBytes32Map storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToBytes32Map storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToBytes32Map storage map, uint256 index) internal view returns (uint256 key, bytes32 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (uint256(atKey), val);\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToBytes32Map storage map, uint256 key) internal view returns (bool exists, bytes32 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\n        return (success, val);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToBytes32Map storage map, uint256 key) internal view returns (bytes32) {\n        return get(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToBytes32Map storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToBytes32Map storage map, uint256 start, uint256 end) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(AddressToUintMap storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address key, uint256 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (address(uint160(uint256(atKey))), uint256(val));\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool exists, uint256 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(val));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToUintMap storage map, uint256 start, uint256 end) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressToAddressMap\n\n    struct AddressToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToAddressMap storage map, address key, address value) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToAddressMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(AddressToAddressMap storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToAddressMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToAddressMap storage map, uint256 index) internal view returns (address key, address value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (address(uint160(uint256(atKey))), address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToAddressMap storage map, address key) internal view returns (bool exists, address value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToAddressMap storage map, address key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(uint256(uint160(key)))))));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToAddressMap storage map) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(\n        AddressToAddressMap storage map,\n        uint256 start,\n        uint256 end\n    ) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressToBytes32Map\n\n    struct AddressToBytes32Map {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToBytes32Map storage map, address key, bytes32 value) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), value);\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToBytes32Map storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(AddressToBytes32Map storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToBytes32Map storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToBytes32Map storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToBytes32Map storage map, uint256 index) internal view returns (address key, bytes32 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (address(uint160(uint256(atKey))), val);\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToBytes32Map storage map, address key) internal view returns (bool exists, bytes32 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, val);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToBytes32Map storage map, address key) internal view returns (bytes32) {\n        return get(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToBytes32Map storage map) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(\n        AddressToBytes32Map storage map,\n        uint256 start,\n        uint256 end\n    ) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // Bytes32ToUintMap\n\n    struct Bytes32ToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\n        return set(map._inner, key, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(Bytes32ToUintMap storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32 key, uint256 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (atKey, uint256(val));\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool exists, uint256 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, key);\n        return (success, uint256(val));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\n        return uint256(get(map._inner, key));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToUintMap storage map, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // Bytes32ToAddressMap\n\n    struct Bytes32ToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToAddressMap storage map, bytes32 key, address value) internal returns (bool) {\n        return set(map._inner, key, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(Bytes32ToAddressMap storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32 key, address value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (atKey, address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool exists, address value) {\n        (bool success, bytes32 val) = tryGet(map._inner, key);\n        return (success, address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, key))));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToAddressMap storage map) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(\n        Bytes32ToAddressMap storage map,\n        uint256 start,\n        uint256 end\n    ) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Query for a nonexistent map key.\n     */\n    error EnumerableMapNonexistentBytesKey(bytes key);\n\n    struct BytesToBytesMap {\n        // Storage of keys\n        EnumerableSet.BytesSet _keys;\n        mapping(bytes key => bytes) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(BytesToBytesMap storage map, bytes memory key, bytes memory value) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(BytesToBytesMap storage map, bytes memory key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the map grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(BytesToBytesMap storage map) internal {\n        uint256 len = length(map);\n        for (uint256 i = 0; i < len; ++i) {\n            delete map._values[map._keys.at(i)];\n        }\n        map._keys.clear();\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(BytesToBytesMap storage map, bytes memory key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(BytesToBytesMap storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        BytesToBytesMap storage map,\n        uint256 index\n    ) internal view returns (bytes memory key, bytes memory value) {\n        key = map._keys.at(index);\n        value = map._values[key];\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(\n        BytesToBytesMap storage map,\n        bytes memory key\n    ) internal view returns (bool exists, bytes memory value) {\n        value = map._values[key];\n        exists = bytes(value).length != 0 || contains(map, key);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(BytesToBytesMap storage map, bytes memory key) internal view returns (bytes memory value) {\n        bool exists;\n        (exists, value) = tryGet(map, key);\n        if (!exists) {\n            revert EnumerableMapNonexistentBytesKey(key);\n        }\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(BytesToBytesMap storage map) internal view returns (bytes[] memory) {\n        return map._keys.values();\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(BytesToBytesMap storage map, uint256 start, uint256 end) internal view returns (bytes[] memory) {\n        return map._keys.values(start, end);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\nimport {Arrays} from \"../Arrays.sol\";\nimport {Math} from \"../math/Math.sol\";\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n * - Set can be cleared (all elements removed) in O(n).\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * The following types are supported:\n *\n * - `bytes32` (`Bytes32Set`) since v3.3.0\n * - `address` (`AddressSet`) since v3.3.0\n * - `uint256` (`UintSet`) since v3.3.0\n * - `string` (`StringSet`) since v5.4.0\n * - `bytes` (`BytesSet`) since v5.4.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with set size. Developers should keep in mind that\n     * using it may render the function uncallable if the set grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function _clear(Set storage set) private {\n        uint256 len = _length(set);\n        for (uint256 i = 0; i < len; ++i) {\n            delete set._positions[set._values[i]];\n        }\n        Arrays.unsafeSetLength(set._values, 0);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set, uint256 start, uint256 end) private view returns (bytes32[] memory) {\n        unchecked {\n            end = Math.min(end, _length(set));\n            start = Math.min(start, end);\n\n            uint256 len = end - start;\n            bytes32[] memory result = new bytes32[](len);\n            for (uint256 i = 0; i < len; ++i) {\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\n            }\n            return result;\n        }\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(Bytes32Set storage set) internal {\n        _clear(set._inner);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner, start, end);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(AddressSet storage set) internal {\n        _clear(set._inner);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner, start, end);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(UintSet storage set) internal {\n        _clear(set._inner);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner, start, end);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    struct StringSet {\n        // Storage of set values\n        string[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(string value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(StringSet storage set, string memory value) internal returns (bool) {\n        if (!contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(StringSet storage set, string memory value) internal returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                string memory lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(StringSet storage set) internal {\n        uint256 len = length(set);\n        for (uint256 i = 0; i < len; ++i) {\n            delete set._positions[set._values[i]];\n        }\n        Arrays.unsafeSetLength(set._values, 0);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(StringSet storage set, string memory value) internal view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(StringSet storage set) internal view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(StringSet storage set, uint256 index) internal view returns (string memory) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(StringSet storage set) internal view returns (string[] memory) {\n        return set._values;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(StringSet storage set, uint256 start, uint256 end) internal view returns (string[] memory) {\n        unchecked {\n            end = Math.min(end, length(set));\n            start = Math.min(start, end);\n\n            uint256 len = end - start;\n            string[] memory result = new string[](len);\n            for (uint256 i = 0; i < len; ++i) {\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\n            }\n            return result;\n        }\n    }\n\n    struct BytesSet {\n        // Storage of set values\n        bytes[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(BytesSet storage set, bytes memory value) internal returns (bool) {\n        if (!contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(BytesSet storage set, bytes memory value) internal returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes memory lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(BytesSet storage set) internal {\n        uint256 len = length(set);\n        for (uint256 i = 0; i < len; ++i) {\n            delete set._positions[set._values[i]];\n        }\n        Arrays.unsafeSetLength(set._values, 0);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(BytesSet storage set, bytes memory value) internal view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(BytesSet storage set) internal view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(BytesSet storage set, uint256 index) internal view returns (bytes memory) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(BytesSet storage set) internal view returns (bytes[] memory) {\n        return set._values;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(BytesSet storage set, uint256 start, uint256 end) internal view returns (bytes[] memory) {\n        unchecked {\n            end = Math.min(end, length(set));\n            start = Math.min(start, end);\n\n            uint256 len = end - start;\n            bytes[] memory result = new bytes[](len);\n            for (uint256 i = 0; i < len; ++i) {\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\n            }\n            return result;\n        }\n    }\n}\n"
    },
    "@pendle/core-v2/contracts/core/libraries/Errors.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nlibrary Errors {\n    // BulkSeller\n    error BulkInsufficientSyForTrade(uint256 currentAmount, uint256 requiredAmount);\n    error BulkInsufficientTokenForTrade(uint256 currentAmount, uint256 requiredAmount);\n    error BulkInSufficientSyOut(uint256 actualSyOut, uint256 requiredSyOut);\n    error BulkInSufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\n    error BulkInsufficientSyReceived(uint256 actualBalance, uint256 requiredBalance);\n    error BulkNotMaintainer();\n    error BulkNotAdmin();\n    error BulkSellerAlreadyExisted(address token, address SY, address bulk);\n    error BulkSellerInvalidToken(address token, address SY);\n    error BulkBadRateTokenToSy(uint256 actualRate, uint256 currentRate, uint256 eps);\n    error BulkBadRateSyToToken(uint256 actualRate, uint256 currentRate, uint256 eps);\n\n    // APPROX\n    error ApproxFail();\n    error ApproxParamsInvalid(uint256 guessMin, uint256 guessMax, uint256 eps);\n    error ApproxBinarySearchInputInvalid(\n        uint256 approxGuessMin,\n        uint256 approxGuessMax,\n        uint256 minGuessMin,\n        uint256 maxGuessMax\n    );\n\n    // MARKET + MARKET MATH CORE\n    error MarketExpired();\n    error MarketZeroAmountsInput();\n    error MarketZeroAmountsOutput();\n    error MarketZeroLnImpliedRate();\n    error MarketInsufficientPtForTrade(int256 currentAmount, int256 requiredAmount);\n    error MarketInsufficientPtReceived(uint256 actualBalance, uint256 requiredBalance);\n    error MarketInsufficientSyReceived(uint256 actualBalance, uint256 requiredBalance);\n    error MarketZeroTotalPtOrTotalAsset(int256 totalPt, int256 totalAsset);\n    error MarketExchangeRateBelowOne(int256 exchangeRate);\n    error MarketProportionMustNotEqualOne();\n    error MarketRateScalarBelowZero(int256 rateScalar);\n    error MarketScalarRootBelowZero(int256 scalarRoot);\n    error MarketProportionTooHigh(int256 proportion, int256 maxProportion);\n\n    error OracleUninitialized();\n    error OracleTargetTooOld(uint32 target, uint32 oldest);\n    error OracleZeroCardinality();\n\n    error MarketFactoryExpiredPt();\n    error MarketFactoryInvalidPt();\n    error MarketFactoryMarketExists();\n\n    error MarketFactoryLnFeeRateRootTooHigh(uint80 lnFeeRateRoot, uint256 maxLnFeeRateRoot);\n    error MarketFactoryOverriddenFeeTooHigh(uint80 overriddenFee, uint256 marketLnFeeRateRoot);\n    error MarketFactoryReserveFeePercentTooHigh(uint8 reserveFeePercent, uint8 maxReserveFeePercent);\n    error MarketFactoryZeroTreasury();\n    error MarketFactoryInitialAnchorTooLow(int256 initialAnchor, int256 minInitialAnchor);\n    error MFNotPendleMarket(address addr);\n\n    // ROUTER\n    error RouterInsufficientLpOut(uint256 actualLpOut, uint256 requiredLpOut);\n    error RouterInsufficientSyOut(uint256 actualSyOut, uint256 requiredSyOut);\n    error RouterInsufficientPtOut(uint256 actualPtOut, uint256 requiredPtOut);\n    error RouterInsufficientYtOut(uint256 actualYtOut, uint256 requiredYtOut);\n    error RouterInsufficientPYOut(uint256 actualPYOut, uint256 requiredPYOut);\n    error RouterInsufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\n    error RouterInsufficientSyRepay(uint256 actualSyRepay, uint256 requiredSyRepay);\n    error RouterInsufficientPtRepay(uint256 actualPtRepay, uint256 requiredPtRepay);\n    error RouterNotAllSyUsed(uint256 netSyDesired, uint256 netSyUsed);\n\n    error RouterTimeRangeZero();\n    error RouterCallbackNotPendleMarket(address caller);\n    error RouterInvalidAction(bytes4 selector);\n    error RouterInvalidFacet(address facet);\n\n    error RouterKyberSwapDataZero();\n\n    error SimulationResults(bool success, bytes res);\n\n    // YIELD CONTRACT\n    error YCExpired();\n    error YCNotExpired();\n    error YieldContractInsufficientSy(uint256 actualSy, uint256 requiredSy);\n    error YCNothingToRedeem();\n    error YCPostExpiryDataNotSet();\n    error YCNoFloatingSy();\n\n    // YieldFactory\n    error YCFactoryInvalidExpiry();\n    error YCFactoryYieldContractExisted();\n    error YCFactoryZeroExpiryDivisor();\n    error YCFactoryZeroTreasury();\n    error YCFactoryInterestFeeRateTooHigh(uint256 interestFeeRate, uint256 maxInterestFeeRate);\n    error YCFactoryRewardFeeRateTooHigh(uint256 newRewardFeeRate, uint256 maxRewardFeeRate);\n\n    // SY\n    error SYInvalidTokenIn(address token);\n    error SYInvalidTokenOut(address token);\n    error SYZeroDeposit();\n    error SYZeroRedeem();\n    error SYInsufficientSharesOut(uint256 actualSharesOut, uint256 requiredSharesOut);\n    error SYInsufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\n\n    // SY-specific\n    error SYQiTokenMintFailed(uint256 errCode);\n    error SYQiTokenRedeemFailed(uint256 errCode);\n    error SYQiTokenRedeemRewardsFailed(uint256 rewardAccruedType0, uint256 rewardAccruedType1);\n    error SYQiTokenBorrowRateTooHigh(uint256 borrowRate, uint256 borrowRateMax);\n\n    error SYCurveInvalidPid();\n    error SYCurve3crvPoolNotFound();\n\n    error SYApeDepositAmountTooSmall(uint256 amountDeposited);\n    error SYBalancerInvalidPid();\n    error SYInvalidRewardToken(address token);\n\n    error SYStargateRedeemCapExceeded(uint256 amountLpDesired, uint256 amountLpRedeemable);\n\n    error SYBalancerReentrancy();\n\n    error NotFromTrustedRemote(uint16 srcChainId, bytes path);\n\n    error ApxETHNotEnoughBuffer();\n\n    // Liquidity Mining\n    error VCInactivePool(address pool);\n    error VCPoolAlreadyActive(address pool);\n    error VCZeroVePendle(address user);\n    error VCExceededMaxWeight(uint256 totalWeight, uint256 maxWeight);\n    error VCEpochNotFinalized(uint256 wTime);\n    error VCPoolAlreadyAddAndRemoved(address pool);\n\n    error VEInvalidNewExpiry(uint256 newExpiry);\n    error VEExceededMaxLockTime();\n    error VEInsufficientLockTime();\n    error VENotAllowedReduceExpiry();\n    error VEZeroAmountLocked();\n    error VEPositionNotExpired();\n    error VEZeroPosition();\n    error VEZeroSlope(uint128 bias, uint128 slope);\n    error VEReceiveOldSupply(uint256 msgTime);\n\n    error GCNotPendleMarket(address caller);\n    error GCNotVotingController(address caller);\n\n    error InvalidWTime(uint256 wTime);\n    error ExpiryInThePast(uint256 expiry);\n    error ChainNotSupported(uint256 chainId);\n\n    error FDTotalAmountFundedNotMatch(uint256 actualTotalAmount, uint256 expectedTotalAmount);\n    error FDEpochLengthMismatch();\n    error FDInvalidPool(address pool);\n    error FDPoolAlreadyExists(address pool);\n    error FDInvalidNewFinishedEpoch(uint256 oldFinishedEpoch, uint256 newFinishedEpoch);\n    error FDInvalidStartEpoch(uint256 startEpoch);\n    error FDInvalidWTimeFund(uint256 lastFunded, uint256 wTime);\n    error FDFutureFunding(uint256 lastFunded, uint256 currentWTime);\n\n    error BDInvalidEpoch(uint256 epoch, uint256 startTime);\n\n    // Cross-Chain\n    error MsgNotFromSendEndpoint(uint16 srcChainId, bytes path);\n    error MsgNotFromReceiveEndpoint(address sender);\n    error InsufficientFeeToSendMsg(uint256 currentFee, uint256 requiredFee);\n    error ApproxDstExecutionGasNotSet();\n    error InvalidRetryData();\n\n    // GENERIC MSG\n    error ArrayLengthMismatch();\n    error ArrayEmpty();\n    error ArrayOutOfBounds();\n    error ZeroAddress();\n    error FailedToSendEther();\n    error InvalidMerkleProof();\n\n    error OnlyLayerZeroEndpoint();\n    error OnlyYT();\n    error OnlyYCFactory();\n    error OnlyWhitelisted();\n\n    // Swap Aggregator\n    error SAInsufficientTokenIn(address tokenIn, uint256 amountExpected, uint256 amountActual);\n    error UnsupportedSelector(uint256 aggregatorType, bytes4 selector);\n}\n"
    },
    "@pendle/core-v2/contracts/core/libraries/math/LogExpMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the “Software”), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n\n// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\npragma solidity ^0.8.0;\n\n/* solhint-disable */\n\n/**\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\n *\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\n * exponentiation and logarithm (where the base is Euler's number).\n *\n * @author Fernando Martinelli - @fernandomartinelli\n * @author Sergio Yuhjtman - @sergioyuhjtman\n * @author Daniel Fernandez - @dmf7z\n */\nlibrary LogExpMath {\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\n    // two numbers, and multiply by ONE when dividing them.\n\n    // All arguments and return values are 18 decimal fixed point numbers.\n    int256 constant ONE_18 = 1e18;\n\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\n    // case of ln36, 36 decimals.\n    int256 constant ONE_20 = 1e20;\n    int256 constant ONE_36 = 1e36;\n\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\n    //\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\n    // The smallest possible result is 10^(-18), which makes largest negative argument\n    // ln(10^(-18)) = -41.446531673892822312.\n    // We use 130.0 and -41.0 to have some safety margin.\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\n\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\n    // 256 bit integer.\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\n\n    uint256 constant MILD_EXPONENT_BOUND = 2 ** 254 / uint256(ONE_20);\n\n    // 18 decimal constants\n    int256 constant x0 = 128000000000000000000; // 2ˆ7\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // eˆ(x0) (no decimals)\n    int256 constant x1 = 64000000000000000000; // 2ˆ6\n    int256 constant a1 = 6235149080811616882910000000; // eˆ(x1) (no decimals)\n\n    // 20 decimal constants\n    int256 constant x2 = 3200000000000000000000; // 2ˆ5\n    int256 constant a2 = 7896296018268069516100000000000000; // eˆ(x2)\n    int256 constant x3 = 1600000000000000000000; // 2ˆ4\n    int256 constant a3 = 888611052050787263676000000; // eˆ(x3)\n    int256 constant x4 = 800000000000000000000; // 2ˆ3\n    int256 constant a4 = 298095798704172827474000; // eˆ(x4)\n    int256 constant x5 = 400000000000000000000; // 2ˆ2\n    int256 constant a5 = 5459815003314423907810; // eˆ(x5)\n    int256 constant x6 = 200000000000000000000; // 2ˆ1\n    int256 constant a6 = 738905609893065022723; // eˆ(x6)\n    int256 constant x7 = 100000000000000000000; // 2ˆ0\n    int256 constant a7 = 271828182845904523536; // eˆ(x7)\n    int256 constant x8 = 50000000000000000000; // 2ˆ-1\n    int256 constant a8 = 164872127070012814685; // eˆ(x8)\n    int256 constant x9 = 25000000000000000000; // 2ˆ-2\n    int256 constant a9 = 128402541668774148407; // eˆ(x9)\n    int256 constant x10 = 12500000000000000000; // 2ˆ-3\n    int256 constant a10 = 113314845306682631683; // eˆ(x10)\n    int256 constant x11 = 6250000000000000000; // 2ˆ-4\n    int256 constant a11 = 106449445891785942956; // eˆ(x11)\n\n    /**\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\n     *\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\n     */\n    function exp(int256 x) internal pure returns (int256) {\n        unchecked {\n            require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, \"Invalid exponent\");\n\n            if (x < 0) {\n                // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\n                // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\n                // Fixed point division requires multiplying by ONE_18.\n                return ((ONE_18 * ONE_18) / exp(-x));\n            }\n\n            // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\n            // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\n            // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\n            // decomposition.\n            // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\n            // decomposition, which will be lower than the smallest x_n.\n            // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\n            // We mutate x by subtracting x_n, making it the remainder of the decomposition.\n\n            // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\n            // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\n            // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\n            // decomposition.\n\n            // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\n            // it and compute the accumulated product.\n\n            int256 firstAN;\n            if (x >= x0) {\n                x -= x0;\n                firstAN = a0;\n            } else if (x >= x1) {\n                x -= x1;\n                firstAN = a1;\n            } else {\n                firstAN = 1; // One with no decimal places\n            }\n\n            // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\n            // smaller terms.\n            x *= 100;\n\n            // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\n            // one. Recall that fixed point multiplication requires dividing by ONE_20.\n            int256 product = ONE_20;\n\n            if (x >= x2) {\n                x -= x2;\n                product = (product * a2) / ONE_20;\n            }\n            if (x >= x3) {\n                x -= x3;\n                product = (product * a3) / ONE_20;\n            }\n            if (x >= x4) {\n                x -= x4;\n                product = (product * a4) / ONE_20;\n            }\n            if (x >= x5) {\n                x -= x5;\n                product = (product * a5) / ONE_20;\n            }\n            if (x >= x6) {\n                x -= x6;\n                product = (product * a6) / ONE_20;\n            }\n            if (x >= x7) {\n                x -= x7;\n                product = (product * a7) / ONE_20;\n            }\n            if (x >= x8) {\n                x -= x8;\n                product = (product * a8) / ONE_20;\n            }\n            if (x >= x9) {\n                x -= x9;\n                product = (product * a9) / ONE_20;\n            }\n\n            // x10 and x11 are unnecessary here since we have high enough precision already.\n\n            // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\n            // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\n\n            int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\n            int256 term; // Each term in the sum, where the nth term is (x^n / n!).\n\n            // The first term is simply x.\n            term = x;\n            seriesSum += term;\n\n            // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\n            // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\n\n            term = ((term * x) / ONE_20) / 2;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 3;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 4;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 5;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 6;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 7;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 8;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 9;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 10;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 11;\n            seriesSum += term;\n\n            term = ((term * x) / ONE_20) / 12;\n            seriesSum += term;\n\n            // 12 Taylor terms are sufficient for 18 decimal precision.\n\n            // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\n            // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\n            // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\n            // and then drop two digits to return an 18 decimal value.\n\n            return (((product * seriesSum) / ONE_20) * firstAN) / 100;\n        }\n    }\n\n    /**\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n     */\n    function ln(int256 a) internal pure returns (int256) {\n        unchecked {\n            // The real natural logarithm is not defined for negative numbers or zero.\n            require(a > 0, \"out of bounds\");\n            if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\n                return _ln_36(a) / ONE_18;\n            } else {\n                return _ln(a);\n            }\n        }\n    }\n\n    /**\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\n     *\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\n     */\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\n        unchecked {\n            if (y == 0) {\n                // We solve the 0^0 indetermination by making it equal one.\n                return uint256(ONE_18);\n            }\n\n            if (x == 0) {\n                return 0;\n            }\n\n            // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\n            // arrive at that r`esult. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\n            // x^y = exp(y * ln(x)).\n\n            // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\n            require(x < 2 ** 255, \"x out of bounds\");\n            int256 x_int256 = int256(x);\n\n            // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\n            // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\n\n            // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\n            require(y < MILD_EXPONENT_BOUND, \"y out of bounds\");\n            int256 y_int256 = int256(y);\n\n            int256 logx_times_y;\n            if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\n                int256 ln_36_x = _ln_36(x_int256);\n\n                // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\n                // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\n                // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\n                // (downscaled) last 18 decimals.\n                logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\n            } else {\n                logx_times_y = _ln(x_int256) * y_int256;\n            }\n            logx_times_y /= ONE_18;\n\n            // Finally, we compute exp(y * ln(x)) to arrive at x^y\n            require(\n                MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\n                \"product out of bounds\"\n            );\n\n            return uint256(exp(logx_times_y));\n        }\n    }\n\n    /**\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n     */\n    function _ln(int256 a) private pure returns (int256) {\n        unchecked {\n            if (a < ONE_18) {\n                // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\n                // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\n                // Fixed point division requires multiplying by ONE_18.\n                return (-_ln((ONE_18 * ONE_18) / a));\n            }\n\n            // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\n            // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\n            // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\n            // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\n            // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\n            // decomposition, which will be lower than the smallest a_n.\n            // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\n            // We mutate a by subtracting a_n, making it the remainder of the decomposition.\n\n            // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\n            // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\n            // ONE_18 to convert them to fixed point.\n            // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\n            // by it and compute the accumulated sum.\n\n            int256 sum = 0;\n            if (a >= a0 * ONE_18) {\n                a /= a0; // Integer, not fixed point division\n                sum += x0;\n            }\n\n            if (a >= a1 * ONE_18) {\n                a /= a1; // Integer, not fixed point division\n                sum += x1;\n            }\n\n            // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\n            sum *= 100;\n            a *= 100;\n\n            // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\n\n            if (a >= a2) {\n                a = (a * ONE_20) / a2;\n                sum += x2;\n            }\n\n            if (a >= a3) {\n                a = (a * ONE_20) / a3;\n                sum += x3;\n            }\n\n            if (a >= a4) {\n                a = (a * ONE_20) / a4;\n                sum += x4;\n            }\n\n            if (a >= a5) {\n                a = (a * ONE_20) / a5;\n                sum += x5;\n            }\n\n            if (a >= a6) {\n                a = (a * ONE_20) / a6;\n                sum += x6;\n            }\n\n            if (a >= a7) {\n                a = (a * ONE_20) / a7;\n                sum += x7;\n            }\n\n            if (a >= a8) {\n                a = (a * ONE_20) / a8;\n                sum += x8;\n            }\n\n            if (a >= a9) {\n                a = (a * ONE_20) / a9;\n                sum += x9;\n            }\n\n            if (a >= a10) {\n                a = (a * ONE_20) / a10;\n                sum += x10;\n            }\n\n            if (a >= a11) {\n                a = (a * ONE_20) / a11;\n                sum += x11;\n            }\n\n            // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\n            // that converges rapidly for values of `a` close to one - the same one used in ln_36.\n            // Let z = (a - 1) / (a + 1).\n            // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n            // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\n            // division by ONE_20.\n            int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\n            int256 z_squared = (z * z) / ONE_20;\n\n            // num is the numerator of the series: the z^(2 * n + 1) term\n            int256 num = z;\n\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n            int256 seriesSum = num;\n\n            // In each step, the numerator is multiplied by z^2\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 3;\n\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 5;\n\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 7;\n\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 9;\n\n            num = (num * z_squared) / ONE_20;\n            seriesSum += num / 11;\n\n            // 6 Taylor terms are sufficient for 36 decimal precision.\n\n            // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\n            seriesSum *= 2;\n\n            // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\n            // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\n            // value.\n\n            return (sum + seriesSum) / 100;\n        }\n    }\n\n    /**\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\n     * for x close to one.\n     *\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\n     */\n    function _ln_36(int256 x) private pure returns (int256) {\n        unchecked {\n            // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\n            // worthwhile.\n\n            // First, we transform x to a 36 digit fixed point value.\n            x *= ONE_18;\n\n            // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\n            // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n            // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\n            // division by ONE_36.\n            int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\n            int256 z_squared = (z * z) / ONE_36;\n\n            // num is the numerator of the series: the z^(2 * n + 1) term\n            int256 num = z;\n\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n            int256 seriesSum = num;\n\n            // In each step, the numerator is multiplied by z^2\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 3;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 5;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 7;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 9;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 11;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 13;\n\n            num = (num * z_squared) / ONE_36;\n            seriesSum += num / 15;\n\n            // 8 Taylor terms are sufficient for 36 decimal precision.\n\n            // All that remains is multiplying by 2 (non fixed point).\n            return seriesSum * 2;\n        }\n    }\n}\n"
    },
    "@pendle/core-v2/contracts/core/libraries/math/PMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\n/* solhint-disable private-vars-leading-underscore, reason-string */\n\nlibrary PMath {\n    uint256 internal constant ONE = 1e18; // 18 decimal places\n    int256 internal constant IONE = 1e18; // 18 decimal places\n\n    function subMax0(uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            return (a >= b ? a - b : 0);\n        }\n    }\n\n    function subNoNeg(int256 a, int256 b) internal pure returns (int256) {\n        require(a >= b, \"negative\");\n        return a - b; // no unchecked since if b is very negative, a - b might overflow\n    }\n\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 product = a * b;\n        unchecked {\n            return product / ONE;\n        }\n    }\n\n    function mulDown(int256 a, int256 b) internal pure returns (int256) {\n        int256 product = a * b;\n        unchecked {\n            return product / IONE;\n        }\n    }\n\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 aInflated = a * ONE;\n        unchecked {\n            return aInflated / b;\n        }\n    }\n\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\n        int256 aInflated = a * IONE;\n        unchecked {\n            return aInflated / b;\n        }\n    }\n\n    function rawDivUp(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a + b - 1) / b;\n    }\n\n    function rawDivUp(int256 a, int256 b) internal pure returns (int256) {\n        return (a + b - 1) / b;\n    }\n\n    function tweakUp(uint256 a, uint256 factor) internal pure returns (uint256) {\n        return mulDown(a, ONE + factor);\n    }\n\n    function tweakDown(uint256 a, uint256 factor) internal pure returns (uint256) {\n        return mulDown(a, ONE - factor);\n    }\n\n    /// @return res = min(a + b, bound)\n    /// @dev This function should handle arithmetic operation and bound check without overflow/underflow\n    function addWithUpperBound(uint256 a, uint256 b, uint256 bound) internal pure returns (uint256 res) {\n        unchecked {\n            if (type(uint256).max - b < a) res = bound;\n            else res = min(bound, a + b);\n        }\n    }\n\n    /// @return res = max(a - b, bound)\n    /// @dev This function should handle arithmetic operation and bound check without overflow/underflow\n    function subWithLowerBound(uint256 a, uint256 b, uint256 bound) internal pure returns (uint256 res) {\n        unchecked {\n            if (b > a) res = bound;\n            else res = max(a - b, bound);\n        }\n    }\n\n    function clamp(uint256 x, uint256 lower, uint256 upper) internal pure returns (uint256 res) {\n        res = x;\n        if (x < lower) res = lower;\n        else if (x > upper) res = upper;\n    }\n\n    // @author Uniswap\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n\n    function square(uint256 x) internal pure returns (uint256) {\n        return x * x;\n    }\n\n    function squareDown(uint256 x) internal pure returns (uint256) {\n        return mulDown(x, x);\n    }\n\n    function abs(int256 x) internal pure returns (uint256) {\n        return uint256(x > 0 ? x : -x);\n    }\n\n    function neg(int256 x) internal pure returns (int256) {\n        return x * (-1);\n    }\n\n    function neg(uint256 x) internal pure returns (int256) {\n        return Int(x) * (-1);\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n        return (x > y ? x : y);\n    }\n\n    function max(int256 x, int256 y) internal pure returns (int256) {\n        return (x > y ? x : y);\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n        return (x < y ? x : y);\n    }\n\n    function min(int256 x, int256 y) internal pure returns (int256) {\n        return (x < y ? x : y);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                               SIGNED CASTS\n    //////////////////////////////////////////////////////////////*/\n\n    function Int(uint256 x) internal pure returns (int256) {\n        require(x <= uint256(type(int256).max));\n        return int256(x);\n    }\n\n    function Int128(int256 x) internal pure returns (int128) {\n        require(type(int128).min <= x && x <= type(int128).max);\n        return int128(x);\n    }\n\n    function Int128(uint256 x) internal pure returns (int128) {\n        return Int128(Int(x));\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                               UNSIGNED CASTS\n    //////////////////////////////////////////////////////////////*/\n\n    function Uint(int256 x) internal pure returns (uint256) {\n        require(x >= 0);\n        return uint256(x);\n    }\n\n    function Uint32(uint256 x) internal pure returns (uint32) {\n        require(x <= type(uint32).max);\n        return uint32(x);\n    }\n\n    function Uint64(uint256 x) internal pure returns (uint64) {\n        require(x <= type(uint64).max);\n        return uint64(x);\n    }\n\n    function Uint112(uint256 x) internal pure returns (uint112) {\n        require(x <= type(uint112).max);\n        return uint112(x);\n    }\n\n    function Uint96(uint256 x) internal pure returns (uint96) {\n        require(x <= type(uint96).max);\n        return uint96(x);\n    }\n\n    function Uint128(uint256 x) internal pure returns (uint128) {\n        require(x <= type(uint128).max);\n        return uint128(x);\n    }\n\n    function Uint192(uint256 x) internal pure returns (uint192) {\n        require(x <= type(uint192).max);\n        return uint192(x);\n    }\n\n    function Uint80(uint256 x) internal pure returns (uint80) {\n        require(x <= type(uint80).max);\n        return uint80(x);\n    }\n\n    function isAApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\n        return mulDown(b, ONE - eps) <= a && a <= mulDown(b, ONE + eps);\n    }\n\n    function isAGreaterApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\n        return a >= b && a <= mulDown(b, ONE + eps);\n    }\n\n    function isASmallerApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\n        return a <= b && a >= mulDown(b, ONE - eps);\n    }\n}\n"
    },
    "@pendle/core-v2/contracts/core/libraries/MiniHelpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nlibrary MiniHelpers {\n    function isCurrentlyExpired(uint256 expiry) internal view returns (bool) {\n        return (expiry <= block.timestamp);\n    }\n\n    function isExpired(uint256 expiry, uint256 blockTime) internal pure returns (bool) {\n        return (expiry <= blockTime);\n    }\n\n    function isTimeInThePast(uint256 timestamp) internal view returns (bool) {\n        return (timestamp <= block.timestamp); // same definition as isCurrentlyExpired\n    }\n}\n"
    },
    "@pendle/core-v2/contracts/core/Market/MarketMathCore.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport \"../libraries/math/PMath.sol\";\nimport \"../libraries/math/LogExpMath.sol\";\n\nimport \"../StandardizedYield/PYIndex.sol\";\nimport \"../libraries/MiniHelpers.sol\";\nimport \"../libraries/Errors.sol\";\n\nstruct MarketState {\n    int256 totalPt;\n    int256 totalSy;\n    int256 totalLp;\n    address treasury;\n    /// immutable variables ///\n    int256 scalarRoot;\n    uint256 expiry;\n    /// fee data ///\n    uint256 lnFeeRateRoot;\n    uint256 reserveFeePercent; // base 100\n    /// last trade data ///\n    uint256 lastLnImpliedRate;\n}\n\n// params that are expensive to compute, therefore we pre-compute them\nstruct MarketPreCompute {\n    int256 rateScalar;\n    int256 totalAsset;\n    int256 rateAnchor;\n    int256 feeRate;\n}\n\n// solhint-disable ordering\nlibrary MarketMathCore {\n    using PMath for uint256;\n    using PMath for int256;\n    using LogExpMath for int256;\n    using PYIndexLib for PYIndex;\n\n    int256 internal constant MINIMUM_LIQUIDITY = 10 ** 3;\n    int256 internal constant PERCENTAGE_DECIMALS = 100;\n    uint256 internal constant DAY = 86400;\n    uint256 internal constant IMPLIED_RATE_TIME = 365 * DAY;\n\n    int256 internal constant MAX_MARKET_PROPORTION = (1e18 * 96) / 100;\n\n    using PMath for uint256;\n    using PMath for int256;\n\n    /*///////////////////////////////////////////////////////////////\n                UINT FUNCTIONS TO PROXY TO CORE FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function addLiquidity(\n        MarketState memory market,\n        uint256 syDesired,\n        uint256 ptDesired,\n        uint256 blockTime\n    ) internal pure returns (uint256 lpToReserve, uint256 lpToAccount, uint256 syUsed, uint256 ptUsed) {\n        (int256 _lpToReserve, int256 _lpToAccount, int256 _syUsed, int256 _ptUsed) = addLiquidityCore(\n            market,\n            syDesired.Int(),\n            ptDesired.Int(),\n            blockTime\n        );\n\n        lpToReserve = _lpToReserve.Uint();\n        lpToAccount = _lpToAccount.Uint();\n        syUsed = _syUsed.Uint();\n        ptUsed = _ptUsed.Uint();\n    }\n\n    function removeLiquidity(\n        MarketState memory market,\n        uint256 lpToRemove\n    ) internal pure returns (uint256 netSyToAccount, uint256 netPtToAccount) {\n        (int256 _syToAccount, int256 _ptToAccount) = removeLiquidityCore(market, lpToRemove.Int());\n\n        netSyToAccount = _syToAccount.Uint();\n        netPtToAccount = _ptToAccount.Uint();\n    }\n\n    function swapExactPtForSy(\n        MarketState memory market,\n        PYIndex index,\n        uint256 exactPtToMarket,\n        uint256 blockTime\n    ) internal pure returns (uint256 netSyToAccount, uint256 netSyFee, uint256 netSyToReserve) {\n        (int256 _netSyToAccount, int256 _netSyFee, int256 _netSyToReserve) = executeTradeCore(\n            market,\n            index,\n            exactPtToMarket.neg(),\n            blockTime\n        );\n\n        netSyToAccount = _netSyToAccount.Uint();\n        netSyFee = _netSyFee.Uint();\n        netSyToReserve = _netSyToReserve.Uint();\n    }\n\n    function swapSyForExactPt(\n        MarketState memory market,\n        PYIndex index,\n        uint256 exactPtToAccount,\n        uint256 blockTime\n    ) internal pure returns (uint256 netSyToMarket, uint256 netSyFee, uint256 netSyToReserve) {\n        (int256 _netSyToAccount, int256 _netSyFee, int256 _netSyToReserve) = executeTradeCore(\n            market,\n            index,\n            exactPtToAccount.Int(),\n            blockTime\n        );\n\n        netSyToMarket = _netSyToAccount.neg().Uint();\n        netSyFee = _netSyFee.Uint();\n        netSyToReserve = _netSyToReserve.Uint();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                    CORE FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function addLiquidityCore(\n        MarketState memory market,\n        int256 syDesired,\n        int256 ptDesired,\n        uint256 blockTime\n    ) internal pure returns (int256 lpToReserve, int256 lpToAccount, int256 syUsed, int256 ptUsed) {\n        /// ------------------------------------------------------------\n        /// CHECKS\n        /// ------------------------------------------------------------\n        if (syDesired == 0 || ptDesired == 0) revert Errors.MarketZeroAmountsInput();\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\n\n        /// ------------------------------------------------------------\n        /// MATH\n        /// ------------------------------------------------------------\n        if (market.totalLp == 0) {\n            lpToAccount = PMath.sqrt((syDesired * ptDesired).Uint()).Int() - MINIMUM_LIQUIDITY;\n            lpToReserve = MINIMUM_LIQUIDITY;\n            syUsed = syDesired;\n            ptUsed = ptDesired;\n        } else {\n            int256 netLpByPt = (ptDesired * market.totalLp) / market.totalPt;\n            int256 netLpBySy = (syDesired * market.totalLp) / market.totalSy;\n            if (netLpByPt < netLpBySy) {\n                lpToAccount = netLpByPt;\n                ptUsed = ptDesired;\n                syUsed = (market.totalSy * lpToAccount).rawDivUp(market.totalLp);\n            } else {\n                lpToAccount = netLpBySy;\n                syUsed = syDesired;\n                ptUsed = (market.totalPt * lpToAccount).rawDivUp(market.totalLp);\n            }\n        }\n\n        if (lpToAccount <= 0 || syUsed <= 0 || ptUsed <= 0) revert Errors.MarketZeroAmountsOutput();\n\n        /// ------------------------------------------------------------\n        /// WRITE\n        /// ------------------------------------------------------------\n        market.totalSy += syUsed;\n        market.totalPt += ptUsed;\n        market.totalLp += lpToAccount + lpToReserve;\n    }\n\n    function removeLiquidityCore(\n        MarketState memory market,\n        int256 lpToRemove\n    ) internal pure returns (int256 netSyToAccount, int256 netPtToAccount) {\n        /// ------------------------------------------------------------\n        /// CHECKS\n        /// ------------------------------------------------------------\n        if (lpToRemove == 0) revert Errors.MarketZeroAmountsInput();\n\n        /// ------------------------------------------------------------\n        /// MATH\n        /// ------------------------------------------------------------\n        netSyToAccount = (lpToRemove * market.totalSy) / market.totalLp;\n        netPtToAccount = (lpToRemove * market.totalPt) / market.totalLp;\n\n        if (netSyToAccount == 0 && netPtToAccount == 0) revert Errors.MarketZeroAmountsOutput();\n\n        /// ------------------------------------------------------------\n        /// WRITE\n        /// ------------------------------------------------------------\n        market.totalLp = market.totalLp.subNoNeg(lpToRemove);\n        market.totalPt = market.totalPt.subNoNeg(netPtToAccount);\n        market.totalSy = market.totalSy.subNoNeg(netSyToAccount);\n    }\n\n    function executeTradeCore(\n        MarketState memory market,\n        PYIndex index,\n        int256 netPtToAccount,\n        uint256 blockTime\n    ) internal pure returns (int256 netSyToAccount, int256 netSyFee, int256 netSyToReserve) {\n        /// ------------------------------------------------------------\n        /// CHECKS\n        /// ------------------------------------------------------------\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\n        if (market.totalPt <= netPtToAccount)\n            revert Errors.MarketInsufficientPtForTrade(market.totalPt, netPtToAccount);\n\n        /// ------------------------------------------------------------\n        /// MATH\n        /// ------------------------------------------------------------\n        MarketPreCompute memory comp = getMarketPreCompute(market, index, blockTime);\n\n        (netSyToAccount, netSyFee, netSyToReserve) = calcTrade(market, comp, index, netPtToAccount);\n\n        /// ------------------------------------------------------------\n        /// WRITE\n        /// ------------------------------------------------------------\n        _setNewMarketStateTrade(market, comp, index, netPtToAccount, netSyToAccount, netSyToReserve, blockTime);\n    }\n\n    function getMarketPreCompute(\n        MarketState memory market,\n        PYIndex index,\n        uint256 blockTime\n    ) internal pure returns (MarketPreCompute memory res) {\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\n\n        uint256 timeToExpiry = market.expiry - blockTime;\n\n        res.rateScalar = _getRateScalar(market, timeToExpiry);\n        res.totalAsset = index.syToAsset(market.totalSy);\n\n        if (market.totalPt == 0 || res.totalAsset == 0)\n            revert Errors.MarketZeroTotalPtOrTotalAsset(market.totalPt, res.totalAsset);\n\n        res.rateAnchor = _getRateAnchor(\n            market.totalPt,\n            market.lastLnImpliedRate,\n            res.totalAsset,\n            res.rateScalar,\n            timeToExpiry\n        );\n        res.feeRate = _getExchangeRateFromImpliedRate(market.lnFeeRateRoot, timeToExpiry);\n    }\n\n    function calcTrade(\n        MarketState memory market,\n        MarketPreCompute memory comp,\n        PYIndex index,\n        int256 netPtToAccount\n    ) internal pure returns (int256 netSyToAccount, int256 netSyFee, int256 netSyToReserve) {\n        int256 preFeeExchangeRate = _getExchangeRate(\n            market.totalPt,\n            comp.totalAsset,\n            comp.rateScalar,\n            comp.rateAnchor,\n            netPtToAccount\n        );\n\n        int256 preFeeAssetToAccount = netPtToAccount.divDown(preFeeExchangeRate).neg();\n        int256 fee = comp.feeRate;\n\n        if (netPtToAccount > 0) {\n            int256 postFeeExchangeRate = preFeeExchangeRate.divDown(fee);\n            if (postFeeExchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(postFeeExchangeRate);\n\n            fee = preFeeAssetToAccount.mulDown(PMath.IONE - fee);\n        } else {\n            fee = ((preFeeAssetToAccount * (PMath.IONE - fee)) / fee).neg();\n        }\n\n        int256 netAssetToReserve = (fee * market.reserveFeePercent.Int()) / PERCENTAGE_DECIMALS;\n        int256 netAssetToAccount = preFeeAssetToAccount - fee;\n\n        netSyToAccount = netAssetToAccount < 0\n            ? index.assetToSyUp(netAssetToAccount)\n            : index.assetToSy(netAssetToAccount);\n        netSyFee = index.assetToSy(fee);\n        netSyToReserve = index.assetToSy(netAssetToReserve);\n    }\n\n    function _setNewMarketStateTrade(\n        MarketState memory market,\n        MarketPreCompute memory comp,\n        PYIndex index,\n        int256 netPtToAccount,\n        int256 netSyToAccount,\n        int256 netSyToReserve,\n        uint256 blockTime\n    ) internal pure {\n        uint256 timeToExpiry = market.expiry - blockTime;\n\n        market.totalPt = market.totalPt.subNoNeg(netPtToAccount);\n        market.totalSy = market.totalSy.subNoNeg(netSyToAccount + netSyToReserve);\n\n        market.lastLnImpliedRate = _getLnImpliedRate(\n            market.totalPt,\n            index.syToAsset(market.totalSy),\n            comp.rateScalar,\n            comp.rateAnchor,\n            timeToExpiry\n        );\n\n        if (market.lastLnImpliedRate == 0) revert Errors.MarketZeroLnImpliedRate();\n    }\n\n    function _getRateAnchor(\n        int256 totalPt,\n        uint256 lastLnImpliedRate,\n        int256 totalAsset,\n        int256 rateScalar,\n        uint256 timeToExpiry\n    ) internal pure returns (int256 rateAnchor) {\n        int256 newExchangeRate = _getExchangeRateFromImpliedRate(lastLnImpliedRate, timeToExpiry);\n\n        if (newExchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(newExchangeRate);\n\n        {\n            int256 proportion = totalPt.divDown(totalPt + totalAsset);\n\n            int256 lnProportion = _logProportion(proportion);\n\n            rateAnchor = newExchangeRate - lnProportion.divDown(rateScalar);\n        }\n    }\n\n    /// @notice Calculates the current market implied rate.\n    /// @return lnImpliedRate the implied rate\n    function _getLnImpliedRate(\n        int256 totalPt,\n        int256 totalAsset,\n        int256 rateScalar,\n        int256 rateAnchor,\n        uint256 timeToExpiry\n    ) internal pure returns (uint256 lnImpliedRate) {\n        // This will check for exchange rates < PMath.IONE\n        int256 exchangeRate = _getExchangeRate(totalPt, totalAsset, rateScalar, rateAnchor, 0);\n\n        // exchangeRate >= 1 so its ln >= 0\n        uint256 lnRate = exchangeRate.ln().Uint();\n\n        lnImpliedRate = (lnRate * IMPLIED_RATE_TIME) / timeToExpiry;\n    }\n\n    /// @notice Converts an implied rate to an exchange rate given a time to expiry. The\n    /// formula is E = e^rt\n    function _getExchangeRateFromImpliedRate(\n        uint256 lnImpliedRate,\n        uint256 timeToExpiry\n    ) internal pure returns (int256 exchangeRate) {\n        uint256 rt = (lnImpliedRate * timeToExpiry) / IMPLIED_RATE_TIME;\n\n        exchangeRate = LogExpMath.exp(rt.Int());\n    }\n\n    function _getExchangeRate(\n        int256 totalPt,\n        int256 totalAsset,\n        int256 rateScalar,\n        int256 rateAnchor,\n        int256 netPtToAccount\n    ) internal pure returns (int256 exchangeRate) {\n        int256 numerator = totalPt.subNoNeg(netPtToAccount);\n\n        int256 proportion = (numerator.divDown(totalPt + totalAsset));\n\n        if (proportion > MAX_MARKET_PROPORTION)\n            revert Errors.MarketProportionTooHigh(proportion, MAX_MARKET_PROPORTION);\n\n        int256 lnProportion = _logProportion(proportion);\n\n        exchangeRate = lnProportion.divDown(rateScalar) + rateAnchor;\n\n        if (exchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(exchangeRate);\n    }\n\n    function _logProportion(int256 proportion) internal pure returns (int256 res) {\n        if (proportion == PMath.IONE) revert Errors.MarketProportionMustNotEqualOne();\n\n        int256 logitP = proportion.divDown(PMath.IONE - proportion);\n\n        res = logitP.ln();\n    }\n\n    function _getRateScalar(MarketState memory market, uint256 timeToExpiry) internal pure returns (int256 rateScalar) {\n        rateScalar = (market.scalarRoot * IMPLIED_RATE_TIME.Int()) / timeToExpiry.Int();\n        if (rateScalar <= 0) revert Errors.MarketRateScalarBelowZero(rateScalar);\n    }\n\n    function setInitialLnImpliedRate(\n        MarketState memory market,\n        PYIndex index,\n        int256 initialAnchor,\n        uint256 blockTime\n    ) internal pure {\n        /// ------------------------------------------------------------\n        /// CHECKS\n        /// ------------------------------------------------------------\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\n\n        /// ------------------------------------------------------------\n        /// MATH\n        /// ------------------------------------------------------------\n        int256 totalAsset = index.syToAsset(market.totalSy);\n        uint256 timeToExpiry = market.expiry - blockTime;\n        int256 rateScalar = _getRateScalar(market, timeToExpiry);\n\n        /// ------------------------------------------------------------\n        /// WRITE\n        /// ------------------------------------------------------------\n        market.lastLnImpliedRate = _getLnImpliedRate(\n            market.totalPt,\n            totalAsset,\n            rateScalar,\n            initialAnchor,\n            timeToExpiry\n        );\n    }\n}\n"
    },
    "@pendle/core-v2/contracts/core/StandardizedYield/PYIndex.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\nimport \"../../interfaces/IPYieldToken.sol\";\nimport \"../../interfaces/IPPrincipalToken.sol\";\n\nimport \"./SYUtils.sol\";\nimport \"../libraries/math/PMath.sol\";\n\ntype PYIndex is uint256;\n\nlibrary PYIndexLib {\n    using PMath for uint256;\n    using PMath for int256;\n\n    function newIndex(IPYieldToken YT) internal returns (PYIndex) {\n        return PYIndex.wrap(YT.pyIndexCurrent());\n    }\n\n    function syToAsset(PYIndex index, uint256 syAmount) internal pure returns (uint256) {\n        return SYUtils.syToAsset(PYIndex.unwrap(index), syAmount);\n    }\n\n    function assetToSy(PYIndex index, uint256 assetAmount) internal pure returns (uint256) {\n        return SYUtils.assetToSy(PYIndex.unwrap(index), assetAmount);\n    }\n\n    function assetToSyUp(PYIndex index, uint256 assetAmount) internal pure returns (uint256) {\n        return SYUtils.assetToSyUp(PYIndex.unwrap(index), assetAmount);\n    }\n\n    function syToAssetUp(PYIndex index, uint256 syAmount) internal pure returns (uint256) {\n        uint256 _index = PYIndex.unwrap(index);\n        return SYUtils.syToAssetUp(_index, syAmount);\n    }\n\n    function syToAsset(PYIndex index, int256 syAmount) internal pure returns (int256) {\n        int256 sign = syAmount < 0 ? int256(-1) : int256(1);\n        return sign * (SYUtils.syToAsset(PYIndex.unwrap(index), syAmount.abs())).Int();\n    }\n\n    function assetToSy(PYIndex index, int256 assetAmount) internal pure returns (int256) {\n        int256 sign = assetAmount < 0 ? int256(-1) : int256(1);\n        return sign * (SYUtils.assetToSy(PYIndex.unwrap(index), assetAmount.abs())).Int();\n    }\n\n    function assetToSyUp(PYIndex index, int256 assetAmount) internal pure returns (int256) {\n        int256 sign = assetAmount < 0 ? int256(-1) : int256(1);\n        return sign * (SYUtils.assetToSyUp(PYIndex.unwrap(index), assetAmount.abs())).Int();\n    }\n}\n"
    },
    "@pendle/core-v2/contracts/core/StandardizedYield/SYUtils.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nlibrary SYUtils {\n    uint256 internal constant ONE = 1e18;\n\n    function syToAsset(uint256 exchangeRate, uint256 syAmount) internal pure returns (uint256) {\n        return (syAmount * exchangeRate) / ONE;\n    }\n\n    function syToAssetUp(uint256 exchangeRate, uint256 syAmount) internal pure returns (uint256) {\n        return (syAmount * exchangeRate + ONE - 1) / ONE;\n    }\n\n    function assetToSy(uint256 exchangeRate, uint256 assetAmount) internal pure returns (uint256) {\n        return (assetAmount * ONE) / exchangeRate;\n    }\n\n    function assetToSyUp(uint256 exchangeRate, uint256 assetAmount) internal pure returns (uint256) {\n        return (assetAmount * ONE + exchangeRate - 1) / exchangeRate;\n    }\n}\n"
    },
    "@pendle/core-v2/contracts/interfaces/IPChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nenum PendleOracleType {\n    PT_TO_SY,\n    PT_TO_ASSET,\n    LP_TO_SY,\n    LP_TO_ASSET\n}\n\ninterface IPChainlinkOracle is AggregatorV3Interface {}\n"
    },
    "@pendle/core-v2/contracts/interfaces/IPChainlinkOracleFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IPChainlinkOracle.sol\";\n\ninterface IPChainlinkOracleFactory {\n    event OracleCreated(\n        address indexed market,\n        uint32 indexed twapDuration,\n        PendleOracleType indexed baseOracleType,\n        address oracle,\n        bytes32 oracleId\n    );\n    event OracleWithQuoteCreated(\n        address indexed market,\n        uint32 indexed twapDuration,\n        PendleOracleType indexed baseOracleType,\n        address quoteOracle,\n        address oracle,\n        bytes32 oracleId\n    );\n}\n"
    },
    "@pendle/core-v2/contracts/interfaces/IPGauge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\ninterface IPGauge {\n    function totalActiveSupply() external view returns (uint256);\n\n    function activeBalance(address user) external view returns (uint256);\n\n    // only available for newer factories. please check the verified contracts\n    event RedeemRewards(address indexed user, uint256[] rewardsOut);\n}\n"
    },
    "@pendle/core-v2/contracts/interfaces/IPInterestManagerYT.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\ninterface IPInterestManagerYT {\n    event CollectInterestFee(uint256 amountInterestFee);\n\n    function userInterest(address user) external view returns (uint128 lastPYIndex, uint128 accruedInterest);\n}\n"
    },
    "@pendle/core-v2/contracts/interfaces/IPMarket.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./IPPrincipalToken.sol\";\nimport \"./IPYieldToken.sol\";\nimport \"./IStandardizedYield.sol\";\nimport \"./IPGauge.sol\";\nimport \"../core/Market/MarketMathCore.sol\";\n\ninterface IPMarket is IERC20Metadata, IPGauge {\n    event Mint(address indexed receiver, uint256 netLpMinted, uint256 netSyUsed, uint256 netPtUsed);\n\n    event Burn(\n        address indexed receiverSy,\n        address indexed receiverPt,\n        uint256 netLpBurned,\n        uint256 netSyOut,\n        uint256 netPtOut\n    );\n\n    event Swap(\n        address indexed caller,\n        address indexed receiver,\n        int256 netPtOut,\n        int256 netSyOut,\n        uint256 netSyFee,\n        uint256 netSyToReserve\n    );\n\n    event UpdateImpliedRate(uint256 indexed timestamp, uint256 lnLastImpliedRate);\n\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    function mint(\n        address receiver,\n        uint256 netSyDesired,\n        uint256 netPtDesired\n    ) external returns (uint256 netLpOut, uint256 netSyUsed, uint256 netPtUsed);\n\n    function burn(\n        address receiverSy,\n        address receiverPt,\n        uint256 netLpToBurn\n    ) external returns (uint256 netSyOut, uint256 netPtOut);\n\n    function swapExactPtForSy(\n        address receiver,\n        uint256 exactPtIn,\n        bytes calldata data\n    ) external returns (uint256 netSyOut, uint256 netSyFee);\n\n    function swapSyForExactPt(\n        address receiver,\n        uint256 exactPtOut,\n        bytes calldata data\n    ) external returns (uint256 netSyIn, uint256 netSyFee);\n\n    function redeemRewards(address user) external returns (uint256[] memory);\n\n    function readState(address router) external view returns (MarketState memory market);\n\n    function observe(uint32[] memory secondsAgos) external view returns (uint216[] memory lnImpliedRateCumulative);\n\n    function increaseObservationsCardinalityNext(uint16 cardinalityNext) external;\n\n    function readTokens() external view returns (IStandardizedYield _SY, IPPrincipalToken _PT, IPYieldToken _YT);\n\n    function getRewardTokens() external view returns (address[] memory);\n\n    function isExpired() external view returns (bool);\n\n    function expiry() external view returns (uint256);\n\n    function observations(\n        uint256 index\n    ) external view returns (uint32 blockTimestamp, uint216 lnImpliedRateCumulative, bool initialized);\n\n    function _storage()\n        external\n        view\n        returns (\n            int128 totalPt,\n            int128 totalSy,\n            uint96 lastLnImpliedRate,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext\n        );\n}\n"
    },
    "@pendle/core-v2/contracts/interfaces/IPPrincipalToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IPPrincipalToken is IERC20Metadata {\n    function burnByYT(address user, uint256 amount) external;\n\n    function mintByYT(address user, uint256 amount) external;\n\n    function initialize(address _YT) external;\n\n    function SY() external view returns (address);\n\n    function YT() external view returns (address);\n\n    function factory() external view returns (address);\n\n    function expiry() external view returns (uint256);\n\n    function isExpired() external view returns (bool);\n}\n"
    },
    "@pendle/core-v2/contracts/interfaces/IPPYLpOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\ninterface IPPYLpOracle {\n    event SetBlockCycleNumerator(uint16 newBlockCycleNumerator);\n\n    function getPtToAssetRate(address market, uint32 duration) external view returns (uint256);\n\n    function getYtToAssetRate(address market, uint32 duration) external view returns (uint256);\n\n    function getLpToAssetRate(address market, uint32 duration) external view returns (uint256);\n\n    function getPtToSyRate(address market, uint32 duration) external view returns (uint256);\n\n    function getYtToSyRate(address market, uint32 duration) external view returns (uint256);\n\n    function getLpToSyRate(address market, uint32 duration) external view returns (uint256);\n\n    function getOracleState(\n        address market,\n        uint32 duration\n    )\n        external\n        view\n        returns (bool increaseCardinalityRequired, uint16 cardinalityRequired, bool oldestObservationSatisfied);\n\n    function blockCycleNumerator() external view returns (uint16);\n}\n"
    },
    "@pendle/core-v2/contracts/interfaces/IPYieldToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./IRewardManager.sol\";\nimport \"./IPInterestManagerYT.sol\";\n\ninterface IPYieldToken is IERC20Metadata, IRewardManager, IPInterestManagerYT {\n    event NewInterestIndex(uint256 indexed newIndex);\n\n    event Mint(\n        address indexed caller,\n        address indexed receiverPT,\n        address indexed receiverYT,\n        uint256 amountSyToMint,\n        uint256 amountPYOut\n    );\n\n    event Burn(address indexed caller, address indexed receiver, uint256 amountPYToRedeem, uint256 amountSyOut);\n\n    event RedeemRewards(address indexed user, uint256[] amountRewardsOut);\n\n    event RedeemInterest(address indexed user, uint256 interestOut);\n\n    event CollectRewardFee(address indexed rewardToken, uint256 amountRewardFee);\n\n    function mintPY(address receiverPT, address receiverYT) external returns (uint256 amountPYOut);\n\n    function redeemPY(address receiver) external returns (uint256 amountSyOut);\n\n    function redeemPYMulti(\n        address[] calldata receivers,\n        uint256[] calldata amountPYToRedeems\n    ) external returns (uint256[] memory amountSyOuts);\n\n    function redeemDueInterestAndRewards(\n        address user,\n        bool redeemInterest,\n        bool redeemRewards\n    ) external returns (uint256 interestOut, uint256[] memory rewardsOut);\n\n    function rewardIndexesCurrent() external returns (uint256[] memory);\n\n    function pyIndexCurrent() external returns (uint256);\n\n    function pyIndexStored() external view returns (uint256);\n\n    function getRewardTokens() external view returns (address[] memory);\n\n    function SY() external view returns (address);\n\n    function PT() external view returns (address);\n\n    function factory() external view returns (address);\n\n    function expiry() external view returns (uint256);\n\n    function isExpired() external view returns (bool);\n\n    function doCacheIndexSameBlock() external view returns (bool);\n\n    function pyIndexLastUpdatedBlock() external view returns (uint128);\n}\n"
    },
    "@pendle/core-v2/contracts/interfaces/IRewardManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\ninterface IRewardManager {\n    function userReward(address token, address user) external view returns (uint128 index, uint128 accrued);\n}\n"
    },
    "@pendle/core-v2/contracts/interfaces/IStandardizedYield.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n/*\n * MIT License\n * ===========\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n */\n\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IStandardizedYield is IERC20Metadata {\n    /// @dev Emitted when any base tokens is deposited to mint shares\n    event Deposit(\n        address indexed caller,\n        address indexed receiver,\n        address indexed tokenIn,\n        uint256 amountDeposited,\n        uint256 amountSyOut\n    );\n\n    /// @dev Emitted when any shares are redeemed for base tokens\n    event Redeem(\n        address indexed caller,\n        address indexed receiver,\n        address indexed tokenOut,\n        uint256 amountSyToRedeem,\n        uint256 amountTokenOut\n    );\n\n    /// @dev check `assetInfo()` for more information\n    enum AssetType {\n        TOKEN,\n        LIQUIDITY\n    }\n\n    /// @dev Emitted when (`user`) claims their rewards\n    event ClaimRewards(address indexed user, address[] rewardTokens, uint256[] rewardAmounts);\n\n    /**\n     * @notice mints an amount of shares by depositing a base token.\n     * @param receiver shares recipient address\n     * @param tokenIn address of the base tokens to mint shares\n     * @param amountTokenToDeposit amount of base tokens to be transferred from (`msg.sender`)\n     * @param minSharesOut reverts if amount of shares minted is lower than this\n     * @return amountSharesOut amount of shares minted\n     * @dev Emits a {Deposit} event\n     *\n     * Requirements:\n     * - (`tokenIn`) must be a valid base token.\n     */\n    function deposit(\n        address receiver,\n        address tokenIn,\n        uint256 amountTokenToDeposit,\n        uint256 minSharesOut\n    ) external payable returns (uint256 amountSharesOut);\n\n    /**\n     * @notice redeems an amount of base tokens by burning some shares\n     * @param receiver recipient address\n     * @param amountSharesToRedeem amount of shares to be burned\n     * @param tokenOut address of the base token to be redeemed\n     * @param minTokenOut reverts if amount of base token redeemed is lower than this\n     * @param burnFromInternalBalance if true, burns from balance of `address(this)`, otherwise burns from `msg.sender`\n     * @return amountTokenOut amount of base tokens redeemed\n     * @dev Emits a {Redeem} event\n     *\n     * Requirements:\n     * - (`tokenOut`) must be a valid base token.\n     */\n    function redeem(\n        address receiver,\n        uint256 amountSharesToRedeem,\n        address tokenOut,\n        uint256 minTokenOut,\n        bool burnFromInternalBalance\n    ) external returns (uint256 amountTokenOut);\n\n    /**\n     * @notice exchangeRate * syBalance / 1e18 must return the asset balance of the account\n     * @notice vice-versa, if a user uses some amount of tokens equivalent to X asset, the amount of sy\n     he can mint must be X * exchangeRate / 1e18\n     * @dev SYUtils's assetToSy & syToAsset should be used instead of raw multiplication\n     & division\n     */\n    function exchangeRate() external view returns (uint256 res);\n\n    /**\n     * @notice claims reward for (`user`)\n     * @param user the user receiving their rewards\n     * @return rewardAmounts an array of reward amounts in the same order as `getRewardTokens`\n     * @dev\n     * Emits a `ClaimRewards` event\n     * See {getRewardTokens} for list of reward tokens\n     */\n    function claimRewards(address user) external returns (uint256[] memory rewardAmounts);\n\n    /**\n     * @notice get the amount of unclaimed rewards for (`user`)\n     * @param user the user to check for\n     * @return rewardAmounts an array of reward amounts in the same order as `getRewardTokens`\n     */\n    function accruedRewards(address user) external view returns (uint256[] memory rewardAmounts);\n\n    function rewardIndexesCurrent() external returns (uint256[] memory indexes);\n\n    function rewardIndexesStored() external view returns (uint256[] memory indexes);\n\n    /**\n     * @notice returns the list of reward token addresses\n     */\n    function getRewardTokens() external view returns (address[] memory);\n\n    /**\n     * @notice returns the address of the underlying yield token\n     */\n    function yieldToken() external view returns (address);\n\n    /**\n     * @notice returns all tokens that can mint this SY\n     */\n    function getTokensIn() external view returns (address[] memory res);\n\n    /**\n     * @notice returns all tokens that can be redeemed by this SY\n     */\n    function getTokensOut() external view returns (address[] memory res);\n\n    function isValidTokenIn(address token) external view returns (bool);\n\n    function isValidTokenOut(address token) external view returns (bool);\n\n    function previewDeposit(\n        address tokenIn,\n        uint256 amountTokenToDeposit\n    ) external view returns (uint256 amountSharesOut);\n\n    function previewRedeem(\n        address tokenOut,\n        uint256 amountSharesToRedeem\n    ) external view returns (uint256 amountTokenOut);\n\n    /**\n     * @notice This function contains information to interpret what the asset is\n     * @return assetType the type of the asset (0 for ERC20 tokens, 1 for AMM liquidity tokens,\n        2 for bridged yield bearing tokens like wstETH, rETH on Arbi whose the underlying asset doesn't exist on the chain)\n     * @return assetAddress the address of the asset\n     * @return assetDecimals the decimals of the asset\n     */\n    function assetInfo() external view returns (AssetType assetType, address assetAddress, uint8 assetDecimals);\n}\n"
    },
    "@pendle/core-v2/contracts/oracles/PtYtLpOracle/chainlink/PendleChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport \"../../../interfaces/IPChainlinkOracle.sol\";\nimport \"../PendleLpOracleLib.sol\";\n\n/**\n * @dev The round data returned from this contract will follow:\n * - There will be only one round (roundId=0)\n * - startedAt=0, updatedAt=block.timestamp\n */\ncontract PendleChainlinkOracle is IPChainlinkOracle {\n    error InvalidRoundId();\n\n    // solhint-disable immutable-vars-naming\n    address public immutable factory;\n\n    address public immutable market;\n    uint32 public immutable twapDuration;\n    PendleOracleType public immutable baseOracleType;\n\n    uint256 public immutable fromTokenScale;\n    uint256 public immutable toTokenScale;\n\n    function(IPMarket, uint32) internal view returns (uint256) private immutable _getRawPendlePrice;\n\n    modifier roundIdIsZero(uint80 roundId) {\n        if (roundId != 0) {\n            revert InvalidRoundId();\n        }\n        _;\n    }\n\n    constructor(address _market, uint32 _twapDuration, PendleOracleType _baseOracleType) {\n        factory = msg.sender;\n        market = _market;\n        twapDuration = _twapDuration;\n        baseOracleType = _baseOracleType;\n        (uint256 fromTokenDecimals, uint256 toTokenDecimals) = _readDecimals(_market, _baseOracleType);\n        (fromTokenScale, toTokenScale) = (10 ** fromTokenDecimals, 10 ** toTokenDecimals);\n        _getRawPendlePrice = _getRawPendlePriceFunc();\n    }\n\n    // =================================================================\n    //                          CHAINLINK INTERFACE\n    // =================================================================\n\n    /**\n     * @notice The round data returned from this contract will follow:\n     * - answer will satisfy 1 natural unit of PendleToken = (answer/1e18) natural unit of OutputToken\n     * - In other words, 10**(PendleToken.decimals) = (answer/1e18) * 10**(OutputToken.decimals)\n     * @param roundId always 0 for this contract\n     * @param answer The answer (in 18 decimals)\n     * @param startedAt always 0 for this contract\n     * @param updatedAt always block.timestamp for this contract\n     * @param answeredInRound always 0 for this contract\n     */\n    function latestRoundData()\n        public\n        view\n        virtual\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n    {\n        roundId = 0;\n        answer = _getPendleTokenPrice();\n        startedAt = 0;\n        updatedAt = block.timestamp;\n        answeredInRound = 0;\n    }\n\n    function getRoundData(\n        uint80 roundId\n    ) external view roundIdIsZero(roundId) returns (uint80, int256, uint256, uint256, uint80) {\n        return latestRoundData();\n    }\n\n    function decimals() external pure returns (uint8) {\n        return 18;\n    }\n\n    function description() external pure returns (string memory) {\n        return \"Pendle Chainlink-compatible Oracle\";\n    }\n\n    function version() external pure returns (uint256) {\n        return 1;\n    }\n\n    // =================================================================\n    //                          PRICING FUNCTIONS\n    // =================================================================\n\n    function _getPendleTokenPrice() internal view returns (int256) {\n        return _descalePrice(_getRawPendlePrice(IPMarket(market), twapDuration));\n    }\n\n    function _descalePrice(uint256 price) private view returns (int256 unwrappedPrice) {\n        return PMath.Int((price * fromTokenScale) / toTokenScale);\n    }\n\n    // =================================================================\n    //                          USE ONLY AT INITIALIZATION\n    // =================================================================\n\n    function _getRawPendlePriceFunc()\n        internal\n        view\n        returns (function(IPMarket, uint32) internal view returns (uint256))\n    {\n        if (baseOracleType == PendleOracleType.PT_TO_SY) {\n            return PendlePYOracleLib.getPtToSyRate;\n        } else if (baseOracleType == PendleOracleType.PT_TO_ASSET) {\n            return PendlePYOracleLib.getPtToAssetRate;\n        } else if (baseOracleType == PendleOracleType.LP_TO_SY) {\n            return PendleLpOracleLib.getLpToSyRate;\n        } else if (baseOracleType == PendleOracleType.LP_TO_ASSET) {\n            return PendleLpOracleLib.getLpToAssetRate;\n        } else {\n            revert(\"not supported\");\n        }\n    }\n\n    function _readDecimals(\n        address _market,\n        PendleOracleType _oracleType\n    ) internal view returns (uint8 _fromDecimals, uint8 _toDecimals) {\n        (IStandardizedYield SY, , ) = IPMarket(_market).readTokens();\n\n        uint8 syDecimals = SY.decimals();\n        (, , uint8 assetDecimals) = SY.assetInfo();\n\n        if (_oracleType == PendleOracleType.PT_TO_ASSET) {\n            return (assetDecimals, assetDecimals);\n        } else if (_oracleType == PendleOracleType.PT_TO_SY) {\n            return (assetDecimals, syDecimals);\n        } else if (_oracleType == PendleOracleType.LP_TO_ASSET) {\n            return (18, assetDecimals);\n        } else if (_oracleType == PendleOracleType.LP_TO_SY) {\n            return (18, syDecimals);\n        } else {\n            revert(\"not supported\");\n        }\n    }\n}\n"
    },
    "@pendle/core-v2/contracts/oracles/PtYtLpOracle/chainlink/PendleChainlinkOracleFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport \"./PendleChainlinkOracle.sol\";\nimport \"./PendleChainlinkOracleWithQuote.sol\";\nimport \"../../../interfaces/IPChainlinkOracleFactory.sol\";\nimport \"../../../interfaces/IPPYLpOracle.sol\";\n\ncontract PendleChainlinkOracleFactory is IPChainlinkOracleFactory {\n    error OracleAlreadyExists();\n\n    error OracleIncreaseCardinalityRequired(uint32 cardinalityRequired);\n    error OracleOldestObservationNotSatisfied();\n\n    // [keccak256(market, duration, baseOracleType)]\n    mapping(bytes32 oracleId => address oracleAddr) internal oracles;\n\n    // [keccak256(market, duration, baseOracleType, quoteOracle)]\n    mapping(bytes32 oracleId => address oracleAddr) internal oraclesWithQuote;\n\n    address public immutable pyLpOracle;\n\n    constructor(address _pyLpOracle) {\n        pyLpOracle = _pyLpOracle;\n    }\n\n    // =================================================================\n    //                          CREATE ORACLE\n    // =================================================================\n\n    function createOracle(\n        address market,\n        uint32 twapDuration,\n        PendleOracleType baseOracleType\n    ) external returns (address oracle) {\n        bytes32 oracleId = getOracleId(market, twapDuration, baseOracleType);\n        if (oracles[oracleId] != address(0)) revert OracleAlreadyExists();\n\n        checkMarketOracleState(market, twapDuration);\n\n        oracle = address(new PendleChainlinkOracle(market, twapDuration, baseOracleType));\n        oracles[oracleId] = oracle;\n        emit OracleCreated(market, twapDuration, baseOracleType, oracle, oracleId);\n    }\n\n    /**\n     * @dev quoteOracle must has Chainlink-compatible interface\n     */\n    function createOracleWithQuote(\n        address market,\n        uint32 twapDuration,\n        PendleOracleType baseOracleType,\n        address quoteOracle\n    ) external returns (address oracle) {\n        bytes32 oracleId = getOracleWithQuoteId(market, twapDuration, baseOracleType, quoteOracle);\n        if (oraclesWithQuote[oracleId] != address(0)) revert OracleAlreadyExists();\n\n        checkMarketOracleState(market, twapDuration);\n\n        oracle = address(new PendleChainlinkOracleWithQuote(market, twapDuration, baseOracleType, quoteOracle));\n        oraclesWithQuote[oracleId] = oracle;\n        emit OracleWithQuoteCreated(market, twapDuration, baseOracleType, quoteOracle, oracle, oracleId);\n    }\n\n    // =================================================================\n    //                          GET ORACLE\n    // =================================================================\n\n    function getOracle(\n        address market,\n        uint32 twapDuration,\n        PendleOracleType baseOracleType\n    ) public view returns (address) {\n        return oracles[getOracleId(market, twapDuration, baseOracleType)];\n    }\n\n    function getOracleWithQuote(\n        address market,\n        uint32 twapDuration,\n        PendleOracleType baseOracleType,\n        address quoteOracle\n    ) public view returns (address) {\n        return oraclesWithQuote[getOracleWithQuoteId(market, twapDuration, baseOracleType, quoteOracle)];\n    }\n\n    function getOracleId(\n        address market,\n        uint32 twapDuration,\n        PendleOracleType baseOracleType\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encode(market, twapDuration, baseOracleType));\n    }\n\n    function getOracleWithQuoteId(\n        address market,\n        uint32 twapDuration,\n        PendleOracleType baseOracleType,\n        address quoteOracle\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encode(market, twapDuration, baseOracleType, quoteOracle));\n    }\n\n    // =================================================================\n    //                          CHECK ORACLE STATE\n    // =================================================================\n\n    function checkMarketOracleState(address market, uint32 twapDuration) public view {\n        (bool increaseCardinalityRequired, uint32 cardinalityRequired, bool oldestObservationSatisfied) = IPPYLpOracle(\n            pyLpOracle\n        ).getOracleState(market, twapDuration);\n\n        if (increaseCardinalityRequired) {\n            // call IPMarket(market).increaseObservationsCardinalityNext(cardinalityRequired) then wait for twapDuration seconds\n            revert OracleIncreaseCardinalityRequired(cardinalityRequired);\n        }\n        if (!oldestObservationSatisfied) {\n            // wait for twapDuration seconds\n            revert OracleOldestObservationNotSatisfied();\n        }\n    }\n}\n"
    },
    "@pendle/core-v2/contracts/oracles/PtYtLpOracle/chainlink/PendleChainlinkOracleWithQuote.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport \"./PendleChainlinkOracle.sol\";\n\n/**\n * @dev The round data returned from this contract will follow:\n * - There will be only one round (roundId=0)\n * - startedAt=0, updatedAt=quoteOracle.updatedAt()\n */\ncontract PendleChainlinkOracleWithQuote is PendleChainlinkOracle {\n    // solhint-disable immutable-vars-naming\n    address public immutable quoteOracle;\n    int256 public immutable quoteScale;\n\n    constructor(\n        address _market,\n        uint32 _twapDuration,\n        PendleOracleType _baseOracleType,\n        address _quoteOracle\n    ) PendleChainlinkOracle(_market, _twapDuration, _baseOracleType) {\n        quoteOracle = _quoteOracle;\n        quoteScale = PMath.Int(10 ** AggregatorV3Interface(_quoteOracle).decimals());\n    }\n\n    /**\n     * @notice The round data returned from this contract will follow:\n     * - answer will satisfy 1 natural unit of PendleToken = (answer/1e18) natural unit of quoteToken\n     * - In other words, 10**(PendleToken.decimals) = (answer/1e18) * 10**(quoteToken.decimals)\n     * @return roundId always 0 for this contract\n     * @return answer The answer (in 18 decimals)\n     * @return startedAt always 0 for this contract\n     * @return updatedAt will be the same as quoteOracle.updatedAt()\n     * @return answeredInRound always 0 for this contract\n     */\n    function latestRoundData()\n        public\n        view\n        override\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n    {\n        (, int256 quoteAnswer, , uint256 quoteUpdatedAt, ) = AggregatorV3Interface(quoteOracle).latestRoundData();\n\n        roundId = 0;\n        answer = (_getPendleTokenPrice() * quoteAnswer) / quoteScale;\n        updatedAt = quoteUpdatedAt;\n        startedAt = 0;\n        answeredInRound = 0;\n    }\n}\n"
    },
    "@pendle/core-v2/contracts/oracles/PtYtLpOracle/PendleLpOracleLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport \"./PendlePYOracleLib.sol\";\n\nlibrary PendleLpOracleLib {\n    using PendlePYOracleLib for IPMarket;\n    using PMath for uint256;\n    using PMath for int256;\n    using MarketMathCore for MarketState;\n\n    /**\n      * This function returns the approximated twap rate LP/asset on market, but take into account the current rate of SY\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\n     * @param market market to get rate from\n     * @param duration twap duration\n     */\n    function getLpToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\n        (uint256 syIndex, uint256 pyIndex) = market.getSYandPYIndexCurrent();\n        uint256 lpToAssetRateRaw = _getLpToAssetRateRaw(market, duration, pyIndex);\n        if (syIndex >= pyIndex) {\n            return lpToAssetRateRaw;\n        } else {\n            return (lpToAssetRateRaw * syIndex) / pyIndex;\n        }\n    }\n\n    /**\n      * This function returns the approximated twap rate LP/asset on market, but take into account the current rate of SY\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\n     * @param market market to get rate from\n     * @param duration twap duration\n     */\n    function getLpToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\n        (uint256 syIndex, uint256 pyIndex) = market.getSYandPYIndexCurrent();\n        uint256 lpToAssetRateRaw = _getLpToAssetRateRaw(market, duration, pyIndex);\n        if (syIndex >= pyIndex) {\n            return lpToAssetRateRaw.divDown(syIndex);\n        } else {\n            return lpToAssetRateRaw.divDown(pyIndex);\n        }\n    }\n\n    function _getLpToAssetRateRaw(\n        IPMarket market,\n        uint32 duration,\n        uint256 pyIndex\n    ) private view returns (uint256 lpToAssetRateRaw) {\n        MarketState memory state = market.readState(address(0));\n\n        int256 totalHypotheticalAsset;\n        if (state.expiry <= block.timestamp) {\n            // 1 PT = 1 Asset post-expiry\n            totalHypotheticalAsset = state.totalPt + PYIndexLib.syToAsset(PYIndex.wrap(pyIndex), state.totalSy);\n        } else {\n            MarketPreCompute memory comp = state.getMarketPreCompute(PYIndex.wrap(pyIndex), block.timestamp);\n\n            (int256 rateOracle, int256 rateHypTrade) = _getPtRatesRaw(market, state, duration);\n            int256 cParam = LogExpMath.exp(comp.rateScalar.mulDown((rateOracle - comp.rateAnchor)));\n\n            int256 tradeSize = (cParam.mulDown(comp.totalAsset) - state.totalPt).divDown(\n                PMath.IONE + cParam.divDown(rateHypTrade)\n            );\n\n            totalHypotheticalAsset =\n                comp.totalAsset -\n                tradeSize.divDown(rateHypTrade) +\n                (state.totalPt + tradeSize).divDown(rateOracle);\n        }\n\n        lpToAssetRateRaw = totalHypotheticalAsset.divDown(state.totalLp).Uint();\n    }\n\n    function _getPtRatesRaw(\n        IPMarket market,\n        MarketState memory state,\n        uint32 duration\n    ) private view returns (int256 rateOracle, int256 rateHypTrade) {\n        uint256 lnImpliedRate = market.getMarketLnImpliedRate(duration);\n        uint256 timeToExpiry = state.expiry - block.timestamp;\n        rateOracle = MarketMathCore._getExchangeRateFromImpliedRate(lnImpliedRate, timeToExpiry);\n\n        int256 rateLastTrade = MarketMathCore._getExchangeRateFromImpliedRate(state.lastLnImpliedRate, timeToExpiry);\n        rateHypTrade = (rateLastTrade + rateOracle) / 2;\n    }\n}\n"
    },
    "@pendle/core-v2/contracts/oracles/PtYtLpOracle/PendlePYOracleLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IPMarket.sol\";\nimport \"../../core/libraries/math/PMath.sol\";\n\n// This library can & should be integrated directly for optimal gas usage.\n// If you prefer not to integrate it directly, the PendlePtOracle contract (a pre-deployed version of this contract) can be used.\nlibrary PendlePYOracleLib {\n    using PMath for uint256;\n    using PMath for int256;\n\n    /**\n     * This function returns the twap rate PT/Asset on market, but take into account the current rate of SY\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\n     * @param market market to get rate from\n     * @param duration twap duration\n     */\n    function getPtToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\n        if (syIndex >= pyIndex) {\n            return getPtToAssetRateRaw(market, duration);\n        } else {\n            return (getPtToAssetRateRaw(market, duration) * syIndex) / pyIndex;\n        }\n    }\n\n    /**\n     * This function returns the twap rate YT/Asset on market, but take into account the current rate of SY\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\n     * @param market market to get rate from\n     * @param duration twap duration\n     */\n    function getYtToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\n        if (syIndex >= pyIndex) {\n            return getYtToAssetRateRaw(market, duration);\n        } else {\n            return (getYtToAssetRateRaw(market, duration) * syIndex) / pyIndex;\n        }\n    }\n\n    /// @notice Similar to getPtToAsset but returns the rate in SY instead\n    function getPtToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\n        if (syIndex >= pyIndex) {\n            return getPtToAssetRateRaw(market, duration).divDown(syIndex);\n        } else {\n            return getPtToAssetRateRaw(market, duration).divDown(pyIndex);\n        }\n    }\n\n    /// @notice Similar to getPtToAsset but returns the rate in SY instead\n    function getYtToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\n        if (syIndex >= pyIndex) {\n            return getYtToAssetRateRaw(market, duration).divDown(syIndex);\n        } else {\n            return getYtToAssetRateRaw(market, duration).divDown(pyIndex);\n        }\n    }\n\n    /// @notice returns the raw rate without taking into account whether SY is solvent\n    function getPtToAssetRateRaw(IPMarket market, uint32 duration) internal view returns (uint256) {\n        uint256 expiry = market.expiry();\n\n        if (expiry <= block.timestamp) {\n            return PMath.ONE;\n        } else {\n            uint256 lnImpliedRate = getMarketLnImpliedRate(market, duration);\n            uint256 timeToExpiry = expiry - block.timestamp;\n            uint256 assetToPtRate = MarketMathCore._getExchangeRateFromImpliedRate(lnImpliedRate, timeToExpiry).Uint();\n            return PMath.ONE.divDown(assetToPtRate);\n        }\n    }\n\n    /// @notice returns the raw rate without taking into account whether SY is solvent\n    function getYtToAssetRateRaw(IPMarket market, uint32 duration) internal view returns (uint256) {\n        return PMath.ONE - getPtToAssetRateRaw(market, duration);\n    }\n\n    function getSYandPYIndexCurrent(IPMarket market) internal view returns (uint256 syIndex, uint256 pyIndex) {\n        (IStandardizedYield SY, , IPYieldToken YT) = market.readTokens();\n\n        syIndex = SY.exchangeRate();\n        uint256 pyIndexStored = YT.pyIndexStored();\n\n        if (YT.doCacheIndexSameBlock() && YT.pyIndexLastUpdatedBlock() == block.number) {\n            pyIndex = pyIndexStored;\n        } else {\n            pyIndex = PMath.max(syIndex, pyIndexStored);\n        }\n    }\n\n    function getMarketLnImpliedRate(IPMarket market, uint32 duration) internal view returns (uint256) {\n        if (duration == 0) {\n            (, , uint96 lnImpliedRate, , , ) = IPMarket(market)._storage();\n            return uint256(lnImpliedRate);\n        }\n\n        uint32[] memory durations = new uint32[](2);\n        durations[0] = duration;\n\n        uint216[] memory lnImpliedRateCumulative = market.observe(durations);\n        return (lnImpliedRateCumulative[1] - lnImpliedRateCumulative[0]) / duration;\n    }\n}\n"
    },
    "contracts/common/BasisPointConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nlibrary BasisPointConstants {\n  // Shared definitions of how we represent percentages and basis points\n  uint16 public constant ONE_BPS = 100; // 1 basis point with 2 decimals\n  uint32 public constant ONE_PERCENT_BPS = ONE_BPS * 100;\n  uint32 public constant ONE_HUNDRED_PERCENT_BPS = ONE_PERCENT_BPS * 100;\n}\n"
    },
    "contracts/common/Compare.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nlibrary Compare {\n  /**\n   * @dev Returns true if observed and expected differ by no more than the tolerance (absolute comparison).\n   *      This is useful for allowing small rounding differences (e.g., 1 wei) in balance deltas.\n   * @param observed The observed value (e.g., balance delta actually seen)\n   * @param expected The expected value\n   * @param tolerance The allowed absolute difference between observed and expected\n   */\n  function isWithinTolerance(uint256 observed, uint256 expected, uint256 tolerance) internal pure returns (bool) {\n    if (observed > expected) {\n      return observed - expected <= tolerance;\n    }\n    return expected - observed <= tolerance;\n  }\n\n  /**\n   * @dev Direction of expected balance change between two observations\n   */\n  enum BalanceDirection {\n    Increase,\n    Decrease\n  }\n\n  struct BalanceCheckResult {\n    bool directionOk;\n    uint256 observedDelta;\n    bool toleranceOk;\n  }\n\n  /**\n   * @dev Checks a balance change from before to after against an expected delta and tolerance.\n   *      This helper allows callers to keep custom error types local while sharing the core logic.\n   * @param beforeBalance The balance before the operation\n   * @param afterBalance The balance after the operation\n   * @param expectedDelta The expected absolute change amount\n   * @param tolerance The allowed absolute difference between observed and expected\n   * @param direction The expected direction of change (Increase or Decrease)\n   * @return result Struct containing: directionOk, observedDelta, toleranceOk\n   */\n  function checkBalanceDelta(\n    uint256 beforeBalance,\n    uint256 afterBalance,\n    uint256 expectedDelta,\n    uint256 tolerance,\n    BalanceDirection direction\n  ) internal pure returns (BalanceCheckResult memory result) {\n    if (direction == BalanceDirection.Increase) {\n      result.directionOk = afterBalance > beforeBalance;\n      if (result.directionOk) {\n        result.observedDelta = afterBalance - beforeBalance;\n      }\n    } else {\n      result.directionOk = afterBalance < beforeBalance;\n      if (result.directionOk) {\n        result.observedDelta = beforeBalance - afterBalance;\n      }\n    }\n\n    if (!result.directionOk) {\n      // Short-circuit: when direction is not satisfied, tolerance check is irrelevant\n      result.toleranceOk = false;\n      return result;\n    }\n\n    result.toleranceOk = isWithinTolerance(result.observedDelta, expectedDelta, tolerance);\n    return result;\n  }\n}\n"
    },
    "contracts/common/Erc20Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nlibrary Erc20Helper {\n  /**\n   * @dev Checks if a token is an ERC-20\n   * @param token Address of the token\n   * @return bool True if the token is an ERC-20, false otherwise\n   */\n  function isERC20(address token) internal view returns (bool) {\n    try ERC20(token).totalSupply() returns (uint256) {\n      try ERC20(token).balanceOf(address(this)) returns (uint256) {\n        return true;\n      } catch {\n        return false;\n      }\n    } catch {\n      return false;\n    }\n  }\n}\n"
    },
    "contracts/common/IAaveOracle.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\n/**\n * @title IPriceOracleGetter\n * @author Aave\n * @notice Interface for the Aave price oracle.\n */\ninterface IPriceOracleGetter {\n  /**\n   * @notice Returns the base currency address\n   * @dev Address 0x0 is reserved for USD as base currency.\n   * @return Returns the base currency address.\n   */\n  function BASE_CURRENCY() external view returns (address);\n\n  /**\n   * @notice Returns the base currency unit\n   * @dev 1 ether for ETH, 1e8 for USD.\n   * @return Returns the base currency unit.\n   */\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\n\n  /**\n   * @notice Returns the asset price in the base currency\n   * @param asset The address of the asset\n   * @return The price of the asset\n   */\n  function getAssetPrice(address asset) external view returns (uint256);\n}\n"
    },
    "contracts/common/IMintableERC20.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMintableERC20 is IERC20 {\n  function mint(address to, uint256 amount) external;\n\n  function burn(uint256 amount) external;\n\n  function burnFrom(address account, uint256 amount) external;\n\n  function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/common/RescuableVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ERC20, SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\n\n/**\n * @title RescuableVault\n * @dev A helper contract for rescuing tokens accidentally sent to the contract\n *      - The derived contract must implement the getRestrictedRescueTokens() function\n */\nabstract contract RescuableVault is Ownable, ReentrancyGuard {\n  using SafeERC20 for ERC20;\n\n  /* Virtual Methods - Required to be implemented by derived contracts */\n\n  /**\n   * @dev Gets the restricted rescue tokens\n   * @return address[] Restricted rescue tokens\n   */\n  function getRestrictedRescueTokens() public view virtual returns (address[] memory);\n\n  /* Rescue Functions */\n\n  /**\n   * @dev Rescues tokens accidentally sent to the contract (except for the collateral token and debt token)\n   * @param token Address of the token to rescue\n   * @param receiver Address to receive the rescued tokens\n   * @param amount Amount of tokens to rescue\n   */\n  function rescueToken(address token, address receiver, uint256 amount) public onlyOwner nonReentrant {\n    // The vault does not hold any debt token and collateral token, so it is not necessary to restrict the rescue of debt token and collateral token\n    // We can just rescue any ERC-20 token\n\n    address[] memory restrictedRescueTokens = getRestrictedRescueTokens();\n\n    // Check if the token is restricted\n    for (uint256 i = 0; i < restrictedRescueTokens.length; i++) {\n      if (token == restrictedRescueTokens[i]) {\n        revert(\"Cannot rescue restricted token\");\n      }\n    }\n\n    // Rescue the token\n    ERC20(token).safeTransfer(receiver, amount);\n  }\n}\n"
    },
    "contracts/common/SupportsWithdrawalFee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./BasisPointConstants.sol\";\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nerror InitialFeeExceedsMaxFee(uint256 feeBps, uint256 maxFeeBps);\nerror InvalidFeeBps(uint256 feeBps, uint256 maxFeeBps);\n\n// Note: FeeManagerCannotBeZeroAddress error can be handled by the consuming contract's AccessControl checks.\n\nabstract contract SupportsWithdrawalFee {\n  uint256 internal withdrawalFeeBps_;\n\n  event WithdrawalFee(address indexed owner, address indexed receiver, uint256 feeAmount);\n  event WithdrawalFeeSet(uint256 newFeeBps);\n\n  /**\n   * @notice Must be implemented by the inheriting contract to define its specific maximum withdrawal fee in BPS.\n   * @return The maximum withdrawal fee in basis points.\n   */\n  function _maxWithdrawalFeeBps() internal view virtual returns (uint256);\n\n  /**\n   * @notice Initialize the withdrawal fee during contract construction/initialization.\n   * @param initialFeeBps The initial withdrawal fee in basis points.\n   */\n  function _initializeWithdrawalFee(uint256 initialFeeBps) internal {\n    uint256 maxFee = _maxWithdrawalFeeBps();\n    if (initialFeeBps > maxFee) {\n      revert InitialFeeExceedsMaxFee(initialFeeBps, maxFee);\n    }\n    withdrawalFeeBps_ = initialFeeBps;\n    emit WithdrawalFeeSet(initialFeeBps);\n  }\n\n  /**\n   * @notice Set the withdrawal fee. Internal function to be called by the inheriting contract.\n   * @param newFeeBps The new withdrawal fee in basis points.\n   */\n  function _setWithdrawalFee(uint256 newFeeBps) internal {\n    uint256 maxFee = _maxWithdrawalFeeBps();\n    if (newFeeBps > maxFee) {\n      revert InvalidFeeBps(newFeeBps, maxFee);\n    }\n    withdrawalFeeBps_ = newFeeBps;\n    emit WithdrawalFeeSet(newFeeBps);\n  }\n\n  /**\n   * @notice Calculate the withdrawal fee for a given asset amount.\n   * @dev Uses precise division since fees stay in the vault (no external transfer).\n   * @param assetAmount The amount of assets being withdrawn.\n   * @return The fee amount in asset terms.\n   */\n  function _calculateWithdrawalFee(uint256 assetAmount) internal view returns (uint256) {\n    return Math.mulDiv(assetAmount, withdrawalFeeBps_, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS);\n  }\n\n  /**\n   * @notice Calculate the net amount after deducting withdrawal fees.\n   * Used for previewRedeem to show what the user will actually receive.\n   * @param grossAmount The gross amount before fees.\n   * @return The net amount after deducting fees.\n   */\n  function _getNetAmountAfterFee(uint256 grossAmount) internal view returns (uint256) {\n    uint256 fee = _calculateWithdrawalFee(grossAmount);\n    return grossAmount - fee;\n  }\n\n  /**\n   * @notice Calculate the gross amount required to achieve a desired net amount.\n   * Used for previewWithdraw to show how many shares are needed for a desired net withdrawal.\n   * @dev Uses precise division since fees stay in the vault.\n   * @param netAmount The desired net amount after fees.\n   * @return The gross amount required before fees.\n   */\n  function _getGrossAmountRequiredForNet(uint256 netAmount) internal view returns (uint256) {\n    if (withdrawalFeeBps_ == 0) {\n      return netAmount;\n    }\n    // grossAmount = netAmount / (1 - feeBps/ONE_HUNDRED_PERCENT_BPS)\n    // grossAmount = netAmount * ONE_HUNDRED_PERCENT_BPS / (ONE_HUNDRED_PERCENT_BPS - feeBps)\n    return\n      Math.mulDiv(netAmount, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS - withdrawalFeeBps_);\n  }\n\n  /**\n   * @notice Get the current withdrawal fee in basis points.\n   * @return The withdrawal fee in basis points.\n   */\n  function getWithdrawalFeeBps() public view returns (uint256) {\n    return withdrawalFeeBps_;\n  }\n}\n"
    },
    "contracts/common/SwappableVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\nimport { Compare } from \"contracts/common/Compare.sol\";\n\n/**\n * @title SwappableVault\n * @dev Base contract for swap functions\n *      - Need to implement the _swapExactOutputImplementation function\n *      - The wrapper function _swapExactOutput has some sanity checks\n */\nabstract contract SwappableVault {\n  error SpentInputTokenAmountGreaterThanAmountInMaximum(uint256 spentInputTokenAmount, uint256 amountInMaximum);\n  error ReceivedOutputTokenAmountNotEqualAmountOut(uint256 receivedOutputTokenAmount, uint256 amountOut);\n  error OutputTokenBalanceNotIncreasedAfterSwap(uint256 outputTokenBalanceBefore, uint256 outputTokenBalanceAfter);\n  error SpentInputTokenAmountNotEqualReturnedAmountIn(uint256 spentInputTokenAmount, uint256 returnedAmountIn);\n\n  uint256 public constant BALANCE_DIFF_TOLERANCE = 1;\n\n  /* Virtual functions */\n\n  /**\n   * @dev Swaps an exact amount of input assets for as much output assets as possible\n   * @param inputToken Input asset\n   * @param outputToken Output asset\n   * @param amountOut Amount of input assets\n   * @param amountInMaximum Minimum amount of output assets (slippage protection)\n   * @param receiver Address to receive the output assets\n   * @param deadline Deadline for the swap\n   * @param extraData Additional data for the swap\n   * @return amountIn Amount of input assets used for the swap\n   */\n  function _swapExactOutputImplementation(\n    ERC20 inputToken,\n    ERC20 outputToken,\n    uint256 amountOut,\n    uint256 amountInMaximum,\n    address receiver,\n    uint256 deadline,\n    bytes memory extraData\n  ) internal virtual returns (uint256);\n\n  /* Swap functions */\n\n  /**\n   * @dev A wrapper function for the _swapExactOutputImplementation function\n   *      - Add some sanity checks\n   * @param inputToken Input asset\n   * @param outputToken Output asset\n   * @param amountOut Amount of input assets\n   * @param amountInMaximum Minimum amount of output assets (slippage protection)\n   * @param receiver Address to receive the output assets\n   * @param deadline Deadline for the swap\n   * @param extraData Additional data for the swap\n   * @return amountIn Amount of input assets used for the swap\n   */\n  function _swapExactOutput(\n    ERC20 inputToken,\n    ERC20 outputToken,\n    uint256 amountOut,\n    uint256 amountInMaximum,\n    address receiver,\n    uint256 deadline,\n    bytes memory extraData\n  ) internal returns (uint256) {\n    uint256 inputTokenBalanceBefore = inputToken.balanceOf(address(this));\n    uint256 outputTokenBalanceBefore = outputToken.balanceOf(address(this));\n\n    // Perform the swap\n    uint256 amountIn = _swapExactOutputImplementation(inputToken, outputToken, amountOut, amountInMaximum, receiver, deadline, extraData);\n    uint256 inputTokenBalanceAfter = inputToken.balanceOf(address(this));\n    uint256 outputTokenBalanceAfter = outputToken.balanceOf(address(this));\n\n    // Input token: if decreased, ensure not over max and within tolerance of amountIn\n    {\n      Compare.BalanceCheckResult memory inCheck = Compare.checkBalanceDelta(\n        inputTokenBalanceBefore,\n        inputTokenBalanceAfter,\n        amountIn,\n        BALANCE_DIFF_TOLERANCE,\n        Compare.BalanceDirection.Decrease\n      );\n      if (inCheck.directionOk) {\n        // First check: ensure we don't spend more than the maximum allowed\n        if (inCheck.observedDelta > amountInMaximum) {\n          revert SpentInputTokenAmountGreaterThanAmountInMaximum(inCheck.observedDelta, amountInMaximum);\n        }\n        // Second check: ensure spent amount matches returned amount within tolerance\n        if (!inCheck.toleranceOk) {\n          revert SpentInputTokenAmountNotEqualReturnedAmountIn(inCheck.observedDelta, amountIn);\n        }\n      }\n      // If not decreased, no checks needed (not a risk for the caller)\n    }\n\n    // Output token: must increase and be within tolerance of amountOut\n    {\n      Compare.BalanceCheckResult memory outCheck = Compare.checkBalanceDelta(\n        outputTokenBalanceBefore,\n        outputTokenBalanceAfter,\n        amountOut,\n        BALANCE_DIFF_TOLERANCE,\n        Compare.BalanceDirection.Increase\n      );\n      if (!outCheck.directionOk) {\n        revert OutputTokenBalanceNotIncreasedAfterSwap(outputTokenBalanceBefore, outputTokenBalanceAfter);\n      }\n      if (!outCheck.toleranceOk) {\n        revert ReceivedOutputTokenAmountNotEqualAmountOut(outCheck.observedDelta, amountOut);\n      }\n    }\n\n    return amountIn;\n  }\n}\n"
    },
    "contracts/deth/AmoManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\";\nimport \"contracts/common/IMintableERC20.sol\";\nimport \"./CollateralVault.sol\";\nimport \"./OracleAware.sol\";\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n// Forward declaration interface for AmoVault instead of importing the full contract\ninterface IAmoVault {\n  function totalValue() external view returns (uint256);\n\n  function totalDstableValue() external view returns (uint256);\n\n  function totalCollateralValue() external view returns (uint256);\n\n  function withdrawTo(address recipient, uint256 amount, address asset) external;\n\n  function assetValueFromAmount(uint256 amount, address asset) external view returns (uint256);\n}\n\n/**\n * @title AmoManager\n * @dev Manages AMOs for dStable\n * Handles allocation, deallocation, collateral management, and profit management for AMO vaults.\n */\ncontract AmoManager is AccessControl, OracleAware, ReentrancyGuard {\n  using EnumerableMap for EnumerableMap.AddressToUintMap;\n\n  /* Core state */\n\n  EnumerableMap.AddressToUintMap private _amoVaults;\n  // Separate map to track whether a vault is considered active. This decouples\n  // allocation bookkeeping (which may change when moving collateral) from the\n  // governance‐controlled active status of a vault.\n  mapping(address => bool) private _isAmoActive;\n  uint256 public totalAllocated;\n  IMintableERC20 public dstable;\n  CollateralVault public collateralHolderVault;\n\n  /* Events */\n\n  event AmoVaultSet(address indexed amoVault, bool isActive);\n  event AmoAllocated(address indexed amoVault, uint256 dstableAmount);\n  event AmoDeallocated(address indexed amoVault, uint256 dstableAmount);\n  event ProfitsWithdrawn(address indexed amoVault, uint256 amount);\n  event AllocationSurplus(address indexed amoVault, uint256 surplusInDstable);\n\n  /* Roles */\n\n  bytes32 public constant AMO_ALLOCATOR_ROLE = keccak256(\"AMO_ALLOCATOR_ROLE\");\n  bytes32 public constant FEE_COLLECTOR_ROLE = keccak256(\"FEE_COLLECTOR_ROLE\");\n\n  /* Errors */\n\n  error InactiveAmoVault(address amoVault);\n  error AmoSupplyInvariantViolation(uint256 startingSupply, uint256 endingSupply);\n  error AmoVaultAlreadyEnabled(address amoVault);\n  error CannotTransferDStable();\n  error InsufficientProfits(uint256 takeProfitValueInBase, int256 availableProfitInBase);\n  error InsufficientAllocation(uint256 requested, uint256 available);\n\n  /**\n   * @notice Initializes the AmoManager contract.\n   * @param _dstable The address of the dStable stablecoin.\n   * @param _collateralHolderVault The address of the collateral holder vault.\n   * @param _oracle The oracle for price feeds.\n   */\n  constructor(\n    address _dstable,\n    address _collateralHolderVault,\n    IPriceOracleGetter _oracle\n  ) OracleAware(_oracle, _oracle.BASE_CURRENCY_UNIT()) {\n    dstable = IMintableERC20(_dstable);\n    collateralHolderVault = CollateralVault(_collateralHolderVault);\n\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    grantRole(AMO_ALLOCATOR_ROLE, msg.sender);\n    grantRole(FEE_COLLECTOR_ROLE, msg.sender);\n  }\n\n  /* AMO */\n\n  /**\n   * @notice Allocates AMO tokens to an AMO vault.\n   * @param amoVault The address of the AMO vault.\n   * @param dstableAmount The amount of dStable to allocate.\n   */\n  function allocateAmo(address amoVault, uint256 dstableAmount) public onlyRole(AMO_ALLOCATOR_ROLE) nonReentrant {\n    uint256 startingAmoSupply = totalAmoSupply();\n\n    // Make sure the vault is active\n    if (!isAmoActive(amoVault)) {\n      revert InactiveAmoVault(amoVault);\n    }\n\n    // Update the allocation for this vault\n    (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\n    _amoVaults.set(amoVault, currentAllocation + dstableAmount);\n\n    // Make the deposit\n    totalAllocated += dstableAmount;\n    dstable.transfer(amoVault, dstableAmount);\n\n    // Check invariants\n    uint256 endingAmoSupply = totalAmoSupply();\n    if (endingAmoSupply != startingAmoSupply) {\n      revert AmoSupplyInvariantViolation(startingAmoSupply, endingAmoSupply);\n    }\n\n    emit AmoAllocated(amoVault, dstableAmount);\n  }\n\n  /**\n   * @notice Deallocates AMO tokens from an AMO vault.\n   * @param amoVault The address of the AMO vault.\n   * @param dstableAmount The amount of dStable to deallocate.\n   */\n  function deallocateAmo(address amoVault, uint256 dstableAmount) public onlyRole(AMO_ALLOCATOR_ROLE) nonReentrant {\n    uint256 startingAmoSupply = totalAmoSupply();\n\n    // We don't require that the vault is active or has allocation, since we want to allow withdrawing from inactive vaults\n\n    // If the vault is still active, make sure it has enough allocation and decrease it\n    (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\n\n    // Ensure we do not deallocate more than the vault's recorded allocation\n    if (dstableAmount > currentAllocation) {\n      revert InsufficientAllocation(dstableAmount, currentAllocation);\n    }\n\n    // Update the allocation for this vault (safe: dstableAmount <= currentAllocation)\n    _amoVaults.set(amoVault, currentAllocation - dstableAmount);\n\n    // Make the withdrawal and update global counter\n    totalAllocated -= dstableAmount;\n    dstable.transferFrom(amoVault, address(this), dstableAmount);\n\n    // Check invariants\n    uint256 endingAmoSupply = totalAmoSupply();\n    if (endingAmoSupply != startingAmoSupply) {\n      revert AmoSupplyInvariantViolation(startingAmoSupply, endingAmoSupply);\n    }\n\n    emit AmoDeallocated(amoVault, dstableAmount);\n  }\n\n  /**\n   * @notice Returns the total AMO supply.\n   * @return The total AMO supply.\n   */\n  function totalAmoSupply() public view returns (uint256) {\n    uint256 freeBalance = dstable.balanceOf(address(this));\n    return freeBalance + totalAllocated;\n  }\n\n  /**\n   * @notice Decreases the AMO supply by burning dStable.\n   * @param dstableAmount The amount of dStable to burn.\n   */\n  function decreaseAmoSupply(uint256 dstableAmount) public onlyRole(AMO_ALLOCATOR_ROLE) {\n    dstable.burn(dstableAmount);\n  }\n\n  /**\n   * @notice Checks if an AMO vault is active.\n   * @param amoVault The address of the AMO vault to check.\n   * @return True if the AMO vault is active, false otherwise.\n   */\n  function isAmoActive(address amoVault) public view returns (bool) {\n    return _isAmoActive[amoVault];\n  }\n\n  /**\n   * @notice Returns the allocation for a specific AMO vault.\n   * @param amoVault The address of the AMO vault.\n   * @return The current allocation for the vault.\n   */\n  function amoVaultAllocation(address amoVault) public view returns (uint256) {\n    (bool exists, uint256 allocation) = _amoVaults.tryGet(amoVault);\n    return exists ? allocation : 0;\n  }\n\n  /**\n   * @notice Returns the list of all AMO vaults.\n   * @return The list of AMO vault addresses.\n   */\n  function amoVaults() public view returns (address[] memory) {\n    return _amoVaults.keys();\n  }\n\n  /**\n   * @notice Enables an AMO vault.\n   * @param amoVault The address of the AMO vault.\n   */\n  function enableAmoVault(address amoVault) public onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_isAmoActive[amoVault]) {\n      revert AmoVaultAlreadyEnabled(amoVault);\n    }\n    // Ensure the vault is tracked in the allocation map (initial allocation may be zero)\n    (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\n    _amoVaults.set(amoVault, currentAllocation);\n    _isAmoActive[amoVault] = true;\n    emit AmoVaultSet(amoVault, true);\n  }\n\n  /**\n   * @notice Disables an AMO vault.\n   * @param amoVault The address of the AMO vault.\n   */\n  function disableAmoVault(address amoVault) public onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (!_isAmoActive[amoVault]) {\n      revert InactiveAmoVault(amoVault);\n    }\n    _isAmoActive[amoVault] = false;\n    emit AmoVaultSet(amoVault, false);\n  }\n\n  /* Collateral Management */\n\n  /**\n   * @notice Returns the total collateral value of all active AMO vaults.\n   * @return The total collateral value in base value.\n   */\n  function totalCollateralValue() public view returns (uint256) {\n    uint256 totalBaseValue = 0;\n    for (uint256 i = 0; i < _amoVaults.length(); i++) {\n      (address vaultAddress, ) = _amoVaults.at(i);\n      if (isAmoActive(vaultAddress)) {\n        totalBaseValue += IAmoVault(vaultAddress).totalCollateralValue();\n      }\n    }\n    return totalBaseValue;\n  }\n\n  /**\n   * @notice Transfers collateral from an AMO vault to the holding vault.\n   * @param amoVault The address of the AMO vault.\n   * @param token The address of the collateral token to transfer.\n   * @param amount The amount of collateral to transfer.\n   */\n  function transferFromAmoVaultToHoldingVault(\n    address amoVault,\n    address token,\n    uint256 amount\n  ) public onlyRole(AMO_ALLOCATOR_ROLE) nonReentrant {\n    if (token == address(dstable)) {\n      revert CannotTransferDStable();\n    }\n\n    // Update allocation\n    // A note on why we modify AMO allocation when we withdraw collateral:\n    // 1. When dStable AMO enters the AMO vault, the dStable is initially unbacked\n    // 2. Over time the AMO vault accrues collateral in exchange for distributing dStable\n    // 3. We may be able to make better use of that collateral in a different collateral vault\n    // 4. So we transfer the collateral out of the AMO vault, but at that point the dStable that\n    //    converted to that collateral is now free-floating and fully backed\n    // 5. Thus we decrement the AMO allocation to reflect the fact that the dStable is no longer\n    //    unbacked, but is actually fully backed and circulating\n    uint256 collateralBaseValue = collateralHolderVault.assetValueFromAmount(amount, token);\n    uint256 collateralInDstable = baseValueToDstableAmount(collateralBaseValue);\n    (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\n\n    uint256 adjustmentAmount = collateralInDstable;\n    if (collateralInDstable > currentAllocation) {\n      // Emit event to explicitly record the surplus that improves backing\n      uint256 surplus = collateralInDstable - currentAllocation;\n      emit AllocationSurplus(amoVault, surplus);\n\n      // Cap the adjustment to the current allocation to prevent underflow\n      adjustmentAmount = currentAllocation;\n    }\n\n    // Bookkeeping: adjust the vault's allocation. This does NOT change the vault's active status.\n    _amoVaults.set(amoVault, currentAllocation - adjustmentAmount);\n    totalAllocated -= adjustmentAmount;\n\n    // Transfer the collateral\n    IAmoVault(amoVault).withdrawTo(address(collateralHolderVault), amount, token);\n  }\n\n  /**\n   * @notice Transfers collateral from the holding vault to an AMO vault.\n   * @param amoVault The address of the AMO vault.\n   * @param token The address of the collateral token to transfer.\n   * @param amount The amount of collateral to transfer.\n   */\n  function transferFromHoldingVaultToAmoVault(\n    address amoVault,\n    address token,\n    uint256 amount\n  ) public onlyRole(AMO_ALLOCATOR_ROLE) nonReentrant {\n    if (token == address(dstable)) {\n      revert CannotTransferDStable();\n    }\n    if (!_isAmoActive[amoVault]) {\n      revert InactiveAmoVault(amoVault);\n    }\n\n    // Update allocation\n    // A note on why we modify AMO allocation when we deposit collateral:\n    // 1. When we deposit collateral, it can be used to buy back dStable\n    // 2. When we buy back dStable, the dStable is now unbacked (a redemption)\n    // 3. Thus any collateral deposited to an AMO vault can create unbacked dStable,\n    //    which means the AMO allocation for that vault must be increased to reflect this\n    uint256 collateralBaseValue = collateralHolderVault.assetValueFromAmount(amount, token);\n    uint256 collateralInDstable = baseValueToDstableAmount(collateralBaseValue);\n    (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\n    _amoVaults.set(amoVault, currentAllocation + collateralInDstable);\n    totalAllocated += collateralInDstable;\n\n    // Transfer the collateral\n    collateralHolderVault.withdrawTo(amoVault, amount, token);\n  }\n\n  /* Profit Management */\n\n  /**\n   * @notice Returns the available profit for a specific vault in base value (e.g., the underlying).\n   * @param vaultAddress The address of the AMO vault to check.\n   * @return The available profit in base (can be negative).\n   */\n  function availableVaultProfitsInBase(address vaultAddress) public view returns (int256) {\n    uint256 totalVaultValueInBase = IAmoVault(vaultAddress).totalValue();\n    uint256 allocatedDstable = amoVaultAllocation(vaultAddress);\n    uint256 allocatedValueInBase = dstableAmountToBaseValue(allocatedDstable);\n\n    return int256(totalVaultValueInBase) - int256(allocatedValueInBase);\n  }\n\n  /**\n   * @notice Withdraws profits from an AMO vault to a recipient.\n   * @param amoVault The AMO vault from which to withdraw profits.\n   * @param recipient The address to receive the profits.\n   * @param takeProfitToken The collateral token to withdraw.\n   * @param takeProfitAmount The amount of collateral to withdraw.\n   * @return takeProfitValueInBase The value of the withdrawn profits in base.\n   */\n  function withdrawProfits(\n    IAmoVault amoVault,\n    address recipient,\n    address takeProfitToken,\n    uint256 takeProfitAmount\n  ) public onlyRole(FEE_COLLECTOR_ROLE) nonReentrant returns (uint256 takeProfitValueInBase) {\n    // Leave open the possibility of withdrawing profits from inactive vaults\n\n    takeProfitValueInBase = amoVault.assetValueFromAmount(takeProfitAmount, takeProfitToken);\n\n    int256 _availableProfitInBase = availableVaultProfitsInBase(address(amoVault));\n\n    // Make sure we are withdrawing less than the available profit\n    //\n    // TECHNICAL NOTE:\n    // `takeProfitValueInBase` is a `uint256` while `_availableProfitInBase` is an `int256`.\n    // The explicit cast below will wrap if `takeProfitValueInBase` exceeds\n    // `type(int256).max` (≈ 5.8e76), causing the comparison to evaluate to `false`.\n    // Such a value is unachievable on-chain and the function is restricted to the\n    // trusted `FEE_COLLECTOR_ROLE`, so the edge-case is not considered a practical\n    // risk.\n    if (_availableProfitInBase <= 0 || int256(takeProfitValueInBase) > _availableProfitInBase) {\n      revert InsufficientProfits(takeProfitValueInBase, _availableProfitInBase);\n    }\n\n    // Withdraw profits from the vault\n    amoVault.withdrawTo(recipient, takeProfitAmount, takeProfitToken);\n\n    emit ProfitsWithdrawn(address(amoVault), takeProfitValueInBase);\n\n    return takeProfitValueInBase;\n  }\n\n  /**\n   * @notice Returns the total available profit across all AMO vaults in base.\n   * @return The total available profit in base.\n   */\n  function availableProfitInBase() public view returns (int256) {\n    int256 totalProfit = 0;\n\n    // Iterate through all AMO vaults\n    for (uint256 i = 0; i < _amoVaults.length(); i++) {\n      (address vaultAddress, ) = _amoVaults.at(i);\n\n      if (isAmoActive(vaultAddress)) {\n        totalProfit += availableVaultProfitsInBase(vaultAddress);\n      }\n    }\n\n    return totalProfit;\n  }\n\n  /* Utility */\n\n  /**\n   * @notice Converts a base value to an equivalent amount of dStable tokens.\n   * @param baseValue The amount of base value to convert.\n   * @return The equivalent amount of dStable tokens.\n   */\n  function baseValueToDstableAmount(uint256 baseValue) public view returns (uint256) {\n    uint8 dstableDecimals = dstable.decimals();\n    // Align valuation with Issuer/Redeemer: assume 1 dStable == baseCurrencyUnit\n    return Math.mulDiv(baseValue, 10 ** dstableDecimals, baseCurrencyUnit);\n  }\n\n  /**\n   * @notice Converts an amount of dStable tokens to an equivalent base value.\n   * @param dstableAmount The amount of dStable tokens to convert.\n   * @return The equivalent amount of base value.\n   */\n  function dstableAmountToBaseValue(uint256 dstableAmount) public view returns (uint256) {\n    uint8 dstableDecimals = dstable.decimals();\n    // Align valuation with Issuer/Redeemer: assume 1 dStable == baseCurrencyUnit\n    return Math.mulDiv(dstableAmount, baseCurrencyUnit, 10 ** dstableDecimals);\n  }\n\n  /* Admin */\n\n  /**\n   * @notice Sets the collateral vault address\n   * @param _collateralVault The address of the new collateral vault\n   */\n  function setCollateralVault(address _collateralVault) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    collateralHolderVault = CollateralVault(_collateralVault);\n  }\n}\n\n/**\n * @title ICollateralSum\n * @dev Interface for contracts that can provide total collateral value.\n */\ninterface ICollateralSum {\n  /**\n   * @notice Returns the total collateral value of the implementing contract.\n   * @return The total collateral value in base value.\n   */\n  function totalCollateralValue() external view returns (uint256);\n}\n"
    },
    "contracts/deth/AmoVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"contracts/common/IMintableERC20.sol\";\nimport \"./AmoManager.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"contracts/deth/CollateralVault.sol\";\n\ninterface IRecoverable {\n  function recoverERC20(address token, address to, uint256 amount) external;\n\n  function recoverETH(address to, uint256 amount) external;\n}\n\n/**\n * @title AmoVault\n * @notice Base contract for AMO (Algorithmic Market Operations) vaults that manage dStable and collateral assets\n */\nabstract contract AmoVault is CollateralVault, IRecoverable, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using SafeERC20 for IMintableERC20;\n  using Address for address payable;\n\n  /* Core state */\n\n  IMintableERC20 public immutable dstable;\n  uint8 public immutable dstableDecimals;\n  AmoManager public amoManager;\n\n  /* Roles */\n\n  bytes32 public constant RECOVERER_ROLE = keccak256(\"RECOVERER_ROLE\");\n\n  /* Errors */\n\n  error CannotRecoverVaultToken(address token);\n  error InvalidAmoManager();\n\n  constructor(\n    address _dstable,\n    address _amoManager,\n    address _admin,\n    address _collateralWithdrawer,\n    address _recoverer,\n    IPriceOracleGetter _oracle\n  ) CollateralVault(_oracle) {\n    dstable = IMintableERC20(_dstable);\n    dstableDecimals = IERC20Metadata(_dstable).decimals();\n    amoManager = AmoManager(_amoManager);\n    _grantRole(DEFAULT_ADMIN_ROLE, _admin);\n    grantRole(COLLATERAL_WITHDRAWER_ROLE, _collateralWithdrawer);\n    grantRole(RECOVERER_ROLE, _recoverer);\n    // Use standard approve for trusted protocol token (dStable) and trusted protocol contract (AmoManager)\n    dstable.approve(address(amoManager), type(uint256).max);\n  }\n\n  /**\n   * @notice Approves the AmoManager to spend dStable on behalf of this contract\n   * @dev Only callable by the contract owner or an account with the DEFAULT_ADMIN_ROLE\n   */\n  function approveAmoManager() public onlyRole(DEFAULT_ADMIN_ROLE) {\n    dstable.forceApprove(address(amoManager), type(uint256).max);\n  }\n\n  /**\n   * @notice Updates the dStable allowance granted to the current AmoManager\n   * @dev Resets the existing allowance to 0 first to accommodate non-standard ERC20 tokens that require\n   *      the allowance to be set to zero before changing it.\n   * @param amount The new allowance amount to grant.\n   */\n  function setAmoManagerApproval(uint256 amount) public onlyRole(DEFAULT_ADMIN_ROLE) {\n    // Reset to zero first for safety with tokens that enforce the ERC20 race-condition mitigation\n    // Use standard approve for trusted protocol token (dStable) and trusted protocol contract (AmoManager)\n    dstable.approve(address(amoManager), 0);\n    dstable.approve(address(amoManager), amount);\n  }\n\n  /**\n   * @notice Sets a new AmoManager address\n   * @param _newAmoManager The address of the new AmoManager\n   * @dev Only callable by an account with the DEFAULT_ADMIN_ROLE\n   */\n  function setAmoManager(address _newAmoManager) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_newAmoManager == address(0)) revert InvalidAmoManager();\n\n    // Revoke allowance from the previous AmoManager to prevent it from spending vault funds\n    // Use standard approve for trusted protocol token (dStable) and trusted protocol contract (AmoManager)\n    dstable.approve(address(amoManager), 0);\n\n    // Set new AMO manager\n    amoManager = AmoManager(_newAmoManager);\n\n    // Approve new AMO manager\n    approveAmoManager();\n  }\n\n  /* Recovery */\n\n  /**\n   * @notice Recovers ERC20 tokens accidentally sent to the contract\n   * @param token The address of the token to recover\n   * @param to The address to send the tokens to\n   * @param amount The amount of tokens to recover\n   */\n  function recoverERC20(address token, address to, uint256 amount) external onlyRole(RECOVERER_ROLE) nonReentrant {\n    if (token == address(dstable) || isCollateralSupported(token)) {\n      revert CannotRecoverVaultToken(token);\n    }\n    IERC20(token).safeTransfer(to, amount);\n  }\n\n  /**\n   * @notice Recovers ETH accidentally sent to the contract\n   * @param to The address to send the ETH to\n   * @param amount The amount of ETH to recover\n   */\n  function recoverETH(address to, uint256 amount) external onlyRole(RECOVERER_ROLE) {\n    payable(to).sendValue(amount);\n  }\n\n  /* Virtual functions */\n\n  /**\n   * @notice Calculates the total value of non-dStable collateral assets in the vault\n   * @return The total value of collateral assets denominated in the base currency\n   * @dev Must be implemented by derived contracts\n   */\n  function totalCollateralValue() public view virtual returns (uint256);\n\n  /**\n   * @notice Calculates the total value of dStable holdings in the vault\n   * @return The total value of dStable holdings denominated in the base currency\n   * @dev Must be implemented by derived contracts\n   */\n  function totalDstableValue() public view virtual returns (uint256);\n}\n"
    },
    "contracts/deth/CollateralHolderVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"./CollateralVault.sol\";\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @title CollateralHolderVault\n * @notice Implementation of CollateralVault for only holding tokens\n */\ncontract CollateralHolderVault is CollateralVault {\n  using SafeERC20 for IERC20Metadata;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  /* Errors */\n  error CannotWithdrawMoreValueThanDeposited(uint256 requestedAmount, uint256 maxAmount);\n  error ToCollateralAmountBelowMin(uint256 toCollateralAmount, uint256 toMinCollateral);\n\n  constructor(IPriceOracleGetter oracle) CollateralVault(oracle) {}\n\n  /**\n   * @notice Exchanges one type of collateral for another\n   * @param fromCollateralAmount Amount of collateral to exchange from\n   * @param fromCollateral Address of the source collateral token\n   * @param toCollateralAmount Amount of collateral to receive\n   * @param toCollateral Address of the destination collateral token\n   * @dev Ensures the exchange maintains equivalent value using oracle prices\n   */\n  function exchangeCollateral(\n    uint256 fromCollateralAmount,\n    address fromCollateral,\n    uint256 toCollateralAmount,\n    address toCollateral\n  ) public onlyRole(COLLATERAL_STRATEGY_ROLE) {\n    // The collateral being received by the vault (fromCollateral) must still be supported\n    // `toCollateral` may have been de-listed (disallowed) in order to let the vault gradually\n    // swap it out, so we intentionally do NOT enforce the check on `toCollateral`.\n    require(_supportedCollaterals.contains(fromCollateral), \"Unsupported collateral\");\n    uint256 maxAmount = maxExchangeAmount(fromCollateralAmount, fromCollateral, toCollateral);\n    if (toCollateralAmount > maxAmount) {\n      revert CannotWithdrawMoreValueThanDeposited(toCollateralAmount, maxAmount);\n    }\n\n    IERC20Metadata(fromCollateral).safeTransferFrom(msg.sender, address(this), fromCollateralAmount);\n    IERC20Metadata(toCollateral).safeTransfer(msg.sender, toCollateralAmount);\n  }\n\n  /**\n   * @notice Exchanges collateral for the maximum possible amount of another collateral\n   * @param fromCollateralAmount Amount of collateral to exchange from\n   * @param fromCollateral Address of the source collateral token\n   * @param toCollateral Address of the destination collateral token\n   * @param toMinCollateral Minimum amount of destination collateral to receive\n   * @dev Calculates and executes the maximum possible exchange while respecting minimum amount\n   */\n  function exchangeMaxCollateral(\n    uint256 fromCollateralAmount,\n    address fromCollateral,\n    address toCollateral,\n    uint256 toMinCollateral\n  ) public onlyRole(COLLATERAL_STRATEGY_ROLE) {\n    uint256 toCollateralAmount = maxExchangeAmount(fromCollateralAmount, fromCollateral, toCollateral);\n    if (toCollateralAmount < toMinCollateral) {\n      revert ToCollateralAmountBelowMin(toCollateralAmount, toMinCollateral);\n    }\n    exchangeCollateral(fromCollateralAmount, fromCollateral, toCollateralAmount, toCollateral);\n  }\n\n  /**\n   * @notice Calculates the maximum amount of destination collateral that can be received\n   * @param fromCollateralAmount Amount of source collateral\n   * @param fromCollateral Address of the source collateral token\n   * @param toCollateral Address of the destination collateral token\n   * @return toCollateralAmount The maximum amount of destination collateral that can be received\n   * @dev Uses oracle prices and token decimals to maintain equivalent value\n   */\n  function maxExchangeAmount(\n    uint256 fromCollateralAmount,\n    address fromCollateral,\n    address toCollateral\n  ) public view returns (uint256 toCollateralAmount) {\n    uint256 fromCollateralPrice = oracle.getAssetPrice(fromCollateral);\n    uint256 toCollateralPrice = oracle.getAssetPrice(toCollateral);\n\n    uint8 fromCollateralDecimals = IERC20Metadata(fromCollateral).decimals();\n    uint8 toCollateralDecimals = IERC20Metadata(toCollateral).decimals();\n\n    uint256 fromCollateralBaseValue = Math.mulDiv(fromCollateralPrice, fromCollateralAmount, 10 ** fromCollateralDecimals);\n\n    toCollateralAmount = Math.mulDiv(fromCollateralBaseValue, 10 ** toCollateralDecimals, toCollateralPrice);\n\n    return toCollateralAmount;\n  }\n\n  /**\n   * @notice Calculates the total value of all collateral in the vault\n   * @return baseValue The total value of all collateral in base\n   */\n  function totalValue() public view override returns (uint256 baseValue) {\n    return _totalValueOfSupportedCollaterals();\n  }\n}\n"
    },
    "contracts/deth/CollateralVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"contracts/common/IAaveOracle.sol\";\nimport \"./OracleAware.sol\";\n\n/**\n * @title CollateralVault\n * @notice Abstract contract for any contract that manages collateral assets\n\\ */\nabstract contract CollateralVault is AccessControl, OracleAware {\n  using SafeERC20 for IERC20Metadata;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  /* Core state */\n\n  EnumerableSet.AddressSet internal _supportedCollaterals;\n\n  /* Events */\n\n  event CollateralAllowed(address indexed collateralAsset);\n  event CollateralDisallowed(address indexed collateralAsset);\n\n  /* Roles */\n\n  bytes32 public constant COLLATERAL_MANAGER_ROLE = keccak256(\"COLLATERAL_MANAGER_ROLE\");\n  bytes32 public constant COLLATERAL_STRATEGY_ROLE = keccak256(\"COLLATERAL_STRATEGY_ROLE\");\n  bytes32 public constant COLLATERAL_WITHDRAWER_ROLE = keccak256(\"COLLATERAL_WITHDRAWER_ROLE\");\n\n  /* Errors */\n  error UnsupportedCollateral(address collateralAsset);\n  error CollateralAlreadyAllowed(address collateralAsset);\n  error NoOracleSupport(address collateralAsset);\n  error FailedToAddCollateral(address collateralAsset);\n  error CollateralNotSupported(address collateralAsset);\n  error MustSupportAtLeastOneCollateral();\n  error FailedToRemoveCollateral(address collateralAsset);\n\n  /**\n   * @notice Initializes the vault with an oracle and sets up initial roles\n   * @dev Grants all roles to the contract deployer initially\n   * @param oracle The price oracle to use for collateral valuation\n   */\n  constructor(IPriceOracleGetter oracle) OracleAware(oracle, oracle.BASE_CURRENCY_UNIT()) {\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender); // This is the super admin\n    grantRole(COLLATERAL_MANAGER_ROLE, msg.sender);\n    grantRole(COLLATERAL_WITHDRAWER_ROLE, msg.sender);\n    grantRole(COLLATERAL_STRATEGY_ROLE, msg.sender);\n  }\n\n  /* Deposit */\n\n  /**\n   * @notice Deposit collateral into the vault\n   * @param collateralAmount The amount of collateral to deposit\n   * @param collateralAsset The address of the collateral asset\n   */\n  function deposit(uint256 collateralAmount, address collateralAsset) public {\n    if (!_supportedCollaterals.contains(collateralAsset)) {\n      revert UnsupportedCollateral(collateralAsset);\n    }\n\n    IERC20Metadata(collateralAsset).safeTransferFrom(msg.sender, address(this), collateralAmount);\n  }\n\n  /* Withdrawal */\n\n  /**\n   * @notice Withdraws collateral from the vault\n   * @param collateralAmount The amount of collateral to withdraw\n   * @param collateralAsset The address of the collateral asset\n   */\n  function withdraw(uint256 collateralAmount, address collateralAsset) public onlyRole(COLLATERAL_WITHDRAWER_ROLE) {\n    return _withdraw(msg.sender, collateralAmount, collateralAsset);\n  }\n\n  /**\n   * @notice Withdraws collateral from the vault to a specific address\n   * @param recipient The address receiving the collateral\n   * @param collateralAmount The amount of collateral to withdraw\n   * @param collateralAsset The address of the collateral asset\n   */\n  function withdrawTo(address recipient, uint256 collateralAmount, address collateralAsset) public onlyRole(COLLATERAL_WITHDRAWER_ROLE) {\n    return _withdraw(recipient, collateralAmount, collateralAsset);\n  }\n\n  /**\n   * @notice Internal function to withdraw collateral from the vault\n   * @param withdrawer The address withdrawing the collateral\n   * @param collateralAmount The amount of collateral to withdraw\n   * @param collateralAsset The address of the collateral asset\n   */\n  function _withdraw(address withdrawer, uint256 collateralAmount, address collateralAsset) internal {\n    IERC20Metadata(collateralAsset).safeTransfer(withdrawer, collateralAmount);\n  }\n\n  /* Collateral Info */\n\n  /**\n   * @notice Calculates the total value of all assets in the vault\n   * @return baseValue The total value of all assets in base\n   */\n  function totalValue() public view virtual returns (uint256 baseValue);\n\n  /**\n   * @notice Calculates the base value of a given amount of an asset\n   * @param assetAmount The amount of the asset\n   * @param asset The address of the asset\n   * @return baseValue The base value of the asset\n   */\n  function assetValueFromAmount(uint256 assetAmount, address asset) public view returns (uint256 baseValue) {\n    uint256 assetPrice = oracle.getAssetPrice(asset);\n    uint8 assetDecimals = IERC20Metadata(asset).decimals();\n    return Math.mulDiv(assetPrice, assetAmount, 10 ** assetDecimals);\n  }\n\n  /**\n   * @notice Calculates the amount of an asset that corresponds to a given base value\n   * @param baseValue The base value\n   * @param asset The address of the asset\n   * @return assetAmount The amount of the asset\n   */\n  function assetAmountFromValue(uint256 baseValue, address asset) public view returns (uint256 assetAmount) {\n    uint256 assetPrice = oracle.getAssetPrice(asset);\n    uint8 assetDecimals = IERC20Metadata(asset).decimals();\n    return Math.mulDiv(baseValue, 10 ** assetDecimals, assetPrice);\n  }\n\n  /* Collateral management */\n\n  /**\n   * @notice Allows a new collateral asset\n   * @param collateralAsset The address of the collateral asset\n   */\n  function allowCollateral(address collateralAsset) public onlyRole(COLLATERAL_MANAGER_ROLE) {\n    if (_supportedCollaterals.contains(collateralAsset)) {\n      revert CollateralAlreadyAllowed(collateralAsset);\n    }\n    if (oracle.getAssetPrice(collateralAsset) == 0) {\n      revert NoOracleSupport(collateralAsset);\n    }\n    if (!_supportedCollaterals.add(collateralAsset)) {\n      revert FailedToAddCollateral(collateralAsset);\n    }\n    emit CollateralAllowed(collateralAsset);\n  }\n\n  /**\n   * @notice Disallows a previously supported collateral asset\n   * @dev Requires at least one collateral asset to remain supported\n   * @param collateralAsset The address of the collateral asset to disallow\n   */\n  function disallowCollateral(address collateralAsset) public onlyRole(COLLATERAL_MANAGER_ROLE) {\n    if (!_supportedCollaterals.contains(collateralAsset)) {\n      revert CollateralNotSupported(collateralAsset);\n    }\n    if (_supportedCollaterals.length() <= 1) {\n      revert MustSupportAtLeastOneCollateral();\n    }\n    if (!_supportedCollaterals.remove(collateralAsset)) {\n      revert FailedToRemoveCollateral(collateralAsset);\n    }\n\n    emit CollateralDisallowed(collateralAsset);\n  }\n\n  /**\n   * @notice Checks if a given asset is supported as collateral\n   * @param collateralAsset The address of the collateral asset to check\n   * @return bool True if the asset is supported, false otherwise\n   */\n  function isCollateralSupported(address collateralAsset) public view returns (bool) {\n    return _supportedCollaterals.contains(collateralAsset);\n  }\n\n  /**\n   * @notice Returns a list of all supported collateral assets\n   * @return address[] Array of collateral asset addresses\n   */\n  function listCollateral() public view returns (address[] memory) {\n    return _supportedCollaterals.values();\n  }\n\n  /**\n   * @notice Calculates the total base value of all supported collateral assets in the vault\n   * @dev Iterates through all supported collaterals and sums their base values\n   * @return uint256 The total value in base\n   */\n  function _totalValueOfSupportedCollaterals() internal view returns (uint256) {\n    uint256 totalBaseValue = 0;\n    for (uint256 i = 0; i < _supportedCollaterals.length(); i++) {\n      address collateral = _supportedCollaterals.at(i);\n      uint256 collateralPrice = oracle.getAssetPrice(collateral);\n      uint8 collateralDecimals = IERC20Metadata(collateral).decimals();\n      uint256 collateralValue = Math.mulDiv(collateralPrice, IERC20Metadata(collateral).balanceOf(address(this)), 10 ** collateralDecimals);\n      totalBaseValue += collateralValue;\n    }\n    return totalBaseValue;\n  }\n}\n"
    },
    "contracts/deth/ERC20StablecoinUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\\\"\\_\\ \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20FlashMintUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract ERC20StablecoinUpgradeable is\n  Initializable,\n  ERC20Upgradeable,\n  ERC20BurnableUpgradeable,\n  ERC20PausableUpgradeable,\n  AccessControlUpgradeable,\n  ERC20PermitUpgradeable,\n  ERC20FlashMintUpgradeable\n{\n  bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n  bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n  string private _tokenName;\n  string private _tokenSymbol;\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  function initialize(string memory initialName, string memory initialSymbol) public initializer {\n    __ERC20_init(initialName, initialSymbol);\n    __ERC20Burnable_init();\n    __Pausable_init();\n    __AccessControl_init();\n    __ERC20Permit_init(initialName);\n    __ERC20FlashMint_init();\n\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _grantRole(PAUSER_ROLE, msg.sender);\n\n    _tokenName = initialName;\n    _tokenSymbol = initialSymbol;\n  }\n\n  // By convention all dETH tokens have 18 decimals on all chains\n  function decimals() public view virtual override returns (uint8) {\n    return 18;\n  }\n\n  function pause() public onlyRole(PAUSER_ROLE) {\n    _pause();\n  }\n\n  function unpause() public onlyRole(PAUSER_ROLE) {\n    _unpause();\n  }\n\n  function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\n    _mint(to, amount);\n  }\n\n  function _update(address from, address to, uint256 value) internal override(ERC20Upgradeable, ERC20PausableUpgradeable) whenNotPaused {\n    super._update(from, to, value);\n  }\n\n  function setNameAndSymbol(string memory newName, string memory newSymbol) public onlyRole(DEFAULT_ADMIN_ROLE) {\n    _tokenName = newName;\n    _tokenSymbol = newSymbol;\n  }\n\n  function name() public view virtual override returns (string memory) {\n    return _tokenName;\n  }\n\n  function symbol() public view virtual override returns (string memory) {\n    return _tokenSymbol;\n  }\n\n  // Ensure EIP712 domain uses the latest name\n  function _EIP712Name() internal view override returns (string memory) {\n    return _tokenName;\n  }\n}\n"
    },
    "contracts/deth/IssuerV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"contracts/common/IAaveOracle.sol\";\nimport \"contracts/common/IMintableERC20.sol\";\nimport \"./CollateralVault.sol\";\nimport \"./AmoManager.sol\";\nimport \"./OracleAware.sol\";\n\n/**\n * @title IssuerV2\n * @notice Extended issuer responsible for issuing dStable tokens with asset-level minting overrides and global pause\n */\ncontract IssuerV2 is AccessControl, OracleAware, ReentrancyGuard, Pausable {\n  using SafeERC20 for IERC20Metadata;\n\n  /* Core state */\n\n  IMintableERC20 public dstable;\n  uint8 public immutable dstableDecimals;\n  CollateralVault public collateralVault;\n  AmoManager public amoManager;\n\n  /* Events */\n\n  event CollateralVaultSet(address indexed collateralVault);\n  event AmoManagerSet(address indexed amoManager);\n  event AssetMintingPauseUpdated(address indexed asset, bool paused);\n\n  /* Roles */\n\n  bytes32 public constant AMO_MANAGER_ROLE = keccak256(\"AMO_MANAGER_ROLE\");\n  bytes32 public constant INCENTIVES_MANAGER_ROLE = keccak256(\"INCENTIVES_MANAGER_ROLE\");\n  bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n  /* Errors */\n\n  error SlippageTooHigh(uint256 minDStable, uint256 dstableAmount);\n  error IssuanceSurpassesExcessCollateral(uint256 collateralInDstable, uint256 circulatingDstable);\n  error MintingToAmoShouldNotIncreaseSupply(uint256 circulatingDstableBefore, uint256 circulatingDstableAfter);\n  error AssetMintingPaused(address asset);\n\n  /* Overrides */\n\n  // If true, minting with this collateral asset is paused at the issuer level\n  mapping(address => bool) public assetMintingPaused;\n\n  /**\n   * @notice Initializes the IssuerV2 contract with core dependencies\n   * @param _collateralVault The address of the collateral vault\n   * @param _dstable The address of the dStable stablecoin\n   * @param oracle The address of the price oracle\n   * @param _amoManager The address of the AMO Manager\n   */\n  constructor(\n    address _collateralVault,\n    address _dstable,\n    IPriceOracleGetter oracle,\n    address _amoManager\n  ) OracleAware(oracle, oracle.BASE_CURRENCY_UNIT()) {\n    collateralVault = CollateralVault(_collateralVault);\n    dstable = IMintableERC20(_dstable);\n    dstableDecimals = dstable.decimals();\n    amoManager = AmoManager(_amoManager);\n\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    grantRole(AMO_MANAGER_ROLE, msg.sender);\n    grantRole(INCENTIVES_MANAGER_ROLE, msg.sender);\n    grantRole(PAUSER_ROLE, msg.sender);\n  }\n\n  /* Issuer */\n\n  /**\n   * @notice Issues dStable tokens in exchange for collateral from the caller\n   * @param collateralAmount The amount of collateral to deposit\n   * @param collateralAsset The address of the collateral asset\n   * @param minDStable The minimum amount of dStable to receive, used for slippage protection\n   */\n  function issue(uint256 collateralAmount, address collateralAsset, uint256 minDStable) external nonReentrant whenNotPaused {\n    // Ensure the collateral asset is supported by the vault before any further processing\n    if (!collateralVault.isCollateralSupported(collateralAsset)) {\n      revert CollateralVault.UnsupportedCollateral(collateralAsset);\n    }\n\n    // Ensure the issuer has not paused this asset for minting\n    if (assetMintingPaused[collateralAsset]) {\n      revert AssetMintingPaused(collateralAsset);\n    }\n\n    uint8 collateralDecimals = IERC20Metadata(collateralAsset).decimals();\n    uint256 baseValue = Math.mulDiv(oracle.getAssetPrice(collateralAsset), collateralAmount, 10 ** collateralDecimals);\n    uint256 dstableAmount = baseValueToDstableAmount(baseValue);\n    if (dstableAmount < minDStable) {\n      revert SlippageTooHigh(minDStable, dstableAmount);\n    }\n\n    // Transfer collateral directly to vault\n    IERC20Metadata(collateralAsset).safeTransferFrom(msg.sender, address(collateralVault), collateralAmount);\n\n    dstable.mint(msg.sender, dstableAmount);\n  }\n\n  /**\n   * @notice Issues dStable tokens using excess collateral in the system\n   * @param receiver The address to receive the minted dStable tokens\n   * @param dstableAmount The amount of dStable to mint\n   */\n  function issueUsingExcessCollateral(address receiver, uint256 dstableAmount) external onlyRole(INCENTIVES_MANAGER_ROLE) whenNotPaused {\n    dstable.mint(receiver, dstableAmount);\n\n    // We don't use the buffer value here because we only mint up to the excess collateral\n    uint256 _circulatingDstable = circulatingDstable();\n    uint256 _collateralInDstable = collateralInDstable();\n    if (_collateralInDstable < _circulatingDstable) {\n      revert IssuanceSurpassesExcessCollateral(_collateralInDstable, _circulatingDstable);\n    }\n  }\n\n  /**\n   * @notice Increases the AMO supply by minting new dStable tokens\n   * @param dstableAmount The amount of dStable to mint and send to the AMO Manager\n   */\n  function increaseAmoSupply(uint256 dstableAmount) external onlyRole(AMO_MANAGER_ROLE) whenNotPaused {\n    uint256 _circulatingDstableBefore = circulatingDstable();\n\n    dstable.mint(address(amoManager), dstableAmount);\n\n    uint256 _circulatingDstableAfter = circulatingDstable();\n\n    // Sanity check that we are sending to the active AMO Manager\n    if (_circulatingDstableAfter != _circulatingDstableBefore) {\n      revert MintingToAmoShouldNotIncreaseSupply(_circulatingDstableBefore, _circulatingDstableAfter);\n    }\n  }\n\n  /**\n   * @notice Calculates the circulating supply of dStable tokens\n   * @return The amount of dStable tokens that are not held by the AMO Manager\n   */\n  function circulatingDstable() public view returns (uint256) {\n    uint256 totalDstable = dstable.totalSupply();\n    uint256 amoDstable = amoManager.totalAmoSupply();\n    return totalDstable - amoDstable;\n  }\n\n  /**\n   * @notice Calculates the collateral value in dStable tokens\n   * @return The amount of dStable tokens equivalent to the collateral value\n   */\n  function collateralInDstable() public view returns (uint256) {\n    uint256 _collateralInBase = collateralVault.totalValue();\n    return baseValueToDstableAmount(_collateralInBase);\n  }\n\n  /**\n   * @notice Converts a base value to an equivalent amount of dStable tokens\n   * @param baseValue The amount of base value to convert\n   * @return The equivalent amount of dStable tokens\n   */\n  function baseValueToDstableAmount(uint256 baseValue) public view returns (uint256) {\n    return Math.mulDiv(baseValue, 10 ** dstableDecimals, baseCurrencyUnit);\n  }\n\n  /**\n   * @notice Returns whether `asset` is currently enabled for minting by the issuer\n   * @dev Asset must be supported by the collateral vault and not paused by issuer\n   */\n  function isAssetMintingEnabled(address asset) public view returns (bool) {\n    if (!collateralVault.isCollateralSupported(asset)) return false;\n    return !assetMintingPaused[asset];\n  }\n\n  /* Admin */\n\n  /**\n   * @notice Sets the AMO Manager address\n   * @param _amoManager The address of the AMO Manager\n   */\n  function setAmoManager(address _amoManager) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    address old = address(amoManager);\n    amoManager = AmoManager(_amoManager);\n    grantRole(AMO_MANAGER_ROLE, _amoManager);\n    if (old != address(0) && old != _amoManager) {\n      revokeRole(AMO_MANAGER_ROLE, old);\n    }\n    emit AmoManagerSet(_amoManager);\n  }\n\n  /**\n   * @notice Sets the collateral vault address\n   * @param _collateralVault The address of the collateral vault\n   */\n  function setCollateralVault(address _collateralVault) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    collateralVault = CollateralVault(_collateralVault);\n    emit CollateralVaultSet(_collateralVault);\n  }\n\n  /**\n   * @notice Set minting pause override for a specific collateral asset\n   * @param asset The collateral asset address\n   * @param paused True to pause minting; false to enable\n   */\n  function setAssetMintingPause(address asset, bool paused) external onlyRole(PAUSER_ROLE) {\n    // Optional guard: if vault does not support the asset, setting an override is meaningless\n    if (!collateralVault.isCollateralSupported(asset)) {\n      revert CollateralVault.UnsupportedCollateral(asset);\n    }\n    assetMintingPaused[asset] = paused;\n    emit AssetMintingPauseUpdated(asset, paused);\n  }\n\n  /**\n   * @notice Pause all minting operations\n   */\n  function pauseMinting() external onlyRole(PAUSER_ROLE) {\n    _pause();\n  }\n\n  /**\n   * @notice Unpause all minting operations\n   */\n  function unpauseMinting() external onlyRole(PAUSER_ROLE) {\n    _unpause();\n  }\n}\n"
    },
    "contracts/deth/mocks/MockAmoVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"contracts/deth/AmoVault.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\ncontract MockAmoVault is AmoVault {\n  using SafeERC20 for IERC20;\n\n  uint256 private fakeDeFiCollateralValue;\n\n  constructor(\n    address _dstable,\n    address _amoManager,\n    address _admin,\n    address _collateralWithdrawer,\n    address _recoverer,\n    IPriceOracleGetter _oracle\n  ) AmoVault(_dstable, _amoManager, _admin, _collateralWithdrawer, _recoverer, _oracle) {}\n\n  // Override totalCollateralValue to return the sum of all simulated values\n  function totalCollateralValue() public view override returns (uint256) {\n    return _totalValueOfSupportedCollaterals() + fakeDeFiCollateralValue;\n  }\n\n  // Override totalDstableValue to return the sum of all simulated values\n  function totalDstableValue() public view override returns (uint256) {\n    uint256 dstableBalance = dstable.balanceOf(address(this));\n    uint256 dstablePrice = oracle.getAssetPrice(address(dstable));\n    uint256 dstableValue = (dstableBalance * dstablePrice) / (10 ** dstableDecimals);\n\n    return dstableValue;\n  }\n\n  function totalValue() public view override returns (uint256) {\n    return totalCollateralValue() + totalDstableValue();\n  }\n\n  // Simulate AmoVault losing some value\n  function mockRemoveAsset(address asset, uint256 amount) external {\n    IERC20(asset).safeTransfer(\n      address(0x000000000000000000000000000000000000dEaD), // Arbitrary black hole address\n      amount\n    );\n  }\n\n  // Simulate fake DeFi returns\n  function getFakeDeFiCollateralValue() external view returns (uint256) {\n    return fakeDeFiCollateralValue;\n  }\n\n  // Set fake DeFi collateral value\n  function setFakeDeFiCollateralValue(uint256 value) external {\n    fakeDeFiCollateralValue = value;\n  }\n}\n"
    },
    "contracts/deth/OracleAware.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"contracts/common/IAaveOracle.sol\";\n\n/**\n * @title OracleAware\n * @notice Abstract contract that provides oracle functionality to other contracts\n */\nabstract contract OracleAware is AccessControl {\n  /* Core state */\n\n  IPriceOracleGetter public oracle;\n  uint256 public baseCurrencyUnit;\n\n  /* Events */\n\n  event OracleSet(address indexed newOracle);\n\n  /* Errors */\n\n  error IncorrectBaseCurrencyUnit(uint256 baseCurrencyUnit);\n\n  /**\n   * @notice Initializes the contract with an oracle and base currency unit\n   * @param initialOracle The initial oracle to use for price feeds\n   * @param _baseCurrencyUnit The base currency unit for price calculations\n   * @dev Sets up the initial oracle and base currency unit values\n   */\n  constructor(IPriceOracleGetter initialOracle, uint256 _baseCurrencyUnit) {\n    oracle = initialOracle;\n    baseCurrencyUnit = _baseCurrencyUnit;\n\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n  }\n\n  /**\n   * @notice Sets the oracle to use for collateral valuation\n   * @param newOracle The new oracle to use\n   */\n  function setOracle(IPriceOracleGetter newOracle) public onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (newOracle.BASE_CURRENCY_UNIT() != baseCurrencyUnit) {\n      revert IncorrectBaseCurrencyUnit(baseCurrencyUnit);\n    }\n\n    oracle = newOracle;\n\n    emit OracleSet(address(newOracle));\n  }\n\n  /**\n   * @notice Updates the base currency unit used for price calculations\n   * @param _newBaseCurrencyUnit The new base currency unit to set\n   * @dev Only used if the oracle's base currency unit changes\n   */\n  function setBaseCurrencyUnit(uint256 _newBaseCurrencyUnit) public onlyRole(DEFAULT_ADMIN_ROLE) {\n    baseCurrencyUnit = _newBaseCurrencyUnit;\n  }\n}\n"
    },
    "contracts/deth/RedeemerV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport \"contracts/common/IMintableERC20.sol\";\nimport \"contracts/common/BasisPointConstants.sol\";\nimport \"./CollateralVault.sol\";\nimport \"./OracleAware.sol\";\n\n/**\n * @title RedeemerV2\n * @notice Extended Redeemer with global pause and per-asset redemption pause controls\n */\ncontract RedeemerV2 is AccessControl, OracleAware, Pausable, ReentrancyGuard {\n  /* Constants */\n  uint256 public immutable MAX_FEE_BPS;\n\n  /* Core state */\n\n  IMintableERC20 public dstable;\n  uint8 public immutable dstableDecimals;\n  CollateralVault public collateralVault;\n\n  /* Fee related state */\n  address public feeReceiver;\n  uint256 public defaultRedemptionFeeBps; // Default fee in basis points\n\n  // Per-asset fee bps. Separately track whether an override is active to allow 0 bps overrides even if default > 0.\n  mapping(address => uint256) public collateralRedemptionFeeBps; // Fee in basis points per collateral asset\n  mapping(address => bool) public isCollateralFeeOverridden;\n\n  /* Events */\n\n  event AssetRedemptionPauseUpdated(address indexed asset, bool paused);\n  event FeeReceiverUpdated(address indexed oldFeeReceiver, address indexed newFeeReceiver);\n  event DefaultRedemptionFeeUpdated(uint256 oldFeeBps, uint256 newFeeBps);\n  event CollateralRedemptionFeeUpdated(address indexed collateralAsset, uint256 oldFeeBps, uint256 newFeeBps);\n  event Redemption(\n    address indexed redeemer,\n    address indexed collateralAsset,\n    uint256 dstableAmount,\n    uint256 collateralAmountToRedeemer,\n    uint256 feeAmountCollateral\n  );\n  event CollateralVaultSet(address indexed collateralVault);\n\n  /* Roles */\n\n  bytes32 public constant REDEMPTION_MANAGER_ROLE = keccak256(\"REDEMPTION_MANAGER_ROLE\");\n  bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n  /* Errors */\n  error DStableTransferFailed();\n  error SlippageTooHigh(uint256 actualCollateral, uint256 minCollateral);\n  error AssetRedemptionPaused(address asset);\n  error FeeTooHigh(uint256 requestedFeeBps, uint256 maxFeeBps);\n  error CollateralTransferFailed(address recipient, uint256 amount, address token);\n  error CannotBeZeroAddress();\n\n  /* Overrides */\n\n  // If true, redemption with this collateral asset is paused at the redeemer level\n  mapping(address => bool) public assetRedemptionPaused;\n\n  /**\n   * @notice Initializes the RedeemerV2 contract\n   * @param _collateralVault The address of the collateral vault\n   * @param _dstable The address of the dStable stablecoin\n   * @param _oracle The address of the price oracle\n   * @param _initialFeeReceiver The initial address to receive redemption fees\n   * @param _initialRedemptionFeeBps The initial redemption fee in basis points\n   */\n  constructor(\n    address _collateralVault,\n    address _dstable,\n    IPriceOracleGetter _oracle,\n    address _initialFeeReceiver,\n    uint256 _initialRedemptionFeeBps\n  ) OracleAware(_oracle, _oracle.BASE_CURRENCY_UNIT()) {\n    if (_collateralVault == address(0) || _dstable == address(0) || address(_oracle) == address(0)) {\n      revert CannotBeZeroAddress();\n    }\n    if (_initialFeeReceiver == address(0)) {\n      revert CannotBeZeroAddress();\n    }\n\n    MAX_FEE_BPS = 5 * BasisPointConstants.ONE_PERCENT_BPS; // 5%\n\n    if (_initialRedemptionFeeBps > MAX_FEE_BPS) {\n      revert FeeTooHigh(_initialRedemptionFeeBps, MAX_FEE_BPS);\n    }\n\n    collateralVault = CollateralVault(_collateralVault);\n    dstable = IMintableERC20(_dstable);\n    dstableDecimals = dstable.decimals();\n\n    // Initial fee configuration\n    feeReceiver = _initialFeeReceiver;\n    defaultRedemptionFeeBps = _initialRedemptionFeeBps;\n\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    grantRole(REDEMPTION_MANAGER_ROLE, msg.sender);\n    grantRole(PAUSER_ROLE, msg.sender);\n\n    emit FeeReceiverUpdated(address(0), _initialFeeReceiver);\n    emit DefaultRedemptionFeeUpdated(0, _initialRedemptionFeeBps);\n  }\n\n  /* Redeemer */\n\n  function redeem(uint256 dstableAmount, address collateralAsset, uint256 minNetCollateral) external whenNotPaused nonReentrant {\n    // Ensure the collateral asset is supported by the vault before any further processing\n    if (!collateralVault.isCollateralSupported(collateralAsset)) {\n      revert CollateralVault.UnsupportedCollateral(collateralAsset);\n    }\n\n    // Ensure the redeemer has not paused this asset for redemption\n    if (assetRedemptionPaused[collateralAsset]) {\n      revert AssetRedemptionPaused(collateralAsset);\n    }\n\n    // Calculate collateral amount and fee\n    uint256 dstableValue = dstableAmountToBaseValue(dstableAmount);\n    uint256 totalCollateral = collateralVault.assetAmountFromValue(dstableValue, collateralAsset);\n\n    uint256 currentFeeBps = isCollateralFeeOverridden[collateralAsset]\n      ? collateralRedemptionFeeBps[collateralAsset]\n      : defaultRedemptionFeeBps;\n\n    uint256 feeCollateral = 0;\n    if (currentFeeBps > 0) {\n      feeCollateral = Math.mulDiv(totalCollateral, currentFeeBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS);\n    }\n    uint256 netCollateral = totalCollateral - feeCollateral;\n    if (netCollateral < minNetCollateral) {\n      revert SlippageTooHigh(netCollateral, minNetCollateral);\n    }\n\n    // Burn and withdraw net amount to redeemer\n    _redeem(msg.sender, dstableAmount, collateralAsset, netCollateral);\n\n    // Withdraw fee to feeReceiver\n    if (feeCollateral > 0) {\n      collateralVault.withdrawTo(feeReceiver, feeCollateral, collateralAsset);\n    }\n\n    emit Redemption(msg.sender, collateralAsset, dstableAmount, netCollateral, feeCollateral);\n  }\n\n  function redeemAsProtocol(\n    uint256 dstableAmount,\n    address collateralAsset,\n    uint256 minCollateral\n  ) external onlyRole(REDEMPTION_MANAGER_ROLE) whenNotPaused nonReentrant {\n    // Ensure the collateral asset is supported by the vault before any further processing\n    if (!collateralVault.isCollateralSupported(collateralAsset)) {\n      revert CollateralVault.UnsupportedCollateral(collateralAsset);\n    }\n\n    // Ensure the redeemer has not paused this asset for redemption\n    if (assetRedemptionPaused[collateralAsset]) {\n      revert AssetRedemptionPaused(collateralAsset);\n    }\n\n    // Calculate collateral amount\n    uint256 dstableValue = dstableAmountToBaseValue(dstableAmount);\n    uint256 totalCollateral = collateralVault.assetAmountFromValue(dstableValue, collateralAsset);\n    if (totalCollateral < minCollateral) {\n      revert SlippageTooHigh(totalCollateral, minCollateral);\n    }\n\n    // Burn and withdraw full amount to redeemer\n    _redeem(msg.sender, dstableAmount, collateralAsset, totalCollateral);\n\n    emit Redemption(msg.sender, collateralAsset, dstableAmount, totalCollateral, 0);\n  }\n\n  function _redeem(address redeemerAddress, uint256 dstableAmount, address collateralAsset, uint256 collateralAmount) internal {\n    // Transfer dStable from redeemer to this contract\n    if (!dstable.transferFrom(redeemerAddress, address(this), dstableAmount)) {\n      revert DStableTransferFailed();\n    }\n    // Burn the dStable\n    dstable.burn(dstableAmount);\n    // Withdraw collateral from the vault\n    collateralVault.withdrawTo(redeemerAddress, collateralAmount, collateralAsset);\n  }\n\n  function dstableAmountToBaseValue(uint256 dstableAmount) public view returns (uint256) {\n    return Math.mulDiv(dstableAmount, baseCurrencyUnit, 10 ** dstableDecimals);\n  }\n\n  /* Views */\n  function isAssetRedemptionEnabled(address asset) public view returns (bool) {\n    if (!collateralVault.isCollateralSupported(asset)) return false;\n    return !assetRedemptionPaused[asset];\n  }\n\n  /* Admin */\n  function setCollateralVault(address _collateralVault) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_collateralVault == address(0)) {\n      revert CannotBeZeroAddress();\n    }\n    collateralVault = CollateralVault(_collateralVault);\n    emit CollateralVaultSet(_collateralVault);\n  }\n\n  function setAssetRedemptionPause(address asset, bool paused) external onlyRole(PAUSER_ROLE) {\n    if (!collateralVault.isCollateralSupported(asset)) {\n      revert CollateralVault.UnsupportedCollateral(asset);\n    }\n    assetRedemptionPaused[asset] = paused;\n    emit AssetRedemptionPauseUpdated(asset, paused);\n  }\n\n  function setFeeReceiver(address _newFeeReceiver) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_newFeeReceiver == address(0)) {\n      revert CannotBeZeroAddress();\n    }\n    address oldFeeReceiver = feeReceiver;\n    feeReceiver = _newFeeReceiver;\n    emit FeeReceiverUpdated(oldFeeReceiver, _newFeeReceiver);\n  }\n\n  function setDefaultRedemptionFee(uint256 _newFeeBps) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_newFeeBps > MAX_FEE_BPS) {\n      revert FeeTooHigh(_newFeeBps, MAX_FEE_BPS);\n    }\n    uint256 oldFeeBps = defaultRedemptionFeeBps;\n    defaultRedemptionFeeBps = _newFeeBps;\n    emit DefaultRedemptionFeeUpdated(oldFeeBps, _newFeeBps);\n  }\n\n  function setCollateralRedemptionFee(address _collateralAsset, uint256 _newFeeBps) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_collateralAsset == address(0)) {\n      revert CannotBeZeroAddress();\n    }\n    if (_newFeeBps > MAX_FEE_BPS) {\n      revert FeeTooHigh(_newFeeBps, MAX_FEE_BPS);\n    }\n    uint256 oldFeeBps = collateralRedemptionFeeBps[_collateralAsset];\n    collateralRedemptionFeeBps[_collateralAsset] = _newFeeBps;\n    isCollateralFeeOverridden[_collateralAsset] = true; // enable override, allowing 0 bps explicitly\n    emit CollateralRedemptionFeeUpdated(_collateralAsset, oldFeeBps, _newFeeBps);\n  }\n\n  /**\n   * @notice Clears a per-asset fee override so the default fee applies again\n   * @param _collateralAsset The collateral asset for which to clear the override\n   */\n  function clearCollateralRedemptionFee(address _collateralAsset) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_collateralAsset == address(0)) {\n      revert CannotBeZeroAddress();\n    }\n    uint256 oldFeeBps = collateralRedemptionFeeBps[_collateralAsset];\n    collateralRedemptionFeeBps[_collateralAsset] = 0;\n    isCollateralFeeOverridden[_collateralAsset] = false;\n    emit CollateralRedemptionFeeUpdated(_collateralAsset, oldFeeBps, 0);\n  }\n\n  function pauseRedemption() external onlyRole(PAUSER_ROLE) {\n    _pause();\n  }\n\n  function unpauseRedemption() external onlyRole(PAUSER_ROLE) {\n    _unpause();\n  }\n}\n"
    },
    "contracts/interfaces/dlend/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title IERC20Detailed\n * @dev Interface for ERC20 tokens with detailed information - created to replace missing dlend dependency\n */\ninterface IERC20Detailed is IERC20 {\n  function name() external view returns (string memory);\n  function symbol() external view returns (string memory);\n  function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/dlend/core/dependencies/openzeppelin/contracts/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\n/**\n * @title SafeCast\n * @dev Minimal safe casting library - created to replace missing dlend dependency\n */\nlibrary SafeCast {\n  /**\n   * @dev Converts a uint256 to its uint128 representation, reverting on overflow.\n   */\n  function toUint128(uint256 value) internal pure returns (uint128) {\n    require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n    return uint128(value);\n  }\n\n  /**\n   * @dev Converts a uint256 to its uint40 representation, reverting on overflow.\n   */\n  function toUint40(uint256 value) internal pure returns (uint40) {\n    require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n    return uint40(value);\n  }\n}\n"
    },
    "contracts/interfaces/dlend/core/dependencies/openzeppelin/upgradeability/Initializable.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\n/**\n * @title Initializable\n * @dev Minimal initializable contract - created to replace missing dlend dependency\n * This is a simplified version that redirects to OpenZeppelin's implementation\n */\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n"
    },
    "contracts/interfaces/dlend/core/interfaces/IERC20WithPermit.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title IERC20WithPermit\n * @dev Interface for ERC20 tokens with permit functionality - created to replace missing dlend dependency\n */\ninterface IERC20WithPermit is IERC20 {\n  /**\n   * @dev Sets approval for spending tokens via signature\n   * @param owner Token owner's address\n   * @param spender Address authorized to spend\n   * @param value Amount to approve\n   * @param deadline Timestamp until when the permit is valid\n   * @param v Recovery byte of the signature\n   * @param r First 32 bytes of the signature\n   * @param s Second 32 bytes of the signature\n   */\n  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "contracts/interfaces/dlend/core/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\nimport { DataTypes } from \"../protocol/libraries/types/DataTypes.sol\";\n\n/**\n * @title IPool\n * @dev Minimal interface for Pool - created to replace missing dlend dependency\n */\ninterface IPool {\n  /**\n   * @notice Returns the normalized income of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve's normalized income\n   */\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n  /**\n   * @notice Returns the reserve data\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve data\n   */\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n  /**\n   * @notice Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * @param asset The address of the underlying asset to deposit\n   * @param amount The amount to be deposited\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   */\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n  /**\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n   * @param asset The address of the underlying asset to withdraw\n   * @param amount The underlying amount to be withdrawn\n   * @param to The address that will receive the underlying, same as msg.sender if the user\n   * @return The final amount withdrawn\n   */\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/dlend/core/interfaces/IPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\n/**\n * @title IPoolAddressesProvider\n * @dev Minimal interface for pool addresses provider - created to replace missing dlend dependency\n */\ninterface IPoolAddressesProvider {\n  /**\n   * @notice Returns the address of the Pool\n   * @return The address of the Pool\n   */\n  function getPool() external view returns (address);\n\n  /**\n   * @notice Returns the address of the price oracle\n   * @return The address of the price oracle\n   */\n  function getPriceOracle() external view returns (address);\n}\n"
    },
    "contracts/interfaces/dlend/core/interfaces/IScaledBalanceToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\n/**\n * @title IScaledBalanceToken\n * @dev Minimal interface for scaled balance tokens - created to replace missing dlend dependency\n */\ninterface IScaledBalanceToken {\n  /**\n   * @notice Returns the scaled balance of the user.\n   * @param user The address of the user\n   * @return The scaled balance of the user\n   */\n  function scaledBalanceOf(address user) external view returns (uint256);\n\n  /**\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\n   * @return The scaled total supply\n   */\n  function scaledTotalSupply() external view returns (uint256);\n\n  /**\n   * @notice Returns last index interest was accrued to the user's balance\n   * @param user The address of the user\n   * @return The last index interest was accrued to the user's balance, expressed in ray\n   */\n  function getPreviousIndex(address user) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/dlend/core/protocol/libraries/configuration/ReserveConfiguration.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\n/**\n * @title ReserveConfiguration\n * @dev Minimal reserve configuration library - created to replace missing dlend dependency\n */\nlibrary ReserveConfiguration {\n  /**\n   * @notice Gets the active state of the reserve\n   * @param self The reserve configuration\n   * @return The active state\n   */\n  function getActive(uint256 self) internal pure returns (bool) {\n    // Simplified implementation - always return true for minimal functionality\n    return true;\n  }\n\n  /**\n   * @notice Gets the paused state of the reserve\n   * @param self The reserve configuration\n   * @return The paused state\n   */\n  function getPaused(uint256 self) internal pure returns (bool) {\n    // Simplified implementation - always return false for minimal functionality\n    return false;\n  }\n\n  /**\n   * @notice Gets the frozen state of the reserve\n   * @param self The reserve configuration\n   * @return The frozen state\n   */\n  function getFrozen(uint256 self) internal pure returns (bool) {\n    // Simplified implementation - always return false for minimal functionality\n    return false;\n  }\n\n  /**\n   * @notice Gets the supply cap of the reserve\n   * @param self The reserve configuration\n   * @return The supply cap\n   */\n  function getSupplyCap(uint256 self) internal pure returns (uint256) {\n    // Simplified implementation - return 0 (no supply cap) for minimal functionality\n    return 0;\n  }\n\n  /**\n   * @notice Gets the decimals of the reserve\n   * @param self The reserve configuration\n   * @return The decimals\n   */\n  function getDecimals(uint256 self) internal pure returns (uint256) {\n    // Simplified implementation - return 18 decimals as default\n    return 18;\n  }\n}\n"
    },
    "contracts/interfaces/dlend/core/protocol/libraries/math/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\nimport { WadRayMath } from \"./WadRayMath.sol\";\n\n/**\n * @title MathUtils\n * @dev Minimal math utilities library - created to replace missing dlend dependency\n */\nlibrary MathUtils {\n  using WadRayMath for uint256;\n\n  uint256 internal constant SECONDS_PER_YEAR = 365 days;\n\n  /**\n   * @dev Function to calculate the interest using a linear interest rate formula\n   * @param rate The interest rate, in ray\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\n   * @return The interest accumulated during the timeDelta, in ray\n   */\n  function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\n    //solium-disable-next-line\n    uint256 timeDifference = block.timestamp - uint256(lastUpdateTimestamp);\n\n    return ((rate * timeDifference) / SECONDS_PER_YEAR) + WadRayMath.RAY;\n  }\n}\n"
    },
    "contracts/interfaces/dlend/core/protocol/libraries/math/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\n/**\n * @title WadRayMath\n * @dev Minimal math library for wad and ray operations - created to replace missing dlend dependency\n */\nlibrary WadRayMath {\n  uint256 internal constant WAD = 1e18;\n  uint256 internal constant RAY = 1e27;\n  uint256 internal constant HALF_RAY = RAY / 2;\n\n  /**\n   * @dev Multiplies two ray values, rounding half up to the nearest ray\n   * @param a Ray\n   * @param b Ray\n   * @return c = a * b, in ray\n   */\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0 || b == 0) {\n      return 0;\n    }\n\n    c = (a * b + HALF_RAY) / RAY;\n  }\n\n  /**\n   * @dev Divides two ray values, rounding half up to the nearest ray\n   * @param a Ray\n   * @param b Ray\n   * @return c = a / b, in ray\n   */\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    require(b != 0, \"Division by zero\");\n    c = (a * RAY + b / 2) / b;\n  }\n\n  /**\n   * @dev Casts ray down to wad\n   * @param a Ray\n   * @return b = a converted to wad, rounded half up to the nearest wad\n   */\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\n    b = (a + (RAY / WAD) / 2) / (RAY / WAD);\n  }\n}\n"
    },
    "contracts/interfaces/dlend/core/protocol/libraries/types/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\n/**\n * @title DataTypes\n * @dev Minimal data types library - created to replace missing dlend dependency\n */\nlibrary DataTypes {\n  struct ReserveData {\n    uint256 configuration;\n    uint128 liquidityIndex;\n    uint128 currentLiquidityRate;\n    uint128 accruedToTreasury;\n    uint40 lastUpdateTimestamp;\n    address aTokenAddress;\n    // Simplified version - only including fields that are actually used\n    // Additional fields can be added if needed for compilation\n  }\n}\n"
    },
    "contracts/interfaces/dlend/periphery/rewards/IRewardsController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\n/**\n * @title IRewardsController\n * @dev Minimal interface for rewards controller - created to replace missing dlend dependency\n */\ninterface IRewardsController {\n  /**\n   * @dev Returns the list of available reward token addresses of an incentivized asset\n   * @param asset The incentivized asset\n   * @return List of rewards token addresses\n   */\n  function getRewardsByAsset(address asset) external view returns (address[] memory);\n\n  /**\n   * @dev Claims reward for an user, on the assets of the message sender\n   * @param assets The list of assets to check eligible distributions before claiming rewards\n   * @param amount The amount of rewards to claim\n   * @param to The address that will receive the rewards\n   * @param reward The address of the reward token\n   * @return The amount of rewards claimed\n   */\n  function claimRewards(address[] calldata assets, uint256 amount, address to, address reward) external returns (uint256);\n\n  /**\n   * @dev Returns the claimer for a specific user\n   * @param user The user address\n   * @return The claimer address\n   */\n  function getClaimer(address user) external view returns (address);\n\n  /**\n   * @dev Returns the index of an asset and asset rewards accrued by a specific user\n   * @param asset The asset to incentivize\n   * @param reward The reward token that incentives the asset\n   * @return The assets index, rewards accrued\n   */\n  function getAssetIndex(address asset, address reward) external view returns (uint256, uint256);\n\n  /**\n   * @dev Returns the user rewards accrued by a specific user\n   * @param assets The list of assets to check eligible distributions\n   * @param user The user address\n   * @param reward The reward token address\n   * @return The amount of unclaimed rewards\n   */\n  function getUserRewards(address[] calldata assets, address user, address reward) external view returns (uint256);\n}\n"
    },
    "contracts/mocks/MockAdapterPositiveSlippage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IDStableConversionAdapter } from \"../vaults/dstake/interfaces/IDStableConversionAdapter.sol\";\nimport { MockERC4626Simple } from \"./MockERC4626Simple.sol\";\nimport { ERC4626 } from \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract MockAdapterPositiveSlippage is IDStableConversionAdapter {\n  using SafeERC20 for IERC20;\n\n  address public immutable dStable;\n  MockERC4626Simple public immutable vaultToken;\n  address public immutable collateralVault;\n\n  constructor(address _dStable, address _collateralVault) {\n    dStable = _dStable;\n    collateralVault = _collateralVault;\n    vaultToken = new MockERC4626Simple(IERC20(_dStable));\n  }\n\n  function convertToVaultAsset(uint256 dStableAmount) external override returns (address _vaultAsset, uint256 vaultAssetAmount) {\n    IERC20(dStable).transferFrom(msg.sender, address(this), dStableAmount);\n    IERC20(dStable).forceApprove(address(vaultToken), dStableAmount);\n    vaultAssetAmount = vaultToken.deposit(dStableAmount, collateralVault);\n    return (address(vaultToken), vaultAssetAmount);\n  }\n\n  function convertFromVaultAsset(uint256 vaultAssetAmount) external override returns (uint256 dStableAmount) {\n    // pull vault tokens\n    IERC20(address(vaultToken)).transferFrom(msg.sender, address(this), vaultAssetAmount);\n    IERC20(address(vaultToken)).forceApprove(address(vaultToken), vaultAssetAmount);\n    dStableAmount = vaultToken.redeem(vaultAssetAmount, msg.sender, address(this));\n  }\n\n  function previewConvertToVaultAsset(\n    uint256 dStableAmount\n  ) external view override returns (address _vaultAsset, uint256 vaultAssetAmount) {\n    return (address(vaultToken), dStableAmount);\n  }\n\n  function previewConvertFromVaultAsset(uint256 vaultAssetAmount) external view override returns (uint256 dStableAmount) {\n    return vaultToken.previewRedeem(vaultAssetAmount);\n  }\n\n  function assetValueInDStable(address _vaultAsset, uint256 vaultAssetAmount) external view override returns (uint256 dStableValue) {\n    require(_vaultAsset == address(vaultToken), \"Wrong asset\");\n    return vaultToken.previewRedeem(vaultAssetAmount);\n  }\n\n  function vaultAsset() external view override returns (address) {\n    return address(vaultToken);\n  }\n}\n"
    },
    "contracts/mocks/MockAdapterSmallDepositRevert.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { MockERC4626Simple } from \"./MockERC4626Simple.sol\";\nimport { IDStableConversionAdapter } from \"../vaults/dstake/interfaces/IDStableConversionAdapter.sol\";\n\n/**\n * @title MockAdapterSmallDepositRevert\n * @notice Test-only adapter that intentionally reverts when `convertToVaultAsset`\n *         is called with < 2 wei of dSTABLE.  Used to reproduce the dStakeRouter\n *         surplus-rounding DoS in unit tests.\n */\ncontract MockAdapterSmallDepositRevert is IDStableConversionAdapter {\n  // --- Errors ---\n  error ZeroAddress();\n  error DepositTooSmall(uint256 amount);\n\n  // --- Constants ---\n  uint256 private constant MIN_DEPOSIT = 2; // Wei of dSTABLE required for a successful deposit\n\n  // --- State ---\n  IERC20 public immutable dStable; // underlying stablecoin\n  MockERC4626Simple public immutable vaultAssetToken; // mock wrapped asset\n  address public immutable collateralVault; // DStakeCollateralVault address (receiver of minted shares)\n\n  constructor(address _dStable, address _collateralVault) {\n    if (_dStable == address(0) || _collateralVault == address(0)) {\n      revert ZeroAddress();\n    }\n    dStable = IERC20(_dStable);\n    collateralVault = _collateralVault;\n    // Deploy the simple ERC4626 vault token (1:1 deposit)\n    vaultAssetToken = new MockERC4626Simple(IERC20(_dStable));\n  }\n\n  // ---------------- IDStableConversionAdapter ----------------\n\n  function convertToVaultAsset(uint256 dStableAmount) external override returns (address _vaultAsset, uint256 vaultAssetAmount) {\n    if (dStableAmount < MIN_DEPOSIT) revert DepositTooSmall(dStableAmount);\n\n    // Pull dStable from caller (Router)\n    dStable.transferFrom(msg.sender, address(this), dStableAmount);\n\n    // Deposit dStable into the ERC4626 mock, minting shares to the vault\n    IERC20(address(dStable)).approve(address(vaultAssetToken), dStableAmount);\n    vaultAssetToken.deposit(dStableAmount, collateralVault);\n\n    _vaultAsset = address(vaultAssetToken);\n    vaultAssetAmount = dStableAmount;\n  }\n\n  function convertFromVaultAsset(uint256 vaultAssetAmount) external override returns (uint256 dStableAmount) {\n    // Pull shares from caller (Router)\n    IERC20(address(vaultAssetToken)).transferFrom(msg.sender, address(this), vaultAssetAmount);\n\n    // Redeem shares for dStable, sending the dStable directly to the router (msg.sender)\n    dStableAmount = vaultAssetToken.redeem(vaultAssetAmount, msg.sender, address(this));\n  }\n\n  function previewConvertToVaultAsset(\n    uint256 dStableAmount\n  ) external view override returns (address _vaultAsset, uint256 vaultAssetAmount) {\n    _vaultAsset = address(vaultAssetToken);\n    vaultAssetAmount = dStableAmount;\n  }\n\n  function previewConvertFromVaultAsset(uint256 vaultAssetAmount) external pure override returns (uint256 dStableAmount) {\n    return (vaultAssetAmount * 11000) / 10000; // 1.1x like MockERC4626Simple\n  }\n\n  function assetValueInDStable(address _vaultAsset, uint256 vaultAssetAmount) external pure override returns (uint256 dStableValue) {\n    require(_vaultAsset == address(0) || _vaultAsset != address(0), \"NOP\"); // dummy check to silence linter\n    return (vaultAssetAmount * 11000) / 10000;\n  }\n\n  function vaultAsset() external view override returns (address) {\n    return address(vaultAssetToken);\n  }\n}\n"
    },
    "contracts/mocks/MockERC4626Simple.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ERC4626 } from \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title MockERC4626Simple\n * @dev Very small ERC-4626 vault used only in tests. Behaves 1:1 on deposits,\n *      but on redeem / withdraw returns 10 % more dStable than theoretical\n *      book value to simulate positive slippage / yield.\n */\ncontract MockERC4626Simple is ERC4626 {\n  uint256 private constant BONUS_BPS = 11_000; // 110 % (10000 = 100 %)\n  uint256 private constant BASIS_POINTS = 10_000;\n\n  constructor(IERC20 _asset) ERC20(\"Mock Vault Token\", \"mVT\") ERC4626(_asset) {}\n\n  // ---------- Deposit path (1:1) ---------- //\n  // The default ERC4626 implementation already mints shares == assets when\n  // totalSupply() == 0, so no override is necessary.\n\n  // ---------- Redemption path (adds 10 % bonus) ---------- //\n\n  function previewRedeem(uint256 shares) public pure override returns (uint256) {\n    // users get 110 % of the nominal assets represented by `shares`\n    return (shares * BONUS_BPS) / BASIS_POINTS;\n  }\n\n  function previewWithdraw(uint256 assets) public pure override returns (uint256) {\n    // inverse of previewRedeem (ceil division to avoid under-funding)\n    return (assets * BASIS_POINTS + BONUS_BPS - 1) / BONUS_BPS;\n  }\n\n  function redeem(uint256 shares, address receiver, address owner) public override returns (uint256 assets) {\n    // Transfer shares from owner (handles allowance)\n    if (owner != _msgSender()) {\n      _spendAllowance(owner, _msgSender(), shares);\n    }\n\n    // Calculate assets including bonus and burn shares\n    assets = previewRedeem(shares);\n    _burn(owner, shares);\n\n    // Pull the underlying tokens from vault and send to receiver\n    IERC20(asset()).transfer(receiver, assets);\n\n    emit Withdraw(_msgSender(), receiver, owner, assets, shares);\n  }\n\n  function withdraw(uint256 assets, address receiver, address owner) public override returns (uint256 shares) {\n    shares = previewWithdraw(assets);\n    redeem(shares, receiver, owner); // redeem already handles transfer & events\n  }\n}\n"
    },
    "contracts/mocks/MockOdosSwapper.sol": {
      "content": "// SPDX-License-Identifier: GNU AGPLv3\npragma solidity ^0.8.20;\n\nimport \"../odos/OdosSwapUtils.sol\";\nimport \"../odos/interface/IOdosRouterV2.sol\";\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title OdosSwapper (Mock)\n * @notice Mock contract for executing Odos swaps using OdosSwapUtils library. Placed under /mocks for testing purposes only.\n */\ncontract OdosSwapper {\n  using OdosSwapUtils for *;\n  using SafeERC20 for ERC20;\n\n  IOdosRouterV2 public immutable router;\n\n  constructor(address _router) {\n    router = IOdosRouterV2(payable(_router));\n  }\n\n  /**\n   * @notice Performs a swap operation using Odos router with provided swap data\n   * @param inputToken Address of the input token\n   * @param maxIn Maximum input amount approved for the swap\n   * @param exactOut Exact amount of output token expected\n   * @param swapData Encoded swap path data for Odos router\n   */\n  function executeSwapOperation(address inputToken, uint256 maxIn, uint256 exactOut, bytes calldata swapData) external {\n    ERC20(inputToken).safeTransferFrom(msg.sender, address(this), maxIn);\n    OdosSwapUtils.executeSwapOperation(router, inputToken, address(0), maxIn, exactOut, swapData);\n  }\n}\n"
    },
    "contracts/odos/interface/IOdosRouterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\n/**\n * @dev Interface for Odos Router V2.\n * @dev Generated from original ABI: https://fraxscan.com/address/0x56c85a254dd12ee8d9c04049a4ab62769ce98210#code\n */\npragma solidity ^0.8.20;\n\ninterface IOdosRouterV2 {\n  struct swapTokenInfo {\n    address inputToken;\n    uint256 inputAmount;\n    address inputReceiver;\n    address outputToken;\n    uint256 outputQuote;\n    uint256 outputMin;\n    address outputReceiver;\n  }\n\n  struct inputTokenInfo {\n    address tokenAddress;\n    uint256 amountIn;\n    address receiver;\n  }\n\n  struct outputTokenInfo {\n    address tokenAddress;\n    uint256 relativeValue;\n    address receiver;\n  }\n\n  struct permit2Info {\n    address contractAddress;\n    uint256 nonce;\n    uint256 deadline;\n    bytes signature;\n  }\n\n  event Swap(\n    address sender,\n    uint256 inputAmount,\n    address inputToken,\n    uint256 amountOut,\n    address outputToken,\n    int256 slippage,\n    uint32 referralCode\n  );\n\n  event SwapMulti(address sender, uint256[] amountsIn, address[] tokensIn, uint256[] amountsOut, address[] tokensOut, uint32 referralCode);\n\n  function FEE_DENOM() external view returns (uint256);\n\n  function REFERRAL_WITH_FEE_THRESHOLD() external view returns (uint256);\n\n  function addressList(uint256) external view returns (address);\n\n  function owner() external view returns (address);\n\n  function referralLookup(uint32) external view returns (uint64 referralFee, address beneficiary, bool registered);\n\n  function registerReferralCode(uint32 _referralCode, uint64 _referralFee, address _beneficiary) external;\n\n  function renounceOwnership() external;\n\n  function setSwapMultiFee(uint256 _swapMultiFee) external;\n\n  function swap(\n    swapTokenInfo calldata tokenInfo,\n    bytes calldata pathDefinition,\n    address executor,\n    uint32 referralCode\n  ) external payable returns (uint256 amountOut);\n\n  function swapCompact() external payable returns (uint256);\n\n  function swapMulti(\n    inputTokenInfo[] calldata inputs,\n    outputTokenInfo[] calldata outputs,\n    uint256 valueOutMin,\n    bytes calldata pathDefinition,\n    address executor,\n    uint32 referralCode\n  ) external payable returns (uint256[] memory amountsOut);\n\n  function swapMultiCompact() external payable returns (uint256[] memory amountsOut);\n\n  function swapMultiFee() external view returns (uint256);\n\n  function swapMultiPermit2(\n    permit2Info calldata permit2,\n    inputTokenInfo[] calldata inputs,\n    outputTokenInfo[] calldata outputs,\n    uint256 valueOutMin,\n    bytes calldata pathDefinition,\n    address executor,\n    uint32 referralCode\n  ) external payable returns (uint256[] memory amountsOut);\n\n  function swapPermit2(\n    permit2Info calldata permit2,\n    swapTokenInfo calldata tokenInfo,\n    bytes calldata pathDefinition,\n    address executor,\n    uint32 referralCode\n  ) external returns (uint256 amountOut);\n\n  function swapRouterFunds(\n    inputTokenInfo[] calldata inputs,\n    outputTokenInfo[] calldata outputs,\n    uint256 valueOutMin,\n    bytes calldata pathDefinition,\n    address executor\n  ) external returns (uint256[] memory amountsOut);\n\n  function transferOwnership(address newOwner) external;\n\n  function transferRouterFunds(address[] calldata tokens, uint256[] calldata amounts, address dest) external;\n\n  function writeAddressList(address[] calldata addresses) external;\n\n  receive() external payable;\n}\n"
    },
    "contracts/odos/OdosSwapLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title OdosSwapLogic\n/// @notice Library for handling Odos swap operations with surplus refund logic\nlibrary OdosSwapLogic {\n  using SafeERC20 for IERC20;\n\n  /// @dev Error when swap output is insufficient\n  error InsufficientOutput(uint256 expected, uint256 actual);\n\n  /// @dev Error when swap fails\n  error SwapFailed();\n\n  /// @notice Performs exact output swap with surplus refund\n  /// @param tokenIn Input token address\n  /// @param tokenOut Output token address\n  /// @param amountOut Exact amount of output tokens needed\n  /// @param amountInMaximum Maximum amount of input tokens to spend\n  /// @param receiver Address to receive any surplus output tokens\n  /// @param swapData Encoded swap data for the router\n  /// @param router Router address to execute the swap\n  /// @return amountInSpent Amount of input tokens actually spent\n  function swapExactOutput(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountOut,\n    uint256 amountInMaximum,\n    address receiver,\n    bytes memory swapData,\n    address router\n  ) external returns (uint256 amountInSpent) {\n    IERC20 inputToken = IERC20(tokenIn);\n    IERC20 outputToken = IERC20(tokenOut);\n\n    // Record initial balances\n    uint256 inputBalanceBefore = inputToken.balanceOf(address(this));\n    uint256 outputBalanceBefore = outputToken.balanceOf(address(this));\n\n    // Approve router to spend input tokens\n    inputToken.forceApprove(router, amountInMaximum);\n\n    // Execute the swap\n    (bool success, ) = router.call(swapData);\n    if (!success) {\n      revert SwapFailed();\n    }\n\n    // Check balances after swap\n    uint256 inputBalanceAfter = inputToken.balanceOf(address(this));\n    uint256 outputBalanceAfter = outputToken.balanceOf(address(this));\n\n    amountInSpent = inputBalanceBefore - inputBalanceAfter;\n    uint256 outputReceived = outputBalanceAfter - outputBalanceBefore;\n\n    // Ensure we received at least the required output\n    if (outputReceived < amountOut) {\n      revert InsufficientOutput(amountOut, outputReceived);\n    }\n\n    // If there's surplus output, send it to the receiver\n    if (outputReceived > amountOut) {\n      uint256 surplus = outputReceived - amountOut;\n      outputToken.safeTransfer(receiver, surplus);\n    }\n\n    // Reset allowance for security\n    inputToken.forceApprove(router, 0);\n  }\n}\n"
    },
    "contracts/odos/OdosSwapUtils.sol": {
      "content": "// SPDX-License-Identifier: GNU AGPLv3\npragma solidity ^0.8.20;\n\nimport \"./interface/IOdosRouterV2.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title OdosSwapUtils\n * @notice Library for handling Odos swaps in liquidator contracts\n */\nlibrary OdosSwapUtils {\n  using SafeERC20 for IERC20;\n\n  /// @notice Custom error for failed swap with no revert reason\n  error SwapFailed();\n  /// @notice Custom error when actual output amount is less than expected\n  error InsufficientOutput(uint256 expected, uint256 actual);\n\n  /**\n   * @notice Performs a swap operation using Odos router with swap data\n   * @param router Odos router contract\n   * @param inputToken Input token address\n   * @param outputToken Output token address\n   * @param maxIn Maximum input amount\n   * @param exactOut Exact output amount expected\n   * @param swapData Encoded swap path data\n   * @return actualAmountSpent The actual amount of input tokens spent\n   */\n  function executeSwapOperation(\n    IOdosRouterV2 router,\n    address inputToken,\n    address outputToken,\n    uint256 maxIn,\n    uint256 exactOut,\n    bytes memory swapData\n  ) internal returns (uint256 actualAmountSpent) {\n    uint256 outputBalanceBefore = IERC20(outputToken).balanceOf(address(this));\n\n    // Use forceApprove for external DEX router integration\n    IERC20(inputToken).forceApprove(address(router), maxIn);\n\n    (bool success, bytes memory result) = address(router).call(swapData);\n    if (!success) {\n      if (result.length > 0) {\n        assembly {\n          let resultLength := mload(result)\n          revert(add(32, result), resultLength)\n        }\n      }\n      revert SwapFailed();\n    }\n\n    assembly {\n      actualAmountSpent := mload(add(result, 32))\n    }\n\n    uint256 outputBalanceAfter = IERC20(outputToken).balanceOf(address(this));\n    uint256 actualAmountReceived = outputBalanceAfter - outputBalanceBefore;\n\n    if (actualAmountReceived < exactOut) {\n      revert InsufficientOutput(exactOut, actualAmountReceived);\n    }\n\n    IERC20(inputToken).approve(address(router), 0);\n\n    return actualAmountSpent;\n  }\n}\n"
    },
    "contracts/oracle_aggregator/chainlink/ChainlinkCompositeAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"../interface/chainlink/IAggregatorV3Interface.sol\";\nimport \"../wrapper/ThresholdingUtils.sol\";\n\n/**\n * @title ChainlinkCompositeAggregator\n * @notice Composes prices from two Chainlink price feeds with thresholding\n * @dev Implements AggregatorV3Interface to mimic being a Chainlink price feed\n *      Uses the same composition logic as RedstoneChainlinkCompositeWrapperWithThresholding\n */\ncontract ChainlinkCompositeAggregator is AggregatorV3Interface, ThresholdingUtils {\n  /// @notice First source Chainlink price feed\n  AggregatorV3Interface public immutable sourceFeed1;\n\n  /// @notice Second source Chainlink price feed\n  AggregatorV3Interface public immutable sourceFeed2;\n\n  /// @notice Target decimals for composite price (Chainlink standard: 8)\n  uint8 public constant override decimals = 8;\n\n  /// @notice Base currency unit for price normalization (10^8)\n  uint256 public constant CHAINLINK_BASE_CURRENCY_UNIT = 10 ** 8;\n\n  /// @notice Primary threshold configuration for sourceFeed1\n  ThresholdConfig public primaryThreshold;\n\n  /// @notice Secondary threshold configuration for sourceFeed2\n  ThresholdConfig public secondaryThreshold;\n\n  /// @notice Chainlink heartbeat period (24 hours)\n  uint256 public constant CHAINLINK_HEARTBEAT = 86400;\n\n  /// @notice Heartbeat stale time limit (additional buffer)\n  uint256 public constant heartbeatStaleTimeLimit = 3600; // 1 hour\n\n  /// @notice Error thrown when price is stale\n  error PriceIsStale();\n\n  /// @notice Error thrown when a feed address is zero\n  error ZeroFeedAddress();\n\n  /**\n   * @notice Constructor to initialize the composite wrapper\n   * @param _sourceFeed1 Address of the first source Chainlink price feed\n   * @param _sourceFeed2 Address of the second source Chainlink price feed\n   * @param _primaryThreshold Primary threshold configuration for feed1\n   * @param _secondaryThreshold Secondary threshold configuration for feed2\n   */\n  constructor(\n    address _sourceFeed1,\n    address _sourceFeed2,\n    ThresholdConfig memory _primaryThreshold,\n    ThresholdConfig memory _secondaryThreshold\n  ) {\n    // Validate feed addresses\n    if (_sourceFeed1 == address(0) || _sourceFeed2 == address(0)) {\n      revert ZeroFeedAddress();\n    }\n\n    sourceFeed1 = AggregatorV3Interface(_sourceFeed1);\n    sourceFeed2 = AggregatorV3Interface(_sourceFeed2);\n    primaryThreshold = _primaryThreshold;\n    secondaryThreshold = _secondaryThreshold;\n  }\n\n  /**\n   * @notice Returns the description of the composite feed\n   * @return Description string\n   */\n  function description() external view override returns (string memory) {\n    return string(abi.encodePacked(sourceFeed1.description(), \" x \", sourceFeed2.description(), \" (Composite)\"));\n  }\n\n  /**\n   * @notice Returns the version of the original feed\n   * @return Version number\n   */\n  function version() external pure override returns (uint256) {\n    return 1;\n  }\n\n  /**\n   * @notice Gets data for the latest round\n   * @return roundId The round ID\n   * @return answer The composite price with target decimals\n   * @return startedAt The timestamp when the round started\n   * @return updatedAt The timestamp when the round was updated\n   * @return answeredInRound The round in which the answer was computed\n   */\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    // Get latest data from both feeds\n    (uint80 roundId1, int256 answer1, uint256 startedAt1, uint256 updatedAt1, uint80 answeredInRound1) = sourceFeed1.latestRoundData();\n\n    (\n      ,\n      // roundId2,\n      int256 answer2,\n      uint256 startedAt2,\n      uint256 updatedAt2, // answeredInRound2\n\n    ) = sourceFeed2.latestRoundData();\n\n    // Check if prices are stale\n    if (\n      updatedAt1 + CHAINLINK_HEARTBEAT + heartbeatStaleTimeLimit <= block.timestamp ||\n      updatedAt2 + CHAINLINK_HEARTBEAT + heartbeatStaleTimeLimit <= block.timestamp\n    ) {\n      revert PriceIsStale();\n    }\n\n    // Use the latest timestamp from both feeds\n    uint256 latestUpdatedAt = updatedAt1 > updatedAt2 ? updatedAt1 : updatedAt2;\n    uint256 latestStartedAt = startedAt1 > startedAt2 ? startedAt1 : startedAt2;\n\n    // Calculate composite price using the same logic as Redstone wrapper\n    uint256 compositePrice = _calculateCompositePrice(answer1, answer2);\n\n    return (\n      roundId1, // Use the first feed's round ID\n      int256(compositePrice),\n      latestStartedAt,\n      latestUpdatedAt,\n      answeredInRound1 // Use the first feed's answeredInRound\n    );\n  }\n\n  /**\n   * @notice Gets data for a specific round\n   * @dev IMPORTANT: Due to Chainlink round ID divergence between feeds, this aggregator only supports latest data.\n   *      Historical round queries are not supported and will always return the latest available data.\n   *      Use latestRoundData() for the most recent price information.\n   * @param roundId (ignored, always returns latest data)\n   * @return roundId The round ID\n   * @return answer The composite price with target decimals\n   * @return startedAt The timestamp when the round started\n   * @return updatedAt The timestamp when the round was updated\n   * @return answeredInRound The round in which the answer was computed\n   */\n  function getRoundData(\n    uint80 /* _roundId */\n  ) external view override returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) {\n    // Delegate to latestRoundData to avoid round ID divergence issues\n    return this.latestRoundData();\n  }\n\n  /**\n   * @notice Calculate composite price using the same logic as Redstone wrapper\n   * @param answer1 Price from first feed\n   * @param answer2 Price from second feed\n   * @return Composite price in target decimals\n   */\n  function _calculateCompositePrice(int256 answer1, int256 answer2) internal view returns (uint256) {\n    // Convert negative answers to 0 (same as Redstone wrapper)\n    uint256 chainlinkPrice1 = answer1 > 0 ? uint256(answer1) : 0;\n    uint256 chainlinkPrice2 = answer2 > 0 ? uint256(answer2) : 0;\n\n    // Convert both prices to base currency unit first\n    uint256 priceInBase1 = _convertToBaseCurrencyUnit(chainlinkPrice1, sourceFeed1.decimals());\n    uint256 priceInBase2 = _convertToBaseCurrencyUnit(chainlinkPrice2, sourceFeed2.decimals());\n\n    // Apply thresholding to prices in base currency unit if specified\n    if (primaryThreshold.lowerThresholdInBase > 0) {\n      priceInBase1 = _applyThreshold(priceInBase1, primaryThreshold);\n    }\n    if (secondaryThreshold.lowerThresholdInBase > 0) {\n      priceInBase2 = _applyThreshold(priceInBase2, secondaryThreshold);\n    }\n\n    // Calculate composite price: (price1 * price2) / baseCurrencyUnit\n    return (priceInBase1 * priceInBase2) / CHAINLINK_BASE_CURRENCY_UNIT;\n  }\n\n  /**\n   * @notice Convert price to base currency unit (same logic as Redstone wrapper)\n   * @param price Price in source decimals\n   * @param sourceDecimals Decimal precision of the source price\n   * @return Price in base currency unit\n   */\n  function _convertToBaseCurrencyUnit(uint256 price, uint8 sourceDecimals) internal pure returns (uint256) {\n    if (sourceDecimals > decimals) {\n      // Scale down to target decimals\n      return price / (10 ** (sourceDecimals - decimals));\n    } else if (sourceDecimals < decimals) {\n      // Scale up to target decimals\n      return price * (10 ** (decimals - sourceDecimals));\n    }\n    return price;\n  }\n}\n"
    },
    "contracts/oracle_aggregator/chainlink/ChainlinkDecimalConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"../interface/chainlink/IAggregatorV3Interface.sol\";\n\n/**\n * @title ChainlinkDecimalConverter\n * @notice Converts between Chainlink price feeds with different decimal precisions\n * @dev Implements AggregatorV3Interface to mimic being a Chainlink price feed\n */\ncontract ChainlinkDecimalConverter is AggregatorV3Interface {\n  /// @notice Original Chainlink price feed\n  AggregatorV3Interface public immutable sourceFeed;\n\n  /// @notice Original decimals from the source feed\n  uint8 public immutable sourceDecimals;\n\n  /// @notice Target decimals for price conversion\n  uint8 public immutable override decimals;\n\n  /// @notice Scaling factor to convert between source and target decimals\n  int256 private immutable scalingFactor;\n\n  /**\n   * @notice Error thrown when target decimals exceed source decimals\n   */\n  error InvalidDecimalsUpscaleNotSupported();\n\n  /**\n   * @notice Constructor to initialize the decimal converter\n   * @param _sourceFeed Address of the source Chainlink price feed\n   * @param _targetDecimals Target decimal precision (must be less than or equal to source decimals)\n   */\n  constructor(address _sourceFeed, uint8 _targetDecimals) {\n    sourceFeed = AggregatorV3Interface(_sourceFeed);\n    sourceDecimals = sourceFeed.decimals();\n    decimals = _targetDecimals;\n\n    // We only support downscaling (reducing precision), not upscaling\n    if (_targetDecimals > sourceDecimals) {\n      revert InvalidDecimalsUpscaleNotSupported();\n    }\n\n    // Calculate the scaling factor to convert from source to target decimals\n    uint8 decimalDifference = sourceDecimals - _targetDecimals;\n    scalingFactor = int256(10 ** decimalDifference);\n  }\n\n  /**\n   * @notice Returns the description of the original feed\n   * @return Description string\n   */\n  function description() external view override returns (string memory) {\n    return sourceFeed.description();\n  }\n\n  /**\n   * @notice Returns the version of the original feed\n   * @return Version number\n   */\n  function version() external view override returns (uint256) {\n    return sourceFeed.version();\n  }\n\n  /**\n   * @notice Gets data for a specific round\n   * @param _roundId The round ID to retrieve data for\n   * @return roundId The round ID\n   * @return answer The price with adjusted decimals\n   * @return startedAt The timestamp when the round started\n   * @return updatedAt The timestamp when the round was updated\n   * @return answeredInRound The round in which the answer was computed\n   */\n  function getRoundData(\n    uint80 _roundId\n  ) external view override returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) {\n    (roundId, answer, startedAt, updatedAt, answeredInRound) = sourceFeed.getRoundData(_roundId);\n    answer = answer / scalingFactor;\n  }\n\n  /**\n   * @notice Gets data for the latest round\n   * @return roundId The round ID\n   * @return answer The price with adjusted decimals\n   * @return startedAt The timestamp when the round started\n   * @return updatedAt The timestamp when the round was updated\n   * @return answeredInRound The round in which the answer was computed\n   */\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    (roundId, answer, startedAt, updatedAt, answeredInRound) = sourceFeed.latestRoundData();\n    answer = answer / scalingFactor;\n  }\n}\n"
    },
    "contracts/oracle_aggregator/interface/chainlink/BaseChainlinkWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"../IOracleWrapper.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @title BaseChainlinkWrapper\n * @dev Abstract contract that implements the IOracleWrapper interface for Chainlink-style oracles\n * Provides common functionality for all Chainlink-compatible oracle wrappers\n */\nabstract contract BaseChainlinkWrapper is IOracleWrapper, AccessControl {\n  /* Core state */\n\n  uint256 public constant CHAINLINK_BASE_CURRENCY_UNIT = 10 ** 8; // Chainlink uses 8 decimals\n  uint256 public constant CHAINLINK_HEARTBEAT = 24 hours;\n  address private immutable _baseCurrency;\n  uint256 public immutable BASE_CURRENCY_UNIT;\n  uint256 public heartbeatStaleTimeLimit = 30 minutes;\n\n  /* Roles */\n\n  bytes32 public constant ORACLE_MANAGER_ROLE = keccak256(\"ORACLE_MANAGER_ROLE\");\n\n  /* Errors */\n\n  error PriceIsStale();\n  error InvalidPrice();\n  error FeedNotSet(address asset);\n\n  /**\n   * @dev Constructor that sets the base currency and base currency unit\n   * @param baseCurrency The address of the base currency (zero address for USD)\n   * @param _baseCurrencyUnit The decimal precision of the base currency (e.g., 1e8 for USD)\n   */\n  constructor(address baseCurrency, uint256 _baseCurrencyUnit) {\n    _baseCurrency = baseCurrency;\n    BASE_CURRENCY_UNIT = _baseCurrencyUnit;\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _grantRole(ORACLE_MANAGER_ROLE, msg.sender);\n  }\n\n  /**\n   * @notice Returns the base currency address\n   * @return Returns the base currency address\n   */\n  function BASE_CURRENCY() external view override returns (address) {\n    return _baseCurrency;\n  }\n\n  /**\n   * @notice Gets the price information for an asset\n   * @param asset The address of the asset to get the price for\n   * @return price The price of the asset in base currency units\n   * @return isAlive Whether the price feed is considered active/valid\n   */\n  function getPriceInfo(address asset) public view virtual override returns (uint256 price, bool isAlive);\n\n  /**\n   * @notice Gets the current price of an asset\n   * @param asset The address of the asset to get the price for\n   * @return The current price of the asset\n   */\n  function getAssetPrice(address asset) external view virtual override returns (uint256) {\n    (uint256 price, bool isAlive) = getPriceInfo(asset);\n    if (!isAlive) {\n      revert PriceIsStale();\n    }\n    return price;\n  }\n\n  /**\n   * @dev Converts a price from Chainlink decimals to base currency decimals\n   * @param price The price in Chainlink decimals\n   * @return The price in base currency decimals\n   */\n  function _convertToBaseCurrencyUnit(uint256 price) internal view returns (uint256) {\n    return (price * BASE_CURRENCY_UNIT) / CHAINLINK_BASE_CURRENCY_UNIT;\n  }\n\n  /**\n   * @notice Sets the heartbeat stale time limit\n   * @param _newHeartbeatStaleTimeLimit The new heartbeat stale time limit\n   */\n  function setHeartbeatStaleTimeLimit(uint256 _newHeartbeatStaleTimeLimit) external onlyRole(ORACLE_MANAGER_ROLE) {\n    heartbeatStaleTimeLimit = _newHeartbeatStaleTimeLimit;\n  }\n}\n"
    },
    "contracts/oracle_aggregator/interface/chainlink/IAggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/oracle_aggregator/interface/chainlink/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\ninterface IPriceFeed {\n  function decimals() external view returns (uint8);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/oracle_aggregator/interface/IOracleWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface for the individual oracle wrappers, to unify interface between different oracle providers\n */\ninterface IOracleWrapper {\n  /**\n   * @notice Returns the base currency address\n   * @dev Address 0x0 is commonly used for USD, but can be any token address based on the implementation.\n   * @return Returns the base currency address.\n   */\n  function BASE_CURRENCY() external view returns (address);\n\n  /**\n   * @notice Returns the base currency unit\n   * @dev Represents the decimal precision of the base currency (e.g., 1e8 for USD, 1e18 for ETH).\n   * @return Returns the base currency unit.\n   */\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\n\n  /**\n   * @notice Returns the asset price in the base currency\n   * @param asset The address of the asset\n   * @return The price of the asset\n   */\n  function getAssetPrice(address asset) external view returns (uint256);\n\n  /**\n   * @notice Returns the price and alive status of an asset\n   * @param asset The address of the asset\n   * @return price The price of the asset\n   * @return isAlive The alive status of the asset\n   */\n  function getPriceInfo(address asset) external view returns (uint256 price, bool isAlive);\n}\n"
    },
    "contracts/oracle_aggregator/OracleAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./interface/IOracleWrapper.sol\";\n\n/**\n * @title OracleAggregator\n * @notice Aggregates price data from multiple oracles\n * @dev Implements IPriceOracleGetter for compatibility with Aave\n */\ncontract OracleAggregator is AccessControl, IOracleWrapper {\n  /* Core state */\n\n  /// @notice Mapping from asset address to oracle address\n  mapping(address => address) public assetOracles;\n\n  /// @notice 1 Unit of base currency (10^priceDecimals)\n  uint256 public immutable baseCurrencyUnit;\n\n  /// @notice Address representing the base currency\n  address public immutable baseCurrency;\n\n  /* Events */\n\n  event OracleUpdated(address indexed asset, address indexed oracle);\n\n  /* Roles */\n\n  /// @notice Role for managing oracles\n  bytes32 public constant ORACLE_MANAGER_ROLE = keccak256(\"ORACLE_MANAGER_ROLE\");\n\n  /* Errors */\n  error UnexpectedBaseUnit(address asset, address oracle, uint256 expectedBaseUnit, uint256 oracleBaseUnit);\n  error OracleNotSet(address asset);\n  error PriceNotAlive(address asset);\n\n  /**\n   * @notice Constructor to initialize the OracleAggregator\n   * @param _baseCurrency Address of the base currency\n   * @param _baseCurrencyUnit Number of decimal places for price values\n   */\n  constructor(address _baseCurrency, uint256 _baseCurrencyUnit) {\n    baseCurrency = _baseCurrency;\n    baseCurrencyUnit = _baseCurrencyUnit;\n\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _grantRole(ORACLE_MANAGER_ROLE, msg.sender);\n  }\n\n  /**\n   * @notice Sets the oracle for a specific asset\n   * @param asset Address of the asset\n   * @param oracle Address of the oracle for the asset\n   */\n  function setOracle(address asset, address oracle) external onlyRole(ORACLE_MANAGER_ROLE) {\n    uint256 oracleBaseUnit = IOracleWrapper(oracle).BASE_CURRENCY_UNIT();\n    if (oracleBaseUnit != baseCurrencyUnit) {\n      revert UnexpectedBaseUnit(asset, oracle, baseCurrencyUnit, oracleBaseUnit);\n    }\n    assetOracles[asset] = oracle;\n    emit OracleUpdated(asset, oracle);\n  }\n\n  /**\n   * @notice Removes the oracle for a specific asset\n   * @param asset Address of the asset\n   */\n  function removeOracle(address asset) external onlyRole(ORACLE_MANAGER_ROLE) {\n    assetOracles[asset] = address(0);\n    emit OracleUpdated(asset, address(0));\n  }\n\n  /**\n   * @notice Returns the base currency\n   * @return Address representing the base currency\n   */\n  function BASE_CURRENCY() external view returns (address) {\n    return baseCurrency;\n  }\n\n  /**\n   * @notice Returns the base currency unit\n   * @return Base currency unit (10^priceDecimals)\n   */\n  function BASE_CURRENCY_UNIT() external view returns (uint256) {\n    return baseCurrencyUnit;\n  }\n\n  /**\n   * @notice Gets the price of an asset\n   * @param asset Address of the asset\n   * @return Price of the asset\n   */\n  function getAssetPrice(address asset) external view returns (uint256) {\n    (uint256 price, bool isAlive) = getPriceInfo(asset);\n    if (!isAlive) {\n      revert PriceNotAlive(asset);\n    }\n    return price;\n  }\n\n  /**\n   * @notice Gets the price info of an asset\n   * @param asset Address of the asset\n   * @return price Price of the asset\n   * @return isAlive Whether the price is considered valid\n   */\n  function getPriceInfo(address asset) public view returns (uint256 price, bool isAlive) {\n    address oracle = assetOracles[asset];\n    if (oracle == address(0)) {\n      revert OracleNotSet(asset);\n    }\n    return IOracleWrapper(oracle).getPriceInfo(asset);\n  }\n}\n"
    },
    "contracts/oracle_aggregator/wrapper/HardPegOracleWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"../interface/IOracleWrapper.sol\";\n\ncontract HardPegOracleWrapper is IOracleWrapper {\n  uint256 public immutable pricePeg;\n  address public immutable BASE_CURRENCY;\n\n  uint256 public BASE_CURRENCY_UNIT;\n\n  constructor(address _baseCurrency, uint256 _baseCurrencyUnit, uint256 _pricePeg) {\n    BASE_CURRENCY = _baseCurrency;\n    BASE_CURRENCY_UNIT = _baseCurrencyUnit;\n    pricePeg = _pricePeg;\n  }\n\n  /**\n   * @dev Get the price info of an asset\n   */\n  function getPriceInfo(\n    address // asset\n  ) external view returns (uint256 price, bool isAlive) {\n    return (pricePeg, true);\n  }\n\n  /**\n   * @dev Get the price of an asset\n   */\n  function getAssetPrice(\n    address // asset\n  ) external view override returns (uint256) {\n    return pricePeg;\n  }\n}\n"
    },
    "contracts/oracle_aggregator/wrapper/RedstoneChainlinkCompositeWrapperWithThresholding.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"../interface/chainlink/BaseChainlinkWrapper.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { IPriceFeed } from \"../interface/chainlink/IPriceFeed.sol\";\nimport \"./ThresholdingUtils.sol\";\n\n/**\n * @title RedstoneChainlinkCompositeWrapperWithThresholding\n * @dev Implementation of BaseChainlinkWrapper for composite Redstone oracles with thresholding\n */\ncontract RedstoneChainlinkCompositeWrapperWithThresholding is BaseChainlinkWrapper, ThresholdingUtils {\n  /* Core state */\n\n  struct CompositeFeed {\n    address feed1;\n    address feed2;\n    ThresholdConfig primaryThreshold; // Primary price source threshold config\n    ThresholdConfig secondaryThreshold; // Secondary price source threshold config\n  }\n\n  mapping(address => CompositeFeed) public compositeFeeds;\n\n  /* Events */\n\n  event CompositeFeedAdded(\n    address indexed asset,\n    address feed1,\n    address feed2,\n    uint256 lowerThresholdInBase1,\n    uint256 fixedPriceInBase1,\n    uint256 lowerThresholdInBase2,\n    uint256 fixedPriceInBase2\n  );\n  event CompositeFeedRemoved(address indexed asset);\n  event CompositeFeedUpdated(\n    address indexed asset,\n    uint256 lowerThresholdInBase1,\n    uint256 fixedPriceInBase1,\n    uint256 lowerThresholdInBase2,\n    uint256 fixedPriceInBase2\n  );\n\n  constructor(address baseCurrency, uint256 _baseCurrencyUnit) BaseChainlinkWrapper(baseCurrency, _baseCurrencyUnit) {\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _grantRole(ORACLE_MANAGER_ROLE, msg.sender);\n  }\n\n  function addCompositeFeed(\n    address asset,\n    address feed1,\n    address feed2,\n    uint256 lowerThresholdInBase1,\n    uint256 fixedPriceInBase1,\n    uint256 lowerThresholdInBase2,\n    uint256 fixedPriceInBase2\n  ) external onlyRole(ORACLE_MANAGER_ROLE) {\n    compositeFeeds[asset] = CompositeFeed({\n      feed1: feed1,\n      feed2: feed2,\n      primaryThreshold: ThresholdConfig({ lowerThresholdInBase: lowerThresholdInBase1, fixedPriceInBase: fixedPriceInBase1 }),\n      secondaryThreshold: ThresholdConfig({ lowerThresholdInBase: lowerThresholdInBase2, fixedPriceInBase: fixedPriceInBase2 })\n    });\n    emit CompositeFeedAdded(asset, feed1, feed2, lowerThresholdInBase1, fixedPriceInBase1, lowerThresholdInBase2, fixedPriceInBase2);\n  }\n\n  function removeCompositeFeed(address asset) external onlyRole(ORACLE_MANAGER_ROLE) {\n    delete compositeFeeds[asset];\n    emit CompositeFeedRemoved(asset);\n  }\n\n  function updateCompositeFeed(\n    address asset,\n    uint256 lowerThresholdInBase1,\n    uint256 fixedPriceInBase1,\n    uint256 lowerThresholdInBase2,\n    uint256 fixedPriceInBase2\n  ) external onlyRole(ORACLE_MANAGER_ROLE) {\n    CompositeFeed storage feed = compositeFeeds[asset];\n    if (feed.feed1 == address(0) || feed.feed2 == address(0)) {\n      revert FeedNotSet(asset);\n    }\n    feed.primaryThreshold.lowerThresholdInBase = lowerThresholdInBase1;\n    feed.primaryThreshold.fixedPriceInBase = fixedPriceInBase1;\n    feed.secondaryThreshold.lowerThresholdInBase = lowerThresholdInBase2;\n    feed.secondaryThreshold.fixedPriceInBase = fixedPriceInBase2;\n    emit CompositeFeedUpdated(asset, lowerThresholdInBase1, fixedPriceInBase1, lowerThresholdInBase2, fixedPriceInBase2);\n  }\n\n  function getPriceInfo(address asset) public view override returns (uint256 price, bool isAlive) {\n    CompositeFeed memory feed = compositeFeeds[asset];\n    if (feed.feed1 == address(0) || feed.feed2 == address(0)) {\n      revert FeedNotSet(asset);\n    }\n\n    (, int256 answer1, , uint256 updatedAt1, ) = IPriceFeed(feed.feed1).latestRoundData();\n\n    (, int256 answer2, , uint256 updatedAt2, ) = IPriceFeed(feed.feed2).latestRoundData();\n\n    uint256 chainlinkPrice1 = answer1 > 0 ? uint256(answer1) : 0;\n    uint256 chainlinkPrice2 = answer2 > 0 ? uint256(answer2) : 0;\n\n    // Convert both prices to BASE_CURRENCY_UNIT first\n    uint256 priceInBase1 = _convertToBaseCurrencyUnit(chainlinkPrice1);\n    uint256 priceInBase2 = _convertToBaseCurrencyUnit(chainlinkPrice2);\n\n    // Apply thresholding to prices in BASE_CURRENCY_UNIT if specified\n    if (feed.primaryThreshold.lowerThresholdInBase > 0) {\n      priceInBase1 = _applyThreshold(priceInBase1, feed.primaryThreshold);\n    }\n    if (feed.secondaryThreshold.lowerThresholdInBase > 0) {\n      priceInBase2 = _applyThreshold(priceInBase2, feed.secondaryThreshold);\n    }\n\n    price = (priceInBase1 * priceInBase2) / BASE_CURRENCY_UNIT;\n    isAlive =\n      price > 0 &&\n      updatedAt1 + CHAINLINK_HEARTBEAT + heartbeatStaleTimeLimit > block.timestamp &&\n      updatedAt2 + CHAINLINK_HEARTBEAT + heartbeatStaleTimeLimit > block.timestamp;\n  }\n\n  function getAssetPrice(address asset) external view override returns (uint256) {\n    (uint256 price, bool isAlive) = getPriceInfo(asset);\n    if (!isAlive) {\n      revert PriceIsStale();\n    }\n    return price;\n  }\n}\n"
    },
    "contracts/oracle_aggregator/wrapper/RedstoneChainlinkWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"../interface/chainlink/BaseChainlinkWrapper.sol\";\nimport \"../interface/chainlink/IPriceFeed.sol\";\n\n/**\n * @title RedstoneChainlinkWrapper\n * @dev Implementation of BaseChainlinkWrapper for Redstone oracle feeds that follow Chainlink AggregatorV3Interface\n */\ncontract RedstoneChainlinkWrapper is BaseChainlinkWrapper {\n  mapping(address => IPriceFeed) public assetToFeed;\n\n  constructor(address baseCurrency, uint256 _baseCurrencyUnit) BaseChainlinkWrapper(baseCurrency, _baseCurrencyUnit) {}\n\n  function getPriceInfo(address asset) public view virtual override returns (uint256 price, bool isAlive) {\n    IPriceFeed feed = assetToFeed[asset];\n    if (address(feed) == address(0)) {\n      revert FeedNotSet(asset);\n    }\n\n    (, int256 answer, , uint256 updatedAt, ) = feed.latestRoundData();\n\n    // Validate the oracle data\n    if (answer <= 0) {\n      revert InvalidPrice();\n    }\n\n    price = uint256(answer);\n    isAlive = updatedAt + CHAINLINK_HEARTBEAT + heartbeatStaleTimeLimit > block.timestamp;\n\n    price = _convertToBaseCurrencyUnit(price);\n  }\n\n  /**\n   * @notice Sets the price feed for an asset\n   * @param asset The address of the asset\n   * @param feed The address of the Redstone Chainlink-compatible price feed\n   */\n  function setFeed(address asset, address feed) external onlyRole(ORACLE_MANAGER_ROLE) {\n    assetToFeed[asset] = IPriceFeed(feed);\n  }\n}\n"
    },
    "contracts/oracle_aggregator/wrapper/RedstoneChainlinkWrapperWithThresholding.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"./RedstoneChainlinkWrapper.sol\";\nimport \"./ThresholdingUtils.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract RedstoneChainlinkWrapperWithThresholding is RedstoneChainlinkWrapper, ThresholdingUtils {\n  /* State */\n  mapping(address => ThresholdConfig) public assetThresholds;\n\n  /* Events */\n  event ThresholdConfigSet(address indexed asset, uint256 lowerThresholdInBase, uint256 fixedPriceInBase);\n  event ThresholdConfigRemoved(address indexed asset);\n\n  constructor(address baseCurrency, uint256 _baseCurrencyUnit) RedstoneChainlinkWrapper(baseCurrency, _baseCurrencyUnit) {}\n\n  function getPriceInfo(address asset) public view override returns (uint256 price, bool isAlive) {\n    (price, isAlive) = super.getPriceInfo(asset);\n    if (isAlive) {\n      ThresholdConfig memory config = assetThresholds[asset];\n      if (config.lowerThresholdInBase > 0) {\n        price = _applyThreshold(price, config);\n      }\n    }\n  }\n\n  function setThresholdConfig(\n    address asset,\n    uint256 lowerThresholdInBase,\n    uint256 fixedPriceInBase\n  ) external onlyRole(ORACLE_MANAGER_ROLE) {\n    assetThresholds[asset] = ThresholdConfig({ lowerThresholdInBase: lowerThresholdInBase, fixedPriceInBase: fixedPriceInBase });\n    emit ThresholdConfigSet(asset, lowerThresholdInBase, fixedPriceInBase);\n  }\n\n  function removeThresholdConfig(address asset) external onlyRole(ORACLE_MANAGER_ROLE) {\n    delete assetThresholds[asset];\n    emit ThresholdConfigRemoved(asset);\n  }\n}\n"
    },
    "contracts/oracle_aggregator/wrapper/ThresholdingUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nabstract contract ThresholdingUtils {\n  /* Types */\n  struct ThresholdConfig {\n    /// @notice The minimum price after which thresholding is applied. Not a price cap, but a trigger point.\n    /// @dev If lowerThresholdInBase == fixedPriceInBase: Acts as an upper threshold\n    /// @dev If lowerThresholdInBase < fixedPriceInBase: Acts as \"price rounding up\" (e.g. if USDC > 0.997 then round to 1)\n    /// @dev If lowerThresholdInBase > fixedPriceInBase: Acts as \"price rounding down\" (e.g. if USDC > 1.003 then round to 1)\n    uint256 lowerThresholdInBase;\n    uint256 fixedPriceInBase;\n  }\n\n  /**\n   * @notice Apply threshold to a price value\n   * @param priceInBase The price to check against threshold\n   * @param thresholdConfig The threshold configuration\n   * @return The original price or fixed price based on threshold\n   */\n  function _applyThreshold(uint256 priceInBase, ThresholdConfig memory thresholdConfig) internal pure returns (uint256) {\n    if (priceInBase > thresholdConfig.lowerThresholdInBase) {\n      return thresholdConfig.fixedPriceInBase;\n    }\n    return priceInBase;\n  }\n}\n"
    },
    "contracts/pendle/PendleChainlinkOracleFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n// Import Pendle contracts that we need for deployment\nimport \"@pendle/core-v2/contracts/interfaces/IPMarket.sol\";\nimport \"@pendle/core-v2/contracts/oracles/PtYtLpOracle/chainlink/PendleChainlinkOracleFactory.sol\";\nimport \"@pendle/core-v2/contracts/oracles/PtYtLpOracle/chainlink/PendleChainlinkOracle.sol\";\n"
    },
    "contracts/pendle/PendleSwapUtils.sol": {
      "content": "// SPDX-License-Identifier: GNU AGPLv3\npragma solidity ^0.8.20;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title PendleSwapUtils\n * @notice Library for handling Pendle PT token swaps using SDK-generated transaction data\n * @dev This library executes pre-computed transaction data from Pendle's hosted SDK\n */\nlibrary PendleSwapUtils {\n  using SafeERC20 for ERC20;\n\n  /// @notice Custom error for failed Pendle swap with no revert reason\n  error PendleSwapFailed();\n  /// @notice Custom error when PT token approval fails\n  error PTApprovalFailed();\n\n  /**\n   * @notice Executes a Pendle PT swap operation using SDK-generated transaction data\n   * @dev This function executes the swap and returns the actual amount spent from the swap result.\n   *      Underlying tokens go directly to the receiver specified in the Pendle SDK call data.\n   * @param ptToken The PT token being swapped\n   * @param ptAmount Amount of PT tokens to swap\n   * @param router Pendle router contract address from Pendle SDK\n   * @param swapData Transaction data from Pendle SDK\n   * @return amountSpent Actual amount spent from the Pendle swap result\n   */\n  function executePendleSwap(\n    address ptToken,\n    uint256 ptAmount,\n    address router,\n    bytes memory swapData\n  ) internal returns (uint256 amountSpent) {\n    // Approve PT tokens to target contract\n    ERC20(ptToken).forceApprove(router, ptAmount);\n\n    // Check if approval was successful\n    uint256 currentAllowance = ERC20(ptToken).allowance(address(this), router);\n    if (currentAllowance < ptAmount) {\n      revert PTApprovalFailed();\n    }\n\n    // Execute Pendle SDK transaction\n    (bool success, bytes memory result) = router.call(swapData);\n    if (!success) {\n      // Decode the revert reason if present\n      if (result.length > 0) {\n        assembly {\n          let resultLength := mload(result)\n          revert(add(32, result), resultLength)\n        }\n      }\n      revert PendleSwapFailed();\n    }\n\n    assembly {\n      amountSpent := mload(add(result, 32))\n    }\n\n    return amountSpent;\n  }\n}\n"
    },
    "contracts/testing/common/CompareHarness.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"contracts/common/Compare.sol\";\n\ncontract CompareHarness {\n  function isWithinTolerancePublic(uint256 observed, uint256 expected, uint256 tolerance) external pure returns (bool) {\n    return Compare.isWithinTolerance(observed, expected, tolerance);\n  }\n\n  function checkBalanceDeltaPublic(\n    uint256 beforeBalance,\n    uint256 afterBalance,\n    uint256 expectedDelta,\n    uint256 tolerance,\n    Compare.BalanceDirection direction\n  ) external pure returns (bool directionOk, uint256 observedDelta, bool toleranceOk) {\n    Compare.BalanceCheckResult memory result = Compare.checkBalanceDelta(beforeBalance, afterBalance, expectedDelta, tolerance, direction);\n    return (result.directionOk, result.observedDelta, result.toleranceOk);\n  }\n}\n"
    },
    "contracts/testing/dex/SimpleDEXMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"contracts/common/BasisPointConstants.sol\";\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @title SimpleDEXMock\n * @notice A mock decentralized exchange contract for testing purposes\n * @dev This contract mimics DEX behavior with configurable exchange rates and execution slippage\n */\ncontract SimpleDEXMock {\n  using SafeERC20 for IERC20;\n\n  // State variables\n  mapping(address => mapping(address => uint256)) public exchangeRates; // inputToken => outputToken => rate (in 18 decimals)\n  uint256 public executionSlippageBps; // Execution slippage in basis points\n\n  // Events\n  event ExchangeRateSet(address indexed inputToken, address indexed outputToken, uint256 rate);\n  event ExecutionSlippageSet(uint256 slippageBps);\n  event SwapExecuted(\n    address indexed inputToken,\n    address indexed outputToken,\n    uint256 amountIn,\n    uint256 amountOut,\n    address indexed receiver,\n    string swapType\n  );\n\n  // Errors\n  error ZeroAddress();\n  error ZeroAmount();\n  error ExchangeRateNotSet();\n  error InsufficientOutputAmount(uint256 actual, uint256 minimum);\n  error ExcessiveInputAmount(uint256 actual, uint256 maximum);\n  error InsufficientBalance(address token, uint256 requested, uint256 available);\n  error InsufficientAllowance(address token, uint256 requested, uint256 available);\n  error TransferFailed();\n\n  /**\n   * @notice Constructor\n   */\n  constructor() {\n    executionSlippageBps = 0; // Default no execution slippage\n  }\n\n  /**\n   * @notice Set exchange rate for a token pair\n   * @param inputToken The input token address\n   * @param outputToken The output token address\n   * @param rate The exchange rate (how much outputToken per 1 inputToken, in 18 decimals)\n   */\n  function setExchangeRate(address inputToken, address outputToken, uint256 rate) external {\n    if (inputToken == address(0) || outputToken == address(0)) {\n      revert ZeroAddress();\n    }\n    if (rate == 0) {\n      revert ZeroAmount();\n    }\n\n    exchangeRates[inputToken][outputToken] = rate;\n    emit ExchangeRateSet(inputToken, outputToken, rate);\n  }\n\n  /**\n   * @notice Set execution slippage in basis points\n   * @param slippageBps The execution slippage (e.g., 20000 = 2%)\n   */\n  function setExecutionSlippage(uint256 slippageBps) external {\n    if (slippageBps >= BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\n      revert(\"Execution slippage cannot be 100% or more\");\n    }\n    executionSlippageBps = slippageBps;\n    emit ExecutionSlippageSet(slippageBps);\n  }\n\n  /**\n   * @notice Execute swap with exact input amount\n   * @param inputToken The input token to swap from\n   * @param outputToken The output token to swap to\n   * @param amountIn The exact amount of input tokens to swap\n   * @param amountOutMinimum The minimum amount of output tokens expected\n   * @param receiver The address to receive the output tokens\n   * @return amountOut The actual amount of output tokens transferred\n   */\n  function executeSwapExactInput(\n    IERC20Metadata inputToken,\n    IERC20Metadata outputToken,\n    uint256 amountIn,\n    uint256 amountOutMinimum,\n    address receiver\n  ) external returns (uint256 amountOut) {\n    if (address(inputToken) == address(0) || address(outputToken) == address(0)) {\n      revert ZeroAddress();\n    }\n    if (receiver == address(0)) {\n      revert ZeroAddress();\n    }\n    if (amountIn == 0) {\n      revert ZeroAmount();\n    }\n\n    // Check exchange rate exists\n    uint256 rate = exchangeRates[address(inputToken)][address(outputToken)];\n    if (rate == 0) {\n      revert ExchangeRateNotSet();\n    }\n\n    // Check allowance\n    uint256 allowance = inputToken.allowance(msg.sender, address(this));\n    if (allowance < amountIn) {\n      revert InsufficientAllowance(address(inputToken), amountIn, allowance);\n    }\n\n    // Calculate output amount before slippage\n    uint256 outputBeforeSlippage = _calculateOutputAmount(amountIn, rate, inputToken.decimals(), outputToken.decimals());\n\n    // Apply execution slippage\n    amountOut = _applyExecutionSlippage(outputBeforeSlippage);\n\n    // Check minimum output\n    if (amountOut < amountOutMinimum) {\n      revert InsufficientOutputAmount(amountOut, amountOutMinimum);\n    }\n\n    // Check contract has enough output tokens\n    uint256 contractBalance = outputToken.balanceOf(address(this));\n    if (contractBalance < amountOut) {\n      revert InsufficientBalance(address(outputToken), amountOut, contractBalance);\n    }\n\n    // Execute the swap\n    IERC20(inputToken).safeTransferFrom(msg.sender, address(this), amountIn);\n    IERC20(outputToken).safeTransfer(receiver, amountOut);\n\n    emit SwapExecuted(address(inputToken), address(outputToken), amountIn, amountOut, receiver, \"ExactInput\");\n\n    return amountOut;\n  }\n\n  /**\n   * @notice Execute swap with exact output amount\n   * @param inputToken The input token to swap from\n   * @param outputToken The output token to swap to\n   * @param amountOut The exact amount of output tokens to receive\n   * @param amountInMaximum The maximum amount of input tokens to spend\n   * @param receiver The address to receive the output tokens\n   * @return amountIn The actual amount of input tokens spent\n   */\n  function executeSwapExactOutput(\n    IERC20Metadata inputToken,\n    IERC20Metadata outputToken,\n    uint256 amountOut,\n    uint256 amountInMaximum,\n    address receiver\n  ) external returns (uint256 amountIn) {\n    if (address(inputToken) == address(0) || address(outputToken) == address(0)) {\n      revert ZeroAddress();\n    }\n    if (receiver == address(0)) {\n      revert ZeroAddress();\n    }\n    if (amountOut == 0) {\n      revert ZeroAmount();\n    }\n\n    // Check exchange rate exists\n    uint256 rate = exchangeRates[address(inputToken)][address(outputToken)];\n    if (rate == 0) {\n      revert ExchangeRateNotSet();\n    }\n\n    // Check contract has enough output tokens\n    uint256 contractBalance = outputToken.balanceOf(address(this));\n    if (contractBalance < amountOut) {\n      revert InsufficientBalance(address(outputToken), amountOut, contractBalance);\n    }\n\n    // Calculate required input amount considering execution slippage\n    // We need to calculate how much input is needed to get amountOut after slippage\n    uint256 amountOutBeforeSlippage = _reverseExecutionSlippage(amountOut);\n\n    amountIn = _calculateInputAmount(amountOutBeforeSlippage, rate, inputToken.decimals(), outputToken.decimals());\n\n    // Check maximum input\n    if (amountIn > amountInMaximum) {\n      revert ExcessiveInputAmount(amountIn, amountInMaximum);\n    }\n\n    // Check allowance\n    uint256 allowance = inputToken.allowance(msg.sender, address(this));\n    if (allowance < amountIn) {\n      revert InsufficientAllowance(address(inputToken), amountIn, allowance);\n    }\n\n    // Execute the swap\n    IERC20(inputToken).safeTransferFrom(msg.sender, address(this), amountIn);\n    IERC20(outputToken).safeTransfer(receiver, amountOut);\n\n    emit SwapExecuted(address(inputToken), address(outputToken), amountIn, amountOut, receiver, \"ExactOutput\");\n\n    return amountIn;\n  }\n\n  /**\n   * @notice Get the exchange rate for a token pair\n   * @param inputToken The input token address\n   * @param outputToken The output token address\n   * @return rate The exchange rate (18 decimals)\n   */\n  function getExchangeRate(address inputToken, address outputToken) external view returns (uint256 rate) {\n    return exchangeRates[inputToken][outputToken];\n  }\n\n  /**\n   * @notice Preview output amount for exact input swap\n   * @param inputToken The input token\n   * @param outputToken The output token\n   * @param amountIn The input amount\n   * @return amountOut The expected output amount (after execution slippage)\n   */\n  function previewSwapExactInput(\n    IERC20Metadata inputToken,\n    IERC20Metadata outputToken,\n    uint256 amountIn\n  ) external view returns (uint256 amountOut) {\n    uint256 rate = exchangeRates[address(inputToken)][address(outputToken)];\n    if (rate == 0) {\n      return 0;\n    }\n\n    uint256 outputBeforeSlippage = _calculateOutputAmount(amountIn, rate, inputToken.decimals(), outputToken.decimals());\n\n    return _applyExecutionSlippage(outputBeforeSlippage);\n  }\n\n  /**\n   * @notice Preview input amount for exact output swap\n   * @param inputToken The input token\n   * @param outputToken The output token\n   * @param amountOut The output amount\n   * @return amountIn The expected input amount required\n   */\n  function previewSwapExactOutput(\n    IERC20Metadata inputToken,\n    IERC20Metadata outputToken,\n    uint256 amountOut\n  ) external view returns (uint256 amountIn) {\n    uint256 rate = exchangeRates[address(inputToken)][address(outputToken)];\n    if (rate == 0) {\n      return 0;\n    }\n\n    uint256 amountOutBeforeSlippage = _reverseExecutionSlippage(amountOut);\n\n    return _calculateInputAmount(amountOutBeforeSlippage, rate, inputToken.decimals(), outputToken.decimals());\n  }\n\n  /**\n   * @notice Calculate output amount from input amount and rate\n   * @param amountIn The input amount\n   * @param rate The exchange rate (18 decimals)\n   * @param inputDecimals The input token decimals\n   * @param outputDecimals The output token decimals\n   * @return outputAmount The calculated output amount\n   */\n  function _calculateOutputAmount(\n    uint256 amountIn,\n    uint256 rate,\n    uint8 inputDecimals,\n    uint8 outputDecimals\n  ) internal pure returns (uint256 outputAmount) {\n    // Convert input to 18 decimals for calculation\n    uint256 normalizedInput = amountIn;\n    if (inputDecimals < 18) {\n      normalizedInput = amountIn * (10 ** (18 - inputDecimals));\n    } else if (inputDecimals > 18) {\n      normalizedInput = amountIn / (10 ** (inputDecimals - 18));\n    }\n\n    // Calculate output in 18 decimals: input * rate / 1e18\n    uint256 normalizedOutput = (normalizedInput * rate) / 1e18;\n\n    // Convert output to token decimals\n    if (outputDecimals < 18) {\n      outputAmount = normalizedOutput / (10 ** (18 - outputDecimals));\n    } else if (outputDecimals > 18) {\n      outputAmount = normalizedOutput * (10 ** (outputDecimals - 18));\n    } else {\n      outputAmount = normalizedOutput;\n    }\n\n    return outputAmount;\n  }\n\n  /**\n   * @notice Calculate input amount from output amount and rate\n   * @param amountOut The output amount\n   * @param rate The exchange rate (18 decimals)\n   * @param inputDecimals The input token decimals\n   * @param outputDecimals The output token decimals\n   * @return inputAmount The calculated input amount\n   */\n  function _calculateInputAmount(\n    uint256 amountOut,\n    uint256 rate,\n    uint8 inputDecimals,\n    uint8 outputDecimals\n  ) internal pure returns (uint256 inputAmount) {\n    // Convert output to 18 decimals for calculation\n    uint256 normalizedOutput = amountOut;\n    if (outputDecimals < 18) {\n      normalizedOutput = amountOut * (10 ** (18 - outputDecimals));\n    } else if (outputDecimals > 18) {\n      normalizedOutput = amountOut / (10 ** (outputDecimals - 18));\n    }\n\n    // Calculate input in 18 decimals: output * 1e18 / rate\n    uint256 normalizedInput = (normalizedOutput * 1e18) / rate;\n\n    // Convert input to token decimals\n    if (inputDecimals < 18) {\n      inputAmount = normalizedInput / (10 ** (18 - inputDecimals));\n    } else if (inputDecimals > 18) {\n      inputAmount = normalizedInput * (10 ** (inputDecimals - 18));\n    } else {\n      inputAmount = normalizedInput;\n    }\n\n    return inputAmount;\n  }\n\n  /**\n   * @notice Apply execution slippage to reduce output amount\n   * @param amount The original amount\n   * @return slippedAmount The amount after applying execution slippage\n   */\n  function _applyExecutionSlippage(uint256 amount) internal view returns (uint256 slippedAmount) {\n    if (executionSlippageBps == 0) {\n      return amount;\n    }\n\n    // Reduce by execution slippage: amount * (100% - slippage%) / 100%\n    slippedAmount = Math.mulDiv(\n      amount,\n      BasisPointConstants.ONE_HUNDRED_PERCENT_BPS - executionSlippageBps,\n      BasisPointConstants.ONE_HUNDRED_PERCENT_BPS\n    );\n\n    return slippedAmount;\n  }\n\n  /**\n   * @notice Reverse execution slippage to calculate required amount before slippage\n   * @param targetAmount The target amount after slippage\n   * @return originalAmount The amount needed before slippage\n   */\n  function _reverseExecutionSlippage(uint256 targetAmount) internal view returns (uint256 originalAmount) {\n    if (executionSlippageBps == 0) {\n      return targetAmount;\n    }\n\n    // Calculate original amount: targetAmount * 100% / (100% - slippage%)\n    originalAmount = Math.mulDiv(\n      targetAmount,\n      BasisPointConstants.ONE_HUNDRED_PERCENT_BPS,\n      BasisPointConstants.ONE_HUNDRED_PERCENT_BPS - executionSlippageBps\n    );\n\n    return originalAmount;\n  }\n\n  /**\n   * @notice Emergency function to withdraw tokens (for testing purposes)\n   * @param token The token to withdraw\n   * @param amount The amount to withdraw\n   * @param to The recipient address\n   */\n  function emergencyWithdraw(IERC20 token, uint256 amount, address to) external {\n    if (to == address(0)) {\n      revert ZeroAddress();\n    }\n    token.safeTransfer(to, amount);\n  }\n}\n"
    },
    "contracts/testing/dstake/MockUnderDeliveringAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IDStableConversionAdapter } from \"contracts/vaults/dstake/interfaces/IDStableConversionAdapter.sol\";\nimport { IMintableERC20 } from \"contracts/common/IMintableERC20.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title MockUnderDeliveringAdapter\n * @notice Test adapter that intentionally under-delivers vault asset shares compared to the preview result.\n *         Used only in Hardhat tests to verify router slippage protections.\n */\ncontract MockUnderDeliveringAdapter is IDStableConversionAdapter {\n  using SafeERC20 for IERC20;\n\n  address public immutable dStable;\n  address public immutable collateralVault;\n  IMintableERC20 public immutable vaultAssetToken;\n\n  uint256 public immutable factorBps; // e.g. 9000 => mints 90% of preview amount\n\n  error InvalidFactor();\n\n  constructor(address _dStable, address _collateralVault, IMintableERC20 _vaultAssetToken, uint256 _factorBps) {\n    if (_factorBps == 0 || _factorBps > 10_000) revert InvalidFactor();\n    dStable = _dStable;\n    collateralVault = _collateralVault;\n    vaultAssetToken = _vaultAssetToken;\n    factorBps = _factorBps;\n  }\n\n  // ---------------- IDStableConversionAdapter ----------------\n\n  function convertToVaultAsset(uint256 dStableAmount) external override returns (address, uint256) {\n    // Pull dStable from caller\n    IERC20(dStable).safeTransferFrom(msg.sender, address(this), dStableAmount);\n\n    uint256 shares = (dStableAmount * factorBps) / 10_000;\n\n    // Mint shares directly to collateral vault (simulating under-delivery)\n    vaultAssetToken.mint(collateralVault, shares);\n\n    return (address(vaultAssetToken), shares);\n  }\n\n  function convertFromVaultAsset(uint256 vaultAssetAmount) external pure override returns (uint256) {\n    // Not needed for this mock; revert to prevent unexpected use\n    revert(\"Not implemented\");\n  }\n\n  function previewConvertToVaultAsset(uint256 dStableAmount) external view override returns (address, uint256) {\n    // Preview assumes 1:1 conversion\n    return (address(vaultAssetToken), dStableAmount);\n  }\n\n  function previewConvertFromVaultAsset(uint256 vaultAssetAmount) external pure override returns (uint256) {\n    return vaultAssetAmount; // 1:1\n  }\n\n  function assetValueInDStable(address /*vaultAsset*/, uint256 vaultAssetAmount) external pure override returns (uint256) {\n    return vaultAssetAmount;\n  }\n\n  function vaultAsset() external view override returns (address) {\n    return address(vaultAssetToken);\n  }\n}\n"
    },
    "contracts/testing/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title MockERC20\n * @dev Simple ERC20 token for testing purposes.\n */\ncontract MockERC20 is ERC20 {\n  constructor(string memory name_, string memory symbol_, uint256 initialSupply) ERC20(name_, symbol_) {\n    _mint(msg.sender, initialSupply);\n  }\n}\n"
    },
    "contracts/testing/odos/MockOdosRouterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title MockOdosRouterV2\n/// @notice Very light-weight mock that emulates the minimal behaviour that the production contracts rely on:\n///  – Taking an allowance via `transferFrom` for the *actual* amount spent (configured)\n///  – Sending the configured output tokens to the caller\n///  – Returning the amount spent as a single uint256 word (encoded) so that\n///    `OdosSwapUtils.executeSwapOperation()` can `mload` it.\n/// The contract does **not** attempt to replicate the real Odos router API. Tests encode a call to\n/// `performSwap()` and pass the resulting `bytes` as `swapData` for the low-level call used by the library.\ncontract MockOdosRouterV2 {\n  struct Behaviour {\n    address inputToken;\n    address outputToken;\n    uint256 amountSpent;\n    uint256 amountReceived;\n    bool shouldRevert;\n  }\n\n  Behaviour public behaviour;\n\n  /// @notice Configure the next swap behaviour\n  function setSwapBehaviour(\n    address _inputToken,\n    address _outputToken,\n    uint256 _amountSpent,\n    uint256 _amountReceived,\n    bool _shouldRevert\n  ) external {\n    behaviour = Behaviour({\n      inputToken: _inputToken,\n      outputToken: _outputToken,\n      amountSpent: _amountSpent,\n      amountReceived: _amountReceived,\n      shouldRevert: _shouldRevert\n    });\n  }\n\n  /// @notice Called via low-level `.call(swapData)` in tests\n  /// @dev Signature deliberately simple – no parameters needed because behaviour is pre-configured.\n  /// @return amountSpent The value configured in `setSwapBehaviour()`\n  function performSwap() external returns (uint256 amountSpent) {\n    Behaviour memory b = behaviour;\n\n    if (b.shouldRevert) revert(\"MOCK_ROUTER_REVERT\");\n\n    // Pull input tokens from the caller and send output tokens back\n    if (b.amountSpent > 0) {\n      IERC20(b.inputToken).transferFrom(msg.sender, address(this), b.amountSpent);\n    }\n    if (b.amountReceived > 0) {\n      IERC20(b.outputToken).transfer(msg.sender, b.amountReceived);\n    }\n\n    return b.amountSpent;\n  }\n}\n"
    },
    "contracts/testing/odos/OdosSwapLogicHarness.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../odos/OdosSwapLogic.sol\";\n\n/// @title OdosSwapLogicHarness\n/// @notice Test harness for OdosSwapLogic library\ncontract OdosSwapLogicHarness {\n  using OdosSwapLogic for *;\n\n  /// @notice External wrapper for testing OdosSwapLogic.swapExactOutput\n  function callSwapExactOutput(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountOut,\n    uint256 amountInMaximum,\n    address receiver,\n    bytes memory swapData,\n    address router\n  ) external returns (uint256 amountInSpent) {\n    return OdosSwapLogic.swapExactOutput(tokenIn, tokenOut, amountOut, amountInMaximum, receiver, swapData, router);\n  }\n\n  /// @notice Allow contract to receive tokens\n  receive() external payable {}\n}\n"
    },
    "contracts/testing/odos/OdosSwapUtilsHarness.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IOdosRouterV2 } from \"contracts/odos/interface/IOdosRouterV2.sol\";\nimport { OdosSwapUtils } from \"contracts/odos/OdosSwapUtils.sol\";\n\n/// @title OdosSwapUtilsHarness\n/// @dev Wraps the internal library call in a public function usable from tests.\ncontract OdosSwapUtilsHarness {\n  function callExecuteSwap(\n    IOdosRouterV2 router,\n    address inputToken,\n    address outputToken,\n    uint256 maxIn,\n    uint256 exactOut,\n    bytes calldata swapData\n  ) external returns (uint256 amountSpent) {\n    amountSpent = OdosSwapUtils.executeSwapOperation(router, inputToken, outputToken, maxIn, exactOut, swapData);\n  }\n}\n"
    },
    "contracts/testing/odos/TestBuyAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @dev DISABLED: This file is disabled because the dlend module was removed.\n/// Original functionality was a dummy implementation of BaseOdosBuyAdapter exposing internal function for tests.\n\n// Empty contract to satisfy compilation - all functionality removed due to dlend module removal\ncontract TestBuyAdapter {\n  // This contract is disabled - functionality removed due to missing dlend dependencies\n}\n"
    },
    "contracts/testing/odos/TestSellAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @dev DISABLED: This file is disabled because the dlend module was removed.\n/// Original functionality was a dummy implementation of BaseOdosSellAdapter exposing internal function for tests.\n\n// Empty contract to satisfy compilation - all functionality removed due to dlend module removal\ncontract TestSellAdapter {\n  // This contract is disabled - functionality removed due to missing dlend dependencies\n}\n"
    },
    "contracts/testing/oracle/MockChainlinkAggregatorV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"../../oracle_aggregator/interface/chainlink/IAggregatorV3Interface.sol\";\n\ncontract MockChainlinkAggregatorV3 is AggregatorV3Interface {\n  int256 private mockPrice;\n  uint80 private mockRoundId;\n  uint8 private mockDecimals;\n  string private mockDescription;\n  uint256 private mockUpdatedAt;\n\n  constructor(uint8 _decimals, string memory _description) {\n    mockRoundId = 1;\n    mockDecimals = _decimals;\n    mockDescription = _description;\n    mockUpdatedAt = block.timestamp;\n  }\n\n  function decimals() external view override returns (uint8) {\n    return mockDecimals;\n  }\n\n  function description() external view override returns (string memory) {\n    return mockDescription;\n  }\n\n  function version() external pure override returns (uint256) {\n    return 1;\n  }\n\n  function setMock(int256 _price) external {\n    mockPrice = _price;\n    mockRoundId++;\n    mockUpdatedAt = block.timestamp;\n  }\n\n  function setMockWithTimestamp(int256 _price, uint256 _timestamp) external {\n    mockPrice = _price;\n    mockRoundId++;\n    mockUpdatedAt = _timestamp;\n  }\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view override returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) {\n    return (_roundId, mockPrice, mockUpdatedAt, mockUpdatedAt, _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (mockRoundId, mockPrice, mockUpdatedAt, mockUpdatedAt, mockRoundId);\n  }\n}\n"
    },
    "contracts/testing/oracle/MockOracleAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport { IOracleWrapper } from \"../../oracle_aggregator/interface/IOracleWrapper.sol\";\n\ncontract MockOracleAggregator is IOracleWrapper {\n  address public immutable BASE_CURRENCY;\n  uint256 public immutable BASE_CURRENCY_UNIT;\n\n  mapping(address => uint256) public prices;\n  mapping(address => bool) public isAlive;\n\n  constructor(address _baseCurrency, uint256 _baseCurrencyUnit) {\n    BASE_CURRENCY = _baseCurrency;\n    BASE_CURRENCY_UNIT = _baseCurrencyUnit;\n  }\n\n  function setAssetPrice(address _asset, uint256 _price) external {\n    if (_asset == BASE_CURRENCY) {\n      revert(\"Cannot set price for base currency\");\n    }\n\n    prices[_asset] = _price;\n    isAlive[_asset] = true;\n  }\n\n  function setAssetAlive(address _asset, bool _isAlive) external {\n    isAlive[_asset] = _isAlive;\n  }\n\n  function getAssetPrice(address _asset) external view override returns (uint256) {\n    if (_asset == BASE_CURRENCY) {\n      return BASE_CURRENCY_UNIT;\n    }\n\n    uint256 _price = prices[_asset];\n    require(isAlive[_asset], \"Price feed is not alive\");\n\n    return _price;\n  }\n\n  function getPriceInfo(address _asset) external view override returns (uint256 price, bool _isAlive) {\n    if (_asset == BASE_CURRENCY) {\n      return (BASE_CURRENCY_UNIT, true);\n    }\n\n    price = prices[_asset];\n    _isAlive = isAlive[_asset];\n\n    return (price, _isAlive);\n  }\n}\n"
    },
    "contracts/testing/oracle/MockRedstoneChainlinkOracleAlwaysAlive.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport { IPriceFeed } from \"../../oracle_aggregator/interface/chainlink/IPriceFeed.sol\";\n\ncontract MockRedstoneChainlinkOracleAlwaysAlive is IPriceFeed {\n  int256 private mockPrice;\n  uint80 private mockRoundId;\n\n  constructor() {\n    mockRoundId = 1;\n  }\n\n  function decimals() external pure override returns (uint8) {\n    return 8;\n  }\n\n  function setMock(int256 _price) external {\n    mockPrice = _price;\n    mockRoundId++;\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (mockRoundId, mockPrice, block.timestamp, block.timestamp, mockRoundId);\n  }\n}\n"
    },
    "contracts/testing/pendle/PendleSwapPOC.sol": {
      "content": "// SPDX-License-Identifier: GNU AGPLv3\npragma solidity ^0.8.20;\n\nimport \"../../pendle/PendleSwapUtils.sol\";\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title PendleSwapPOC\n * @notice Proof of Concept contract to test Pendle SDK integration\n * @dev This contract demonstrates how to execute Pendle swaps using off-chain computed transaction data\n *\n * User Flow:\n * 1. User approves this contract to spend their PT tokens: ptToken.approve(contractAddress, amount)\n * 2. User calls executePendleSwap() with Pendle SDK generated transaction data (receiver = this contract)\n * 3. Contract pulls PT tokens from user, executes the swap via Pendle SDK\n * 4. Contract receives underlying tokens and transfers them back to the user\n *\n * Helper functions:\n * - getUserBalance(): Check user's PT token balance\n * - checkAllowance(): Check how much the contract is approved to spend\n */\ncontract PendleSwapPOC {\n  using SafeERC20 for ERC20;\n  using PendleSwapUtils for *;\n\n  /// @notice Event emitted when a Pendle swap is executed successfully\n  event PendleSwapExecuted(\n    address indexed user,\n    address indexed ptToken,\n    address indexed underlyingToken,\n    uint256 ptAmountIn,\n    uint256 amountSpent,\n    address target\n  );\n\n  /// @notice Event emitted when funds are received\n  event FundsReceived(address indexed token, uint256 amount);\n\n  /**\n   * @notice Execute a PT token swap using Pendle SDK transaction data\n   * @dev This function pulls PT tokens from the user, executes the swap, and transfers\n   *      the underlying tokens back to the user.\n   * @param ptToken The PT token to swap\n   * @param underlyingToken The underlying token that will be received from the swap\n   * @param ptAmount Amount of PT tokens to swap\n   * @param router Pendle router contract address from Pendle SDK\n   * @param swapData Transaction data from Pendle SDK\n   * @return amountSpent Actual amount spent from the Pendle swap result\n   */\n  function executePendleSwap(\n    address ptToken,\n    address underlyingToken,\n    uint256 ptAmount,\n    address router,\n    bytes calldata swapData\n  ) external returns (uint256 amountSpent) {\n    // Pull PT tokens from user\n    ERC20(ptToken).safeTransferFrom(msg.sender, address(this), ptAmount);\n\n    // Record underlying token balance before swap\n    uint256 underlyingBalanceBefore = ERC20(underlyingToken).balanceOf(address(this));\n\n    // Execute the swap using PendleSwapUtils\n    amountSpent = PendleSwapUtils.executePendleSwap(ptToken, ptAmount, router, swapData);\n\n    // Calculate underlying tokens received\n    uint256 underlyingBalanceAfter = ERC20(underlyingToken).balanceOf(address(this));\n    uint256 underlyingReceived = underlyingBalanceAfter - underlyingBalanceBefore;\n\n    // Transfer underlying tokens back to user\n    if (underlyingReceived > 0) {\n      ERC20(underlyingToken).safeTransfer(msg.sender, underlyingReceived);\n    }\n\n    emit PendleSwapExecuted(msg.sender, ptToken, underlyingToken, ptAmount, amountSpent, router);\n\n    return amountSpent;\n  }\n\n  /**\n   * @notice Check how many PT tokens the user has approved for this contract\n   * @param ptToken The PT token to check\n   * @param user The user address to check\n   * @return allowance Current allowance amount\n   */\n  function checkAllowance(address ptToken, address user) external view returns (uint256 allowance) {\n    return ERC20(ptToken).allowance(user, address(this));\n  }\n\n  /**\n   * @notice Check PT token balance of a user\n   * @param ptToken The PT token to check\n   * @param user The user address to check\n   * @return balance User's current PT token balance\n   */\n  function getUserBalance(address ptToken, address user) external view returns (uint256 balance) {\n    return ERC20(ptToken).balanceOf(user);\n  }\n\n  /**\n   * @notice Withdraw tokens from this contract (for cleanup)\n   * @param token Token to withdraw\n   * @param to Recipient address\n   * @param amount Amount to withdraw\n   */\n  function withdrawTokens(address token, address to, uint256 amount) external {\n    ERC20(token).safeTransfer(to, amount);\n  }\n\n  /**\n   * @notice Emergency function to withdraw all tokens\n   * @param token Token to withdraw\n   * @param to Recipient address\n   */\n  function emergencyWithdraw(address token, address to) external {\n    uint256 balance = ERC20(token).balanceOf(address(this));\n    if (balance > 0) {\n      ERC20(token).safeTransfer(to, balance);\n    }\n  }\n}\n"
    },
    "contracts/testing/SwappableVaultMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\nimport { SwappableVault } from \"../common/SwappableVault.sol\";\nimport { IMintableERC20 } from \"../common/IMintableERC20.sol\";\n\n/**\n * @title SwappableVaultMock\n * @dev Mock implementation of SwappableVault for testing purposes\n */\ncontract SwappableVaultMock is SwappableVault {\n  uint256 private _amountInToReturn;\n  uint256 private _amountInToActuallySpend;\n  uint256 private _amountOutToActuallyMint;\n  bool private _shouldRevert;\n  string private _revertMessage;\n\n  /**\n   * @dev Set the amount in that will be returned by the swap implementation\n   */\n  function setAmountInToReturn(uint256 amountIn) external {\n    _amountInToReturn = amountIn;\n    _amountInToActuallySpend = amountIn; // Default to same amount\n    _amountOutToActuallyMint = 0; // Will use amountOut parameter\n  }\n\n  /**\n   * @dev Set different amounts for return vs actual spend to test tolerance\n   */\n  function setAmountInParams(uint256 amountInToReturn, uint256 amountInToActuallySpend) external {\n    _amountInToReturn = amountInToReturn;\n    _amountInToActuallySpend = amountInToActuallySpend;\n    _amountOutToActuallyMint = 0; // Will use amountOut parameter\n  }\n\n  /**\n   * @dev Set different amount out to actually mint for testing output validation\n   */\n  function setAmountOutToMint(uint256 amountOutToMint) external {\n    _amountOutToActuallyMint = amountOutToMint;\n  }\n\n  /**\n   * @dev Set whether the swap implementation should revert\n   */\n  function setShouldRevert(bool shouldRevert, string memory revertMessage) external {\n    _shouldRevert = shouldRevert;\n    _revertMessage = revertMessage;\n  }\n\n  /**\n   * @dev Mock implementation that simulates a swap by transferring tokens\n   */\n  function _swapExactOutputImplementation(\n    ERC20 inputToken,\n    ERC20 outputToken,\n    uint256 amountOut,\n    uint256, // amountInMaximum\n    address, // receiver\n    uint256, // deadline\n    bytes memory // extraData\n  ) internal override returns (uint256) {\n    if (_shouldRevert) {\n      revert(_revertMessage);\n    }\n\n    // Transfer input tokens from this contract to simulate spending\n    // We'll use _amountInToActuallySpend as the actual amount spent\n    uint256 actualSpent = _amountInToActuallySpend;\n    if (actualSpent > 0 && inputToken.balanceOf(address(this)) >= actualSpent) {\n      inputToken.transfer(address(0xdead), actualSpent); // Burn tokens to simulate spending\n    }\n\n    // For output tokens, we need to ensure the balance increases correctly\n    // Instead of transferring to receiver directly, we'll mint new tokens to this contract\n    // to simulate receiving tokens from a swap, then the balance increase will be detected\n    uint256 actualAmountOut = _amountOutToActuallyMint > 0 ? _amountOutToActuallyMint : amountOut;\n    if (actualAmountOut > 0) {\n      // Mint tokens to this contract to simulate receiving them from swap\n      IMintableERC20(address(outputToken)).mint(address(this), actualAmountOut);\n    }\n\n    return _amountInToReturn;\n  }\n\n  /**\n   * @dev Public wrapper to test the _swapExactOutput function\n   */\n  function swapExactOutput(\n    ERC20 inputToken,\n    ERC20 outputToken,\n    uint256 amountOut,\n    uint256 amountInMaximum,\n    address receiver,\n    uint256 deadline,\n    bytes memory extraData\n  ) external returns (uint256) {\n    return _swapExactOutput(inputToken, outputToken, amountOut, amountInMaximum, receiver, deadline, extraData);\n  }\n\n  /**\n   * @dev Helper function to get the tolerance constant\n   */\n  function getBalanceDiffTolerance() external pure returns (uint256) {\n    return BALANCE_DIFF_TOLERANCE;\n  }\n}\n"
    },
    "contracts/testing/token/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestERC20 is ERC20 {\n  uint8 private immutable _decimals;\n\n  constructor(string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_) {\n    _decimals = decimals_;\n    // Mint a total supply of 1e18 * 10^decimals_ to the deployer\n    _mint(msg.sender, 1e18 * 10 ** decimals_);\n  }\n\n  function decimals() public view virtual override(ERC20) returns (uint8) {\n    return _decimals;\n  }\n}\n"
    },
    "contracts/testing/token/TestERC20FlashMintable.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\";\nimport \"contracts/common/IMintableERC20.sol\";\n\ncontract TestERC20FlashMintable is ERC20, ERC20FlashMint, IMintableERC20 {\n  uint8 private immutable _decimals;\n\n  constructor(string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_) {\n    _decimals = decimals_;\n  }\n\n  function mint(address to, uint256 amount) external override {\n    _mint(to, amount);\n  }\n\n  function burn(uint256 amount) external override {\n    _burn(_msgSender(), amount);\n  }\n\n  function burnFrom(address account, uint256 amount) external override {\n    _spendAllowance(account, _msgSender(), amount);\n    _burn(account, amount);\n  }\n\n  function decimals() public view virtual override(ERC20, IMintableERC20) returns (uint8) {\n    return _decimals;\n  }\n}\n"
    },
    "contracts/testing/token/TestFlashBorrower.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract TestFlashBorrower is IERC3156FlashBorrower {\n  using SafeERC20 for IERC20;\n\n  function onFlashLoan(\n    address, // initiator\n    address token,\n    uint256 amount,\n    uint256 fee,\n    bytes calldata // data\n  ) external override returns (bytes32) {\n    // Approve the token contract to take back the loan + fee\n    IERC20(token).forceApprove(msg.sender, amount + fee);\n\n    return keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n  }\n}\n"
    },
    "contracts/testing/token/TestMintableERC20.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"contracts/common/IMintableERC20.sol\";\n\ncontract TestMintableERC20 is ERC20, IMintableERC20 {\n  uint8 private immutable _decimals;\n\n  constructor(string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_) {\n    _decimals = decimals_;\n  }\n\n  function mint(address to, uint256 amount) external override {\n    _mint(to, amount);\n  }\n\n  function burn(uint256 amount) external override {\n    _burn(_msgSender(), amount);\n  }\n\n  function burnFrom(address account, uint256 amount) external override {\n    _spendAllowance(account, _msgSender(), amount);\n    _burn(account, amount);\n  }\n\n  function decimals() public view virtual override(ERC20, IMintableERC20) returns (uint8) {\n    return _decimals;\n  }\n}\n"
    },
    "contracts/testing/WithdrawalFeeHarness.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"contracts/common/SupportsWithdrawalFee.sol\";\n\ncontract WithdrawalFeeHarness is SupportsWithdrawalFee {\n  constructor(uint256 initialFeeBps) {\n    _initializeWithdrawalFee(initialFeeBps);\n  }\n\n  function calc(uint256 amount) external view returns (uint256) {\n    return _calculateWithdrawalFee(amount);\n  }\n\n  // Set reasonable max fee default of 5% to prevent accidental high fees\n  function _maxWithdrawalFeeBps() internal pure override returns (uint256) {\n    return 5 * BasisPointConstants.ONE_PERCENT_BPS; // 5%\n  }\n}\n"
    },
    "contracts/vaults/atoken_wrapper/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n  enum RecoverError {\n    NoError,\n    InvalidSignature,\n    InvalidSignatureLength,\n    InvalidSignatureS\n  }\n\n  /**\n   * @dev The signature derives the `address(0)`.\n   */\n  error ECDSAInvalidSignature();\n\n  /**\n   * @dev The signature has an invalid length.\n   */\n  error ECDSAInvalidSignatureLength(uint256 length);\n\n  /**\n   * @dev The signature has an S value that is in the upper half order.\n   */\n  error ECDSAInvalidSignatureS(bytes32 s);\n\n  /**\n   * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n   * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n   * and a bytes32 providing additional information about the error.\n   *\n   * If no error is returned, then the address can be used for verification purposes.\n   *\n   * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n   * this function rejects them by requiring the `s` value to be in the lower\n   * half order, and the `v` value to be either 27 or 28.\n   *\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n   * verification to be secure: it is possible to craft signatures that\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n   * this is by receiving a hash of the original message (which may otherwise\n   * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n   *\n   * Documentation for signature generation:\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n   */\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n    if (signature.length == 65) {\n      bytes32 r;\n      bytes32 s;\n      uint8 v;\n      // ecrecover takes the signature parameters, and the only way to get them\n      // currently is to use assembly.\n      /// @solidity memory-safe-assembly\n      assembly {\n        r := mload(add(signature, 0x20))\n        s := mload(add(signature, 0x40))\n        v := byte(0, mload(add(signature, 0x60)))\n      }\n      return tryRecover(hash, v, r, s);\n    } else {\n      return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n    }\n  }\n\n  /**\n   * @dev Returns the address that signed a hashed message (`hash`) with\n   * `signature`. This address can then be used for verification purposes.\n   *\n   * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n   * this function rejects them by requiring the `s` value to be in the lower\n   * half order, and the `v` value to be either 27 or 28.\n   *\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n   * verification to be secure: it is possible to craft signatures that\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n   * this is by receiving a hash of the original message (which may otherwise\n   * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n   */\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n    (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n    _throwError(error, errorArg);\n    return recovered;\n  }\n\n  /**\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n   *\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n   */\n  function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n    unchecked {\n      bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n      // We do not check for an overflow here since the shift operation results in 0 or 1.\n      uint8 v = uint8((uint256(vs) >> 255) + 27);\n      return tryRecover(hash, v, r, s);\n    }\n  }\n\n  /**\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n   */\n  function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n    (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n    _throwError(error, errorArg);\n    return recovered;\n  }\n\n  /**\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n   * `r` and `s` signature fields separately.\n   */\n  function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError, bytes32) {\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n    // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n    //\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n    // these malleable signatures as well.\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n      return (address(0), RecoverError.InvalidSignatureS, s);\n    }\n\n    // If the signature is valid (and not malleable), return the signer address\n    address signer = ecrecover(hash, v, r, s);\n    if (signer == address(0)) {\n      return (address(0), RecoverError.InvalidSignature, bytes32(0));\n    }\n\n    return (signer, RecoverError.NoError, bytes32(0));\n  }\n\n  /**\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\n   * `r` and `s` signature fields separately.\n   */\n  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n    (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n    _throwError(error, errorArg);\n    return recovered;\n  }\n\n  /**\n   * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n   */\n  function _throwError(RecoverError error, bytes32 errorArg) private pure {\n    if (error == RecoverError.NoError) {\n      return; // no error: do nothing\n    } else if (error == RecoverError.InvalidSignature) {\n      revert ECDSAInvalidSignature();\n    } else if (error == RecoverError.InvalidSignatureLength) {\n      revert ECDSAInvalidSignatureLength(uint256(errorArg));\n    } else if (error == RecoverError.InvalidSignatureS) {\n      revert ECDSAInvalidSignatureS(errorArg);\n    }\n  }\n}\n"
    },
    "contracts/vaults/atoken_wrapper/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.20;\n\nimport { ECDSA } from \"./ECDSA.sol\";\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n  bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n  /* //////////////////////////////////////////////////////////////\n                        EVENTS\n  ////////////////////////////////////////////////////////////// */\n\n  event Transfer(address indexed from, address indexed to, uint256 amount);\n\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n  /* //////////////////////////////////////////////////////////////\n                        METADATA STORAGE\n  ////////////////////////////////////////////////////////////// */\n\n  string public name;\n\n  string public symbol;\n\n  uint8 public decimals;\n\n  /* //////////////////////////////////////////////////////////////\n                        ERC20 STORAGE\n  ////////////////////////////////////////////////////////////// */\n\n  uint256 public totalSupply;\n\n  mapping(address => uint256) public balanceOf;\n\n  mapping(address => mapping(address => uint256)) public allowance;\n\n  /* //////////////////////////////////////////////////////////////\n                        EIP-2612 STORAGE\n  ////////////////////////////////////////////////////////////// */\n\n  mapping(address => uint256) public nonces;\n\n  /* //////////////////////////////////////////////////////////////\n                        CONSTRUCTOR\n  ////////////////////////////////////////////////////////////// */\n\n  constructor(string memory _name, string memory _symbol, uint8 _decimals) {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n\n  /* //////////////////////////////////////////////////////////////\n                        ERC20 LOGIC\n  ////////////////////////////////////////////////////////////// */\n\n  function approve(address spender, uint256 amount) public virtual returns (bool) {\n    allowance[msg.sender][spender] = amount;\n\n    emit Approval(msg.sender, spender, amount);\n\n    return true;\n  }\n\n  function transfer(address to, uint256 amount) public virtual returns (bool) {\n    _beforeTokenTransfer(msg.sender, to, amount);\n    balanceOf[msg.sender] -= amount;\n\n    // Cannot overflow because the sum of all user\n    // balances can't exceed the max uint256 value.\n    unchecked {\n      balanceOf[to] += amount;\n    }\n\n    emit Transfer(msg.sender, to, amount);\n\n    return true;\n  }\n\n  function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\n    _beforeTokenTransfer(from, to, amount);\n    uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n    if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n    balanceOf[from] -= amount;\n\n    // Cannot overflow because the sum of all user\n    // balances can't exceed the max uint256 value.\n    unchecked {\n      balanceOf[to] += amount;\n    }\n\n    emit Transfer(from, to, amount);\n\n    return true;\n  }\n\n  /* //////////////////////////////////////////////////////////////\n                          EIP-2612 LOGIC\n  ////////////////////////////////////////////////////////////// */\n\n  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual {\n    require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n    // Unchecked because the only math done is incrementing\n    // the owner's nonce which cannot realistically overflow.\n    unchecked {\n      address signer = ECDSA.recover(\n        keccak256(\n          abi.encodePacked(\n            \"\\x19\\x01\",\n            DOMAIN_SEPARATOR(),\n            keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n          )\n        ),\n        v,\n        r,\n        s\n      );\n\n      require(signer == owner, \"INVALID_SIGNER\");\n\n      allowance[signer][spender] = value;\n    }\n\n    emit Approval(owner, spender, value);\n  }\n\n  function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n    return computeDomainSeparator();\n  }\n\n  function computeDomainSeparator() internal view virtual returns (bytes32) {\n    return\n      keccak256(\n        abi.encode(\n          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n          keccak256(bytes(name)),\n          keccak256(\"1\"),\n          block.chainid,\n          address(this)\n        )\n      );\n  }\n\n  /* //////////////////////////////////////////////////////////////\n                            INTERNAL MINT/BURN LOGIC\n  ////////////////////////////////////////////////////////////// */\n\n  function _mint(address to, uint256 amount) internal virtual {\n    _beforeTokenTransfer(address(0), to, amount);\n    totalSupply += amount;\n\n    // Cannot overflow because the sum of all user\n    // balances can't exceed the max uint256 value.\n    unchecked {\n      balanceOf[to] += amount;\n    }\n\n    emit Transfer(address(0), to, amount);\n  }\n\n  function _burn(address from, uint256 amount) internal virtual {\n    _beforeTokenTransfer(from, address(0), amount);\n    balanceOf[from] -= amount;\n\n    // Cannot underflow because a user's balance\n    // will never be larger than the total supply.\n    unchecked {\n      totalSupply -= amount;\n    }\n\n    emit Transfer(from, address(0), amount);\n  }\n\n  /**\n   * @dev Hook that is called before any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * will be to transferred to `to`.\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "contracts/vaults/atoken_wrapper/interfaces/IAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\nimport { IRewardsController } from \"../../../interfaces/dlend/periphery/rewards/IRewardsController.sol\";\n\ninterface IAToken {\n  function POOL() external view returns (address);\n\n  function getIncentivesController() external view returns (address);\n\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n\n  /**\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\n   * @return The scaled total supply\n   */\n  function scaledTotalSupply() external view returns (uint256);\n}\n"
    },
    "contracts/vaults/atoken_wrapper/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * _Available since v4.7._\n */\ninterface IERC4626 {\n  event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n  event Withdraw(address indexed sender, address indexed receiver, address indexed owner, uint256 assets, uint256 shares);\n\n  /**\n   * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n   *\n   * - MUST be an ERC-20 token contract.\n   * - MUST NOT revert.\n   */\n  function asset() external view returns (address assetTokenAddress);\n\n  /**\n   * @dev Returns the total amount of the underlying asset that is \"managed\" by Vault.\n   *\n   * - SHOULD include any compounding that occurs from yield.\n   * - MUST be inclusive of any fees that are charged against assets in the Vault.\n   * - MUST NOT revert.\n   */\n  function totalAssets() external view returns (uint256 totalManagedAssets);\n\n  /**\n   * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n   * scenario where all the conditions are met.\n   *\n   * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n   * - MUST NOT show any variations depending on the caller.\n   * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n   * - MUST NOT revert.\n   *\n   * NOTE: This calculation MAY NOT reflect the \"per-user\" price-per-share, and instead should reflect the\n   * \"average-user's\" price-per-share, meaning what the average user should expect to see when exchanging to and\n   * from.\n   */\n  function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n  /**\n   * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n   * scenario where all the conditions are met.\n   *\n   * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n   * - MUST NOT show any variations depending on the caller.\n   * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n   * - MUST NOT revert unless due to integer overflow caused by an unreasonably large input.\n   *\n   * NOTE: This calculation MAY NOT reflect the \"per-user\" price-per-share, and instead should reflect the\n   * \"average-user's\" price-per-share, meaning what the average user should expect to see when exchanging to and\n   * from.\n   */\n  function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n  /**\n   * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n   * through a deposit call.\n   * While deposit of aToken is not affected by aave pool configrations, deposit of the aTokenUnderlying will need to deposit to aave\n   * so it is affected by current aave pool configuration.\n   * Reference: https://github.com/aave/aave-v3-core/blob/29ff9b9f89af7cd8255231bc5faf26c3ce0fb7ce/contracts/protocol/libraries/logic/ValidationLogic.sol#L57\n   * - MUST return a limited value if receiver is subject to some deposit limit.\n   * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n   * - MUST NOT revert unless due to integer overflow caused by an unreasonably large input.\n   */\n  function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n  /**\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n   * current on-chain conditions.\n   *\n   * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n   *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n   *   in the same transaction.\n   * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n   *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n   * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n   * - MUST NOT revert.\n   *\n   * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n   * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n   */\n  function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n  /**\n   * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n   *\n   * - MUST emit the Deposit event.\n   * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   *   deposit execution, and are accounted for during deposit.\n   * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n   *   approving enough underlying tokens to the Vault contract, etc).\n   *\n   * NOTE: most implementations will require pre-approval of the Vault with the Vault's underlying asset token.\n   */\n  function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n  /**\n   * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n   * - MUST return a limited value if receiver is subject to some mint limit.\n   * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n   * - MUST NOT revert.\n   */\n  function maxMint(address receiver) external view returns (uint256 maxShares);\n\n  /**\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n   * current on-chain conditions.\n   *\n   * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n   *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n   *   same transaction.\n   * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n   *   would be accepted, regardless if the user has enough tokens approved, etc.\n   * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n   * - MUST NOT revert.\n   *\n   * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n   * share price or some other type of condition, meaning the depositor will lose assets by minting.\n   */\n  function previewMint(uint256 shares) external view returns (uint256 assets);\n\n  /**\n   * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n   *\n   * - MUST emit the Deposit event.\n   * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n   *   execution, and are accounted for during mint.\n   * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n   *   approving enough underlying tokens to the Vault contract, etc).\n   *\n   * NOTE: most implementations will require pre-approval of the Vault with the Vault's underlying asset token.\n   */\n  function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n  /**\n   * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n   * Vault, through a withdraw call.\n   *\n   * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n   * - MUST NOT revert.\n   */\n  function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n  /**\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n   * given current on-chain conditions.\n   *\n   * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n   *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n   *   called\n   *   in the same transaction.\n   * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n   *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n   * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n   * - MUST NOT revert.\n   *\n   * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n   * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n   */\n  function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n  /**\n   * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n   *\n   * - MUST emit the Withdraw event.\n   * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   *   withdraw execution, and are accounted for during withdraw.\n   * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n   *   not having enough shares, etc).\n   *\n   * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n   * Those methods should be performed separately.\n   */\n  function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n  /**\n   * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n   * through a redeem call to the aToken underlying.\n   * While redeem of aToken is not affected by aave pool configrations, redeeming of the aTokenUnderlying will need to redeem from aave\n   * so it is affected by current aave pool configuration.\n   * Reference: https://github.com/aave/aave-v3-core/blob/29ff9b9f89af7cd8255231bc5faf26c3ce0fb7ce/contracts/protocol/libraries/logic/ValidationLogic.sol#L87\n   * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n   * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n   * - MUST NOT revert.\n   */\n  function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n  /**\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n   * given current on-chain conditions.\n   *\n   * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n   *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n   *   same transaction.\n   * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n   *   redemption would be accepted, regardless if the user has enough shares, etc.\n   * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n   * - MUST NOT revert.\n   *\n   * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n   * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n   */\n  function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n  /**\n   * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n   *\n   * - MUST emit the Withdraw event.\n   * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   *   redeem execution, and are accounted for during redeem.\n   * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n   *   not having enough shares, etc).\n   *\n   * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n   * Those methods should be performed separately.\n   */\n  function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
    },
    "contracts/vaults/atoken_wrapper/interfaces/IStaticATokenFactory.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\nimport { IPool } from \"../../../interfaces/dlend/core/interfaces/IPool.sol\";\nimport { DataTypes } from \"../../../interfaces/dlend/core/protocol/libraries/types/DataTypes.sol\";\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n// ITransparentProxyFactory is missing, add to missing list\n// import {ITransparentProxyFactory} from \"contracts/dlend/core/interfaces/ITransparentProxyFactory.sol\";\n// Ownable is not used in the interface, can be omitted\n\ninterface IStaticATokenFactory {\n  /**\n   * @notice Creates new staticATokens\n   * @param underlyings the addresses of the underlyings to create.\n   * @return address[] addresses of the new staticATokens.\n   */\n  function createStaticATokens(address[] memory underlyings) external returns (address[] memory);\n\n  /**\n   * @notice Returns all tokens deployed via this registry.\n   * @return address[] list of tokens\n   */\n  function getStaticATokens() external view returns (address[] memory);\n\n  /**\n   * @notice Returns the staticAToken for a given underlying.\n   * @param underlying the address of the underlying.\n   * @return address the staticAToken address.\n   */\n  function getStaticAToken(address underlying) external view returns (address);\n}\n"
    },
    "contracts/vaults/atoken_wrapper/interfaces/IStaticATokenLM.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IPool } from \"../../../interfaces/dlend/core/interfaces/IPool.sol\";\nimport { IRewardsController } from \"../../../interfaces/dlend/periphery/rewards/IRewardsController.sol\";\n\ninterface IStaticATokenLM {\n  struct SignatureParams {\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n  }\n\n  struct PermitParams {\n    address owner;\n    address spender;\n    uint256 value;\n    uint256 deadline;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n  }\n\n  struct UserRewardsData {\n    uint128 rewardsIndexOnLastInteraction; // (in RAYs)\n    uint128 unclaimedRewards; // (in RAYs)\n  }\n\n  struct RewardIndexCache {\n    bool isRegistered;\n    uint248 lastUpdatedIndex;\n  }\n\n  event RewardTokenRegistered(address indexed reward, uint256 startIndex);\n\n  /**\n   * @notice Allows to deposit on Aave via meta-transaction\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n   * @param depositor Address from which the funds to deposit are going to be pulled\n   * @param receiver Address that will receive the staticATokens, in the average case, same as the `depositor`\n   * @param assets The amount to deposit\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param depositToAave bool\n   * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\n   * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\n   * @param sigParams Signature params: v,r,s\n   * @return uint256 The amount of StaticAToken minted, static balance\n   */\n  function metaDeposit(\n    address depositor,\n    address receiver,\n    uint256 assets,\n    uint16 referralCode,\n    bool depositToAave,\n    uint256 deadline,\n    PermitParams calldata permit,\n    SignatureParams calldata sigParams\n  ) external returns (uint256);\n\n  /**\n   * @notice Allows to withdraw from Aave via meta-transaction\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n   * @param owner Address owning the staticATokens\n   * @param receiver Address that will receive the underlying withdrawn from Aave\n   * @param shares The amount of staticAToken to withdraw. If > 0, `assets` needs to be 0\n   * @param assets The amount of underlying/aToken to withdraw. If > 0, `shares` needs to be 0\n   * @param withdrawFromAave bool\n   * - `true` for the receiver to get underlying tokens (e.g. USDC)\n   * - `false` for the receiver to get aTokens (e.g. aUSDC)\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\n   * @param sigParams Signature params: v,r,s\n   * @return amountToBurn: StaticATokens burnt, static balance\n   * @return amountToWithdraw: underlying/aToken send to `receiver`, dynamic balance\n   */\n  function metaWithdraw(\n    address owner,\n    address receiver,\n    uint256 shares,\n    uint256 assets,\n    bool withdrawFromAave,\n    uint256 deadline,\n    SignatureParams calldata sigParams\n  ) external returns (uint256, uint256);\n\n  /**\n   * @notice Returns the Aave liquidity index of the underlying aToken, denominated rate here\n   * as it can be considered as an ever-increasing exchange rate\n   * @return The liquidity index\n   **/\n  function rate() external view returns (uint256);\n\n  /**\n   * @notice Claims rewards from `INCENTIVES_CONTROLLER` and updates internal accounting of rewards.\n   * @param reward The reward to claim\n   * @return uint256 Amount collected\n   */\n  function collectAndUpdateRewards(address reward) external returns (uint256);\n\n  /**\n   * @notice Claim rewards on behalf of a user and send them to a receiver\n   * @dev Only callable by if sender is onBehalfOf or sender is approved claimer\n   * @param onBehalfOf The address to claim on behalf of\n   * @param receiver The address to receive the rewards\n   * @param rewards The rewards to claim\n   */\n  function claimRewardsOnBehalf(address onBehalfOf, address receiver, address[] memory rewards) external;\n\n  /**\n   * @notice Claim rewards and send them to a receiver\n   * @param receiver The address to receive the rewards\n   * @param rewards The rewards to claim\n   */\n  function claimRewards(address receiver, address[] memory rewards) external;\n\n  /**\n   * @notice Claim rewards\n   * @param rewards The rewards to claim\n   */\n  function claimRewardsToSelf(address[] memory rewards) external;\n\n  /**\n   * @notice Get the total claimable rewards of the contract.\n   * @param reward The reward to claim\n   * @return uint256 The current balance + pending rewards from the `_incentivesController`\n   */\n  function getTotalClaimableRewards(address reward) external view returns (uint256);\n\n  /**\n   * @notice Get the total claimable rewards for a user in WAD\n   * @param user The address of the user\n   * @param reward The reward to claim\n   * @return uint256 The claimable amount of rewards in WAD\n   */\n  function getClaimableRewards(address user, address reward) external view returns (uint256);\n\n  /**\n   * @notice The unclaimed rewards for a user in WAD\n   * @param user The address of the user\n   * @param reward The reward to claim\n   * @return uint256 The unclaimed amount of rewards in WAD\n   */\n  function getUnclaimedRewards(address user, address reward) external view returns (uint256);\n\n  /**\n   * @notice The underlying asset reward index in RAY\n   * @param reward The reward to claim\n   * @return uint256 The underlying asset reward index in RAY\n   */\n  function getCurrentRewardsIndex(address reward) external view returns (uint256);\n\n  /**\n   * @notice The aToken used inside the 4626 vault.\n   * @return IERC20 The aToken IERC20.\n   */\n  function aToken() external view returns (IERC20);\n\n  /**\n   * @notice The IERC20s that are currently rewarded to addresses of the vault via LM on incentivescontroller.\n   * @return IERC20 The IERC20s of the rewards.\n   */\n  function rewardTokens() external view returns (address[] memory);\n\n  /**\n   * @notice Fetches all rewardTokens from the incentivecontroller and registers the missing ones.\n   */\n  function refreshRewardTokens() external;\n\n  /**\n   * @notice Checks if the passed token is a registered reward.\n   * @return bool signaling if token is a registered reward.\n   */\n  function isRegisteredRewardToken(address reward) external view returns (bool);\n\n  /**\n   * @notice Deposits aTokens and mints static aTokens to the receiver\n   * @param aTokenAmount The amount of aTokens to deposit\n   * @param receiver The address that will receive the static aTokens\n   * @return uint256 The amount of StaticAToken minted, static balance\n   */\n  function depositATokens(uint256 aTokenAmount, address receiver) external returns (uint256);\n\n  /**\n   * @notice Burns static aTokens and returns aTokens to the receiver\n   * @param shares The amount of static aTokens to burn\n   * @param receiver The address that will receive the aTokens\n   * @param owner The address whose static aTokens will be burned\n   * @return uint256 The amount of aTokens returned\n   */\n  function redeemATokens(uint256 shares, address receiver, address owner) external returns (uint256);\n}\n"
    },
    "contracts/vaults/atoken_wrapper/RayMathExplicitRounding.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nenum Rounding {\n  UP,\n  DOWN\n}\n\n/**\n * Simplified version of RayMath that instead of half-up rounding does explicit rounding in a specified direction.\n * This is needed to have a 4626 complient implementation, that always predictable rounds in favor of the vault / static a token.\n */\nlibrary RayMathExplicitRounding {\n  uint256 internal constant RAY = 1e27;\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n  function rayMulRoundDown(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0 || b == 0) {\n      return 0;\n    }\n    return Math.mulDiv(a, b, RAY); // default is rounding down\n  }\n\n  function rayMulRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0 || b == 0) {\n      return 0;\n    }\n    return Math.mulDiv(a, b, RAY, Math.Rounding.Ceil);\n  }\n\n  function rayDivRoundDown(uint256 a, uint256 b) internal pure returns (uint256) {\n    return Math.mulDiv(a, RAY, b); // rounding down\n  }\n\n  function rayDivRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\n    return Math.mulDiv(a, RAY, b, Math.Rounding.Ceil);\n  }\n\n  function rayToWadRoundDown(uint256 a) internal pure returns (uint256) {\n    return a / WAD_RAY_RATIO;\n  }\n}\n"
    },
    "contracts/vaults/atoken_wrapper/StaticATokenErrors.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.20;\n\nlibrary StaticATokenErrors {\n  string public constant INVALID_OWNER = \"1\";\n  string public constant INVALID_EXPIRATION = \"2\";\n  string public constant INVALID_SIGNATURE = \"3\";\n  string public constant INVALID_DEPOSITOR = \"4\";\n  string public constant INVALID_RECIPIENT = \"5\";\n  string public constant INVALID_CLAIMER = \"6\";\n  string public constant ONLY_ONE_AMOUNT_FORMAT_ALLOWED = \"7\";\n  string public constant INVALID_ZERO_AMOUNT = \"8\";\n  string public constant REWARD_NOT_INITIALIZED = \"9\";\n}\n"
    },
    "contracts/vaults/atoken_wrapper/StaticATokenFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IPool } from \"../../interfaces/dlend/core/interfaces/IPool.sol\";\nimport { DataTypes } from \"../../interfaces/dlend/core/protocol/libraries/types/DataTypes.sol\";\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport { StaticATokenLM } from \"./StaticATokenLM.sol\";\nimport { IStaticATokenFactory } from \"./interfaces/IStaticATokenFactory.sol\";\nimport { IRewardsController } from \"../../interfaces/dlend/periphery/rewards/IRewardsController.sol\";\n\n/**\n * @title StaticATokenFactory\n * @notice Factory contract that keeps track of all deployed static aToken wrappers for a specified pool.\n * This registry also acts as a factory, allowing to deploy new static aTokens on demand.\n * There can only be one static aToken per underlying on the registry at a time.\n * @author BGD labs (modified by dTrinity)\n */\ncontract StaticATokenFactory is IStaticATokenFactory {\n  IPool public immutable POOL;\n\n  mapping(address => address) internal _underlyingToStaticAToken;\n  address[] internal _staticATokens;\n\n  event StaticTokenCreated(address indexed staticAToken, address indexed underlying);\n\n  constructor(IPool pool) {\n    POOL = pool;\n  }\n\n  function initialize() external pure {\n    revert(\"NO_INITIALIZER\");\n  }\n\n  ///@inheritdoc IStaticATokenFactory\n  function createStaticATokens(address[] memory underlyings) external returns (address[] memory) {\n    address[] memory staticATokens = new address[](underlyings.length);\n    for (uint256 i = 0; i < underlyings.length; i++) {\n      address cachedStaticAToken = _underlyingToStaticAToken[underlyings[i]];\n      if (cachedStaticAToken == address(0)) {\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(underlyings[i]);\n        require(reserveData.aTokenAddress != address(0), \"UNDERLYING_NOT_LISTED\");\n        StaticATokenLM staticAToken = new StaticATokenLM(\n          POOL,\n          IRewardsController(address(0)), // TODO: pass correct incentives controller if needed\n          reserveData.aTokenAddress,\n          string(abi.encodePacked(\"Wrapped \", IERC20Metadata(reserveData.aTokenAddress).name())),\n          string(abi.encodePacked(\"w\", IERC20Metadata(reserveData.aTokenAddress).symbol()))\n        );\n        address staticATokenAddr = address(staticAToken);\n        _underlyingToStaticAToken[underlyings[i]] = staticATokenAddr;\n        staticATokens[i] = staticATokenAddr;\n        _staticATokens.push(staticATokenAddr);\n        emit StaticTokenCreated(staticATokenAddr, underlyings[i]);\n      } else {\n        staticATokens[i] = cachedStaticAToken;\n      }\n    }\n    return staticATokens;\n  }\n\n  ///@inheritdoc IStaticATokenFactory\n  function getStaticATokens() external view returns (address[] memory) {\n    return _staticATokens;\n  }\n\n  ///@inheritdoc IStaticATokenFactory\n  function getStaticAToken(address underlying) external view returns (address) {\n    return _underlyingToStaticAToken[underlying];\n  }\n}\n"
    },
    "contracts/vaults/atoken_wrapper/StaticATokenLM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n// --- DLend fork imports ---\nimport { IPool } from \"../../interfaces/dlend/core/interfaces/IPool.sol\";\nimport { DataTypes } from \"../../interfaces/dlend/core/protocol/libraries/types/DataTypes.sol\";\nimport { ReserveConfiguration } from \"../../interfaces/dlend/core/protocol/libraries/configuration/ReserveConfiguration.sol\";\nimport { IScaledBalanceToken } from \"../../interfaces/dlend/core/interfaces/IScaledBalanceToken.sol\";\nimport { IRewardsController } from \"../../interfaces/dlend/periphery/rewards/IRewardsController.sol\";\nimport { WadRayMath } from \"../../interfaces/dlend/core/protocol/libraries/math/WadRayMath.sol\";\nimport { MathUtils } from \"../../interfaces/dlend/core/protocol/libraries/math/MathUtils.sol\";\nimport { SafeCast } from \"../../interfaces/dlend/core/dependencies/openzeppelin/contracts/SafeCast.sol\";\nimport { Initializable } from \"../../interfaces/dlend/core/dependencies/openzeppelin/upgradeability/Initializable.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC20WithPermit } from \"../../interfaces/dlend/core/interfaces/IERC20WithPermit.sol\";\n// --- Local imports ---\nimport { IStaticATokenLM } from \"./interfaces/IStaticATokenLM.sol\";\nimport { IAToken } from \"./interfaces/IAToken.sol\";\nimport { ERC20 } from \"./ERC20.sol\";\nimport { StaticATokenErrors } from \"./StaticATokenErrors.sol\";\nimport { RayMathExplicitRounding, Rounding } from \"./RayMathExplicitRounding.sol\";\nimport { IERC4626 } from \"./interfaces/IERC4626.sol\";\nimport { ECDSA } from \"./ECDSA.sol\";\n\n/**\n * @title StaticATokenLM\n * @notice Wrapper smart contract that allows to deposit tokens on the Aave protocol and receive\n * a token which balance doesn't increase automatically, but uses an ever-increasing exchange rate.\n * It supports claiming liquidity mining rewards from the Aave system.\n * @author BGD labs\n */\ncontract StaticATokenLM is ERC20, IStaticATokenLM, IERC4626 {\n  using SafeERC20 for IERC20;\n  using SafeCast for uint256;\n  using WadRayMath for uint256;\n  using RayMathExplicitRounding for uint256;\n\n  bytes32 public constant METADEPOSIT_TYPEHASH =\n    keccak256(\n      \"Deposit(address depositor,address receiver,uint256 assets,uint16 referralCode,bool depositToAave,uint256 nonce,uint256 deadline,PermitParams permit)\"\n    );\n  bytes32 public constant METAWITHDRAWAL_TYPEHASH =\n    keccak256(\n      \"Withdraw(address owner,address receiver,uint256 shares,uint256 assets,bool withdrawFromAave,uint256 nonce,uint256 deadline)\"\n    );\n\n  uint256 public constant STATIC__ATOKEN_LM_REVISION = 2;\n\n  IPool public immutable POOL;\n  IRewardsController public immutable REWARDS_CONTROLLER;\n\n  IERC20 internal _aToken;\n  address internal _aTokenUnderlying;\n  address[] internal _rewardTokens;\n  mapping(address => RewardIndexCache) internal _startIndex;\n  mapping(address => mapping(address => UserRewardsData)) internal _userRewardsData;\n\n  constructor(\n    IPool pool,\n    IRewardsController rewardsController,\n    address newAToken,\n    string memory staticATokenName,\n    string memory staticATokenSymbol\n  ) ERC20(staticATokenName, staticATokenSymbol, IERC20Metadata(newAToken).decimals()) {\n    POOL = pool;\n    REWARDS_CONTROLLER = rewardsController;\n    _aToken = IERC20(newAToken);\n    _aTokenUnderlying = IAToken(newAToken).UNDERLYING_ASSET_ADDRESS();\n    IERC20(_aTokenUnderlying).forceApprove(address(POOL), type(uint256).max);\n    if (address(REWARDS_CONTROLLER) != address(0)) {\n      refreshRewardTokens();\n    }\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function refreshRewardTokens() public override {\n    address[] memory rewards = REWARDS_CONTROLLER.getRewardsByAsset(address(_aToken));\n    for (uint256 i = 0; i < rewards.length; i++) {\n      _registerRewardToken(rewards[i]);\n    }\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function isRegisteredRewardToken(address reward) public view override returns (bool) {\n    return _startIndex[reward].isRegistered;\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function metaDeposit(\n    address depositor,\n    address receiver,\n    uint256 assets,\n    uint16 referralCode,\n    bool depositToAave,\n    uint256 deadline,\n    PermitParams calldata permit,\n    SignatureParams calldata sigParams\n  ) external returns (uint256) {\n    require(depositor != address(0), StaticATokenErrors.INVALID_DEPOSITOR);\n    //solium-disable-next-line\n    require(deadline >= block.timestamp, StaticATokenErrors.INVALID_EXPIRATION);\n    uint256 nonce = nonces[depositor];\n\n    // Unchecked because the only math done is incrementing\n    // the owner's nonce which cannot realistically overflow.\n    unchecked {\n      bytes32 digest = keccak256(\n        abi.encodePacked(\n          \"\\x19\\x01\",\n          DOMAIN_SEPARATOR(),\n          keccak256(abi.encode(METADEPOSIT_TYPEHASH, depositor, receiver, assets, referralCode, depositToAave, nonce, deadline, permit))\n        )\n      );\n      nonces[depositor] = nonce + 1;\n      require(depositor == ECDSA.recover(digest, sigParams.v, sigParams.r, sigParams.s), StaticATokenErrors.INVALID_SIGNATURE);\n    }\n    // assume if deadline 0 no permit was supplied\n    if (permit.deadline != 0) {\n      try\n        IERC20WithPermit(depositToAave ? address(_aTokenUnderlying) : address(_aToken)).permit(\n          depositor,\n          address(this),\n          permit.value,\n          permit.deadline,\n          permit.v,\n          permit.r,\n          permit.s\n        )\n      {} catch {}\n    }\n    (uint256 shares, ) = _deposit(depositor, receiver, 0, assets, referralCode, depositToAave);\n    return shares;\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function metaWithdraw(\n    address owner,\n    address receiver,\n    uint256 shares,\n    uint256 assets,\n    bool withdrawFromAave,\n    uint256 deadline,\n    SignatureParams calldata sigParams\n  ) external returns (uint256, uint256) {\n    require(owner != address(0), StaticATokenErrors.INVALID_OWNER);\n    //solium-disable-next-line\n    require(deadline >= block.timestamp, StaticATokenErrors.INVALID_EXPIRATION);\n    uint256 nonce = nonces[owner];\n    // Unchecked because the only math done is incrementing\n    // the owner's nonce which cannot realistically overflow.\n    unchecked {\n      bytes32 digest = keccak256(\n        abi.encodePacked(\n          \"\\x19\\x01\",\n          DOMAIN_SEPARATOR(),\n          keccak256(abi.encode(METAWITHDRAWAL_TYPEHASH, owner, receiver, shares, assets, withdrawFromAave, nonce, deadline))\n        )\n      );\n      nonces[owner] = nonce + 1;\n      require(owner == ECDSA.recover(digest, sigParams.v, sigParams.r, sigParams.s), StaticATokenErrors.INVALID_SIGNATURE);\n    }\n    return _withdraw(owner, receiver, shares, assets, withdrawFromAave);\n  }\n\n  ///@inheritdoc IERC4626\n  function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n    return _convertToAssets(shares, Rounding.DOWN);\n  }\n\n  ///@inheritdoc IERC4626\n  function previewMint(uint256 shares) public view virtual returns (uint256) {\n    return _convertToAssets(shares, Rounding.UP);\n  }\n\n  ///@inheritdoc IERC4626\n  function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n    return _convertToShares(assets, Rounding.UP);\n  }\n\n  ///@inheritdoc IERC4626\n  function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n    return _convertToShares(assets, Rounding.DOWN);\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function rate() public view returns (uint256) {\n    return POOL.getReserveNormalizedIncome(_aTokenUnderlying);\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function collectAndUpdateRewards(address reward) public returns (uint256) {\n    if (reward == address(0)) {\n      return 0;\n    }\n\n    address[] memory assets = new address[](1);\n    assets[0] = address(_aToken);\n\n    return REWARDS_CONTROLLER.claimRewards(assets, type(uint256).max, address(this), reward);\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function claimRewardsOnBehalf(address onBehalfOf, address receiver, address[] memory rewards) external {\n    require(msg.sender == onBehalfOf || msg.sender == REWARDS_CONTROLLER.getClaimer(onBehalfOf), StaticATokenErrors.INVALID_CLAIMER);\n    _claimRewardsOnBehalf(onBehalfOf, receiver, rewards);\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function claimRewards(address receiver, address[] memory rewards) external {\n    _claimRewardsOnBehalf(msg.sender, receiver, rewards);\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function claimRewardsToSelf(address[] memory rewards) external {\n    _claimRewardsOnBehalf(msg.sender, msg.sender, rewards);\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function getCurrentRewardsIndex(address reward) public view returns (uint256) {\n    if (address(reward) == address(0)) {\n      return 0;\n    }\n    (, uint256 nextIndex) = REWARDS_CONTROLLER.getAssetIndex(address(_aToken), reward);\n    return nextIndex;\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function getTotalClaimableRewards(address reward) external view returns (uint256) {\n    if (reward == address(0)) {\n      return 0;\n    }\n\n    address[] memory assets = new address[](1);\n    assets[0] = address(_aToken);\n    uint256 freshRewards = REWARDS_CONTROLLER.getUserRewards(assets, address(this), reward);\n    return IERC20(reward).balanceOf(address(this)) + freshRewards;\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function getClaimableRewards(address user, address reward) external view returns (uint256) {\n    return _getClaimableRewards(user, reward, balanceOf[user], getCurrentRewardsIndex(reward));\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function getUnclaimedRewards(address user, address reward) external view returns (uint256) {\n    return _userRewardsData[user][reward].unclaimedRewards;\n  }\n\n  ///@inheritdoc IERC4626\n  function asset() external view returns (address) {\n    return address(_aTokenUnderlying);\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function aToken() external view returns (IERC20) {\n    return _aToken;\n  }\n\n  ///@inheritdoc IStaticATokenLM\n  function rewardTokens() external view returns (address[] memory) {\n    return _rewardTokens;\n  }\n\n  ///@inheritdoc IERC4626\n  function totalAssets() external view returns (uint256) {\n    return _aToken.balanceOf(address(this));\n  }\n\n  ///@inheritdoc IERC4626\n  function convertToShares(uint256 assets) external view returns (uint256) {\n    return _convertToShares(assets, Rounding.DOWN);\n  }\n\n  ///@inheritdoc IERC4626\n  function convertToAssets(uint256 shares) external view returns (uint256) {\n    return _convertToAssets(shares, Rounding.DOWN);\n  }\n\n  ///@inheritdoc IERC4626\n  function maxMint(address) public view virtual returns (uint256) {\n    uint256 assets = maxDeposit(address(0));\n    if (assets == type(uint256).max) return type(uint256).max;\n    return _convertToShares(assets, Rounding.DOWN);\n  }\n\n  ///@inheritdoc IERC4626\n  function maxWithdraw(address owner) public view virtual returns (uint256) {\n    uint256 shares = maxRedeem(owner);\n    return _convertToAssets(shares, Rounding.DOWN);\n  }\n\n  ///@inheritdoc IERC4626\n  function maxRedeem(address owner) public view virtual returns (uint256) {\n    address cachedATokenUnderlying = _aTokenUnderlying;\n    DataTypes.ReserveData memory reserveData = POOL.getReserveData(cachedATokenUnderlying);\n\n    // if paused or inactive users cannot withdraw underlying\n    if (!ReserveConfiguration.getActive(reserveData.configuration) || ReserveConfiguration.getPaused(reserveData.configuration)) {\n      return 0;\n    }\n\n    // otherwise users can withdraw up to the available amount\n    uint256 underlyingTokenBalanceInShares = _convertToShares(\n      IERC20(cachedATokenUnderlying).balanceOf(reserveData.aTokenAddress),\n      Rounding.DOWN\n    );\n    uint256 cachedUserBalance = balanceOf[owner];\n    return underlyingTokenBalanceInShares >= cachedUserBalance ? cachedUserBalance : underlyingTokenBalanceInShares;\n  }\n\n  ///@inheritdoc IERC4626\n  function maxDeposit(address) public view virtual returns (uint256) {\n    DataTypes.ReserveData memory reserveData = POOL.getReserveData(_aTokenUnderlying);\n\n    // if inactive, paused or frozen users cannot deposit underlying\n    if (\n      !ReserveConfiguration.getActive(reserveData.configuration) ||\n      ReserveConfiguration.getPaused(reserveData.configuration) ||\n      ReserveConfiguration.getFrozen(reserveData.configuration)\n    ) {\n      return 0;\n    }\n\n    uint256 supplyCap = ReserveConfiguration.getSupplyCap(reserveData.configuration) *\n      (10 ** ReserveConfiguration.getDecimals(reserveData.configuration));\n    // if no supply cap deposit is unlimited\n    if (supplyCap == 0) return type(uint256).max;\n    // return remaining supply cap margin\n    uint256 currentSupply = (IAToken(reserveData.aTokenAddress).scaledTotalSupply() + reserveData.accruedToTreasury).rayMulRoundUp(\n      _getNormalizedIncome(reserveData)\n    );\n    return currentSupply > supplyCap ? 0 : supplyCap - currentSupply;\n  }\n\n  ///@inheritdoc IERC4626\n  function deposit(uint256 assets, address receiver) external virtual returns (uint256) {\n    (uint256 shares, ) = _deposit(msg.sender, receiver, 0, assets, 0, true);\n    return shares;\n  }\n\n  ///@inheritdoc IERC4626\n  function mint(uint256 shares, address receiver) external virtual returns (uint256) {\n    (, uint256 assets) = _deposit(msg.sender, receiver, shares, 0, 0, true);\n\n    return assets;\n  }\n\n  ///@inheritdoc IERC4626\n  function withdraw(uint256 assets, address receiver, address owner) external virtual returns (uint256) {\n    (uint256 shares, ) = _withdraw(owner, receiver, 0, assets, true);\n\n    return shares;\n  }\n\n  ///@inheritdoc IERC4626\n  function redeem(uint256 shares, address receiver, address owner) external virtual returns (uint256) {\n    (, uint256 assets) = _withdraw(owner, receiver, shares, 0, true);\n\n    return assets;\n  }\n\n  /// @notice Deposit aTokens and mint static tokens to receiver\n  function depositATokens(uint256 aTokenAmount, address receiver) external override returns (uint256) {\n    require(aTokenAmount > 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\n    // allow compensation for rebase during tx\n    uint256 userBalance = _aToken.balanceOf(msg.sender);\n    uint256 amount = aTokenAmount > userBalance ? userBalance : aTokenAmount;\n    // determine shares to mint\n    uint256 shares = previewDeposit(amount);\n    require(shares != 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\n    // transfer aTokens in\n    _aToken.safeTransferFrom(msg.sender, address(this), amount);\n    // mint static tokens\n    _mint(receiver, shares);\n    emit Deposit(msg.sender, receiver, amount, shares);\n    return shares;\n  }\n\n  /// @notice Burn static tokens and return aTokens to receiver\n  function redeemATokens(uint256 shares, address receiver, address owner) external override returns (uint256) {\n    require(shares > 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\n    // determine assets to return\n    uint256 assets = previewRedeem(shares);\n    require(assets != 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\n    // handle allowance if not owner\n    if (msg.sender != owner) {\n      uint256 allowed = allowance[owner][msg.sender];\n      if (allowed != type(uint256).max) {\n        allowance[owner][msg.sender] = allowed - shares;\n      }\n    }\n    // burn static tokens\n    _burn(owner, shares);\n    emit Withdraw(msg.sender, receiver, owner, assets, shares);\n    // transfer aTokens out\n    _aToken.safeTransfer(receiver, assets);\n    return assets;\n  }\n\n  function _deposit(\n    address depositor,\n    address receiver,\n    uint256 _shares,\n    uint256 _assets,\n    uint16 referralCode,\n    bool depositToAave\n  ) internal returns (uint256, uint256) {\n    require(receiver != address(0), StaticATokenErrors.INVALID_RECIPIENT);\n    require(_shares == 0 || _assets == 0, StaticATokenErrors.ONLY_ONE_AMOUNT_FORMAT_ALLOWED);\n\n    uint256 assets = _assets;\n    uint256 shares = _shares;\n    if (shares > 0) {\n      if (depositToAave) {\n        require(shares <= maxMint(receiver), \"ERC4626: mint more than max\");\n      }\n      assets = previewMint(shares);\n    } else {\n      if (depositToAave) {\n        require(assets <= maxDeposit(receiver), \"ERC4626: deposit more than max\");\n      }\n      shares = previewDeposit(assets);\n    }\n    require(shares != 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\n\n    if (depositToAave) {\n      address cachedATokenUnderlying = _aTokenUnderlying;\n      SafeERC20.safeTransferFrom(IERC20(cachedATokenUnderlying), depositor, address(this), assets);\n      POOL.deposit(cachedATokenUnderlying, assets, address(this), referralCode);\n    } else {\n      _aToken.safeTransferFrom(depositor, address(this), assets);\n    }\n\n    _mint(receiver, shares);\n\n    emit Deposit(depositor, receiver, assets, shares);\n\n    return (shares, assets);\n  }\n\n  function _withdraw(\n    address owner,\n    address receiver,\n    uint256 _shares,\n    uint256 _assets,\n    bool withdrawFromAave\n  ) internal returns (uint256, uint256) {\n    require(receiver != address(0), StaticATokenErrors.INVALID_RECIPIENT);\n    require(_shares == 0 || _assets == 0, StaticATokenErrors.ONLY_ONE_AMOUNT_FORMAT_ALLOWED);\n    require(_shares != _assets, StaticATokenErrors.INVALID_ZERO_AMOUNT);\n\n    uint256 assets = _assets;\n    uint256 shares = _shares;\n\n    if (shares > 0) {\n      if (withdrawFromAave) {\n        require(shares <= maxRedeem(owner), \"ERC4626: redeem more than max\");\n      }\n      assets = previewRedeem(shares);\n    } else {\n      if (withdrawFromAave) {\n        require(assets <= maxWithdraw(owner), \"ERC4626: withdraw more than max\");\n      }\n      shares = previewWithdraw(assets);\n    }\n\n    if (msg.sender != owner) {\n      uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\n\n      if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\n    }\n\n    _burn(owner, shares);\n\n    emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n    if (withdrawFromAave) {\n      POOL.withdraw(_aTokenUnderlying, assets, receiver);\n    } else {\n      _aToken.safeTransfer(receiver, assets);\n    }\n\n    return (shares, assets);\n  }\n\n  /**\n   * @notice Updates rewards for senders and receiver in a transfer (not updating rewards for address(0))\n   * @param from The address of the sender of tokens\n   * @param to The address of the receiver of tokens\n   */\n  function _beforeTokenTransfer(address from, address to, uint256) internal override {\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\n      address rewardToken = address(_rewardTokens[i]);\n      uint256 rewardsIndex = getCurrentRewardsIndex(rewardToken);\n      if (from != address(0)) {\n        _updateUser(from, rewardsIndex, rewardToken);\n      }\n      if (to != address(0) && from != to) {\n        _updateUser(to, rewardsIndex, rewardToken);\n      }\n    }\n  }\n\n  /**\n   * @notice Adding the pending rewards to the unclaimed for specific user and updating user index\n   * @param user The address of the user to update\n   * @param currentRewardsIndex The current rewardIndex\n   * @param rewardToken The address of the reward token\n   */\n  function _updateUser(address user, uint256 currentRewardsIndex, address rewardToken) internal {\n    uint256 balance = balanceOf[user];\n    if (balance > 0) {\n      _userRewardsData[user][rewardToken].unclaimedRewards = _getClaimableRewards(user, rewardToken, balance, currentRewardsIndex)\n        .toUint128();\n    }\n    _userRewardsData[user][rewardToken].rewardsIndexOnLastInteraction = currentRewardsIndex.toUint128();\n  }\n\n  /**\n   * @notice Compute the pending in WAD. Pending is the amount to add (not yet unclaimed) rewards in WAD.\n   * @param balance The balance of the user\n   * @param rewardsIndexOnLastInteraction The index which was on the last interaction of the user\n   * @param currentRewardsIndex The current rewards index in the system\n   * @param assetUnit One unit of asset (10**decimals)\n   * @return The amount of pending rewards in WAD\n   */\n  function _getPendingRewards(\n    uint256 balance,\n    uint256 rewardsIndexOnLastInteraction,\n    uint256 currentRewardsIndex,\n    uint256 assetUnit\n  ) internal pure returns (uint256) {\n    if (balance == 0) {\n      return 0;\n    }\n    return (balance * (currentRewardsIndex - rewardsIndexOnLastInteraction)) / assetUnit;\n  }\n\n  /**\n   * @notice Compute the claimable rewards for a user\n   * @param user The address of the user\n   * @param reward The address of the reward\n   * @param balance The balance of the user in WAD\n   * @param currentRewardsIndex The current rewards index\n   * @return The total rewards that can be claimed by the user (if `fresh` flag true, after updating rewards)\n   */\n  function _getClaimableRewards(\n    address user,\n    address reward,\n    uint256 balance,\n    uint256 currentRewardsIndex\n  ) internal view returns (uint256) {\n    RewardIndexCache memory rewardsIndexCache = _startIndex[reward];\n    require(rewardsIndexCache.isRegistered == true, StaticATokenErrors.REWARD_NOT_INITIALIZED);\n    UserRewardsData memory currentUserRewardsData = _userRewardsData[user][reward];\n    uint256 assetUnit = 10 ** decimals;\n    return\n      currentUserRewardsData.unclaimedRewards +\n      _getPendingRewards(\n        balance,\n        currentUserRewardsData.rewardsIndexOnLastInteraction == 0\n          ? rewardsIndexCache.lastUpdatedIndex\n          : currentUserRewardsData.rewardsIndexOnLastInteraction,\n        currentRewardsIndex,\n        assetUnit\n      );\n  }\n\n  /**\n   * @notice Claim rewards on behalf of a user and send them to a receiver\n   * @param onBehalfOf The address to claim on behalf of\n   * @param rewards The addresses of the rewards\n   * @param receiver The address to receive the rewards\n   */\n  function _claimRewardsOnBehalf(address onBehalfOf, address receiver, address[] memory rewards) internal {\n    for (uint256 i = 0; i < rewards.length; i++) {\n      if (address(rewards[i]) == address(0)) {\n        continue;\n      }\n      uint256 currentRewardsIndex = getCurrentRewardsIndex(rewards[i]);\n      uint256 balance = balanceOf[onBehalfOf];\n      uint256 userReward = _getClaimableRewards(onBehalfOf, rewards[i], balance, currentRewardsIndex);\n      uint256 totalRewardTokenBalance = IERC20(rewards[i]).balanceOf(address(this));\n      uint256 unclaimedReward = 0;\n\n      if (userReward > totalRewardTokenBalance) {\n        totalRewardTokenBalance += collectAndUpdateRewards(address(rewards[i]));\n      }\n\n      if (userReward > totalRewardTokenBalance) {\n        unclaimedReward = userReward - totalRewardTokenBalance;\n        userReward = totalRewardTokenBalance;\n      }\n      if (userReward > 0) {\n        _userRewardsData[onBehalfOf][rewards[i]].unclaimedRewards = unclaimedReward.toUint128();\n        _userRewardsData[onBehalfOf][rewards[i]].rewardsIndexOnLastInteraction = currentRewardsIndex.toUint128();\n        IERC20(rewards[i]).safeTransfer(receiver, userReward);\n      }\n    }\n  }\n\n  function _convertToShares(uint256 assets, Rounding rounding) internal view returns (uint256) {\n    if (rounding == Rounding.UP) return assets.rayDivRoundUp(rate());\n    return assets.rayDivRoundDown(rate());\n  }\n\n  function _convertToAssets(uint256 shares, Rounding rounding) internal view returns (uint256) {\n    if (rounding == Rounding.UP) return shares.rayMulRoundUp(rate());\n    return shares.rayMulRoundDown(rate());\n  }\n\n  /**\n   * @notice Initializes a new rewardToken\n   * @param reward The reward token to be registered\n   */\n  function _registerRewardToken(address reward) internal {\n    if (isRegisteredRewardToken(reward)) return;\n    uint256 startIndex = getCurrentRewardsIndex(reward);\n\n    _rewardTokens.push(reward);\n    _startIndex[reward] = RewardIndexCache(true, uint240(startIndex));\n\n    emit RewardTokenRegistered(reward, startIndex);\n  }\n\n  /**\n   * @notice Returns the ongoing normalized income for the reserve.\n   * @dev A value of 1e27 means there is no income. As time passes, the income is accrued\n   * @dev A value of 2*1e27 means for each unit of asset one unit of income has been accrued\n   * @param reserve The reserve object\n   * @return The normalized income, expressed in ray\n   */\n  function _getNormalizedIncome(DataTypes.ReserveData memory reserve) internal view returns (uint256) {\n    uint40 timestamp = reserve.lastUpdateTimestamp;\n\n    //solium-disable-next-line\n    if (timestamp == block.timestamp) {\n      //if the index was updated in the same block, no need to perform any calculation\n      return reserve.liquidityIndex;\n    } else {\n      return MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(reserve.liquidityIndex);\n    }\n  }\n}\n"
    },
    "contracts/vaults/dstake/adapters/WrappedDLendConversionAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IDStableConversionAdapter } from \"../interfaces/IDStableConversionAdapter.sol\";\nimport { IStaticATokenLM } from \"../../atoken_wrapper/interfaces/IStaticATokenLM.sol\"; // Interface for StaticATokenLM\nimport { IERC4626 } from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\n\n/**\n * @title WrappedDLendConversionAdapter\n * @notice Adapter for converting between a dSTABLE asset (like dUSD) and a specific wrapped dLEND aToken\n *         (like wddUSD, implemented via StaticATokenLM). The wrapped dLEND token address must be provided at deployment.\n * @dev Implements the IDStableConversionAdapter interface.\n *      Interacts with a specific StaticATokenLM contract provided at deployment.\n */\ncontract WrappedDLendConversionAdapter is IDStableConversionAdapter {\n  using SafeERC20 for IERC20;\n\n  // --- Errors ---\n  error ZeroAddress();\n  error InvalidAmount();\n  error InconsistentState(string message);\n\n  // --- State ---\n  address public immutable dStable; // The underlying dSTABLE asset (e.g., dUSD)\n  IStaticATokenLM public immutable wrappedDLendToken; // The wrapped dLEND aToken (StaticATokenLM instance, e.g., wddUSD)\n  address public immutable collateralVault; // The DStakeCollateralVault to deposit wrappedDLendToken into\n\n  // --- Constructor ---\n  /**\n   * @param _dStable The address of the dSTABLE asset (e.g., dUSD)\n   * @param _wrappedDLendToken The address of the wrapped dLEND token (StaticATokenLM, e.g., wddUSD)\n   * @param _collateralVault The address of the DStakeCollateralVault\n   */\n  constructor(address _dStable, address _wrappedDLendToken, address _collateralVault) {\n    if (_dStable == address(0) || _wrappedDLendToken == address(0) || _collateralVault == address(0)) {\n      revert ZeroAddress();\n    }\n    dStable = _dStable;\n    wrappedDLendToken = IStaticATokenLM(_wrappedDLendToken);\n    collateralVault = _collateralVault;\n\n    // Sanity check: Ensure the StaticATokenLM wrapper uses the correct underlying by casting to IERC4626\n    if (IERC4626(_wrappedDLendToken).asset() != _dStable) {\n      revert InconsistentState(\"StaticATokenLM underlying mismatch\");\n    }\n  }\n\n  // --- IDStableConversionAdapter Implementation ---\n\n  /**\n   * @inheritdoc IDStableConversionAdapter\n   * @dev Converts dStable -> wrappedDLendToken by depositing into StaticATokenLM.\n   *      The StaticATokenLM contract MUST be pre-approved to spend dStable held by this adapter.\n   *      The StaticATokenLM contract mints the wrappedDLendToken directly to the collateralVault.\n   */\n  function convertToVaultAsset(uint256 dStableAmount) external override returns (address _vaultAsset, uint256 vaultAssetAmount) {\n    if (dStableAmount == 0) {\n      revert InvalidAmount();\n    }\n\n    // 1. Pull dStable from caller (Router)\n    IERC20(dStable).safeTransferFrom(msg.sender, address(this), dStableAmount);\n\n    // 2. Approve the StaticATokenLM wrapper to pull the dStable\n    IERC20(dStable).forceApprove(address(wrappedDLendToken), dStableAmount);\n\n    // 3. Deposit dStable into the StaticATokenLM wrapper, minting wrappedDLendToken to collateralVault\n    vaultAssetAmount = IERC4626(address(wrappedDLendToken)).deposit(dStableAmount, collateralVault);\n\n    return (address(wrappedDLendToken), vaultAssetAmount);\n  }\n\n  /**\n   * @inheritdoc IDStableConversionAdapter\n   * @dev Converts wrappedDLendToken -> dStable by withdrawing from StaticATokenLM.\n   *      The StaticATokenLM contract sends the dStable directly to msg.sender.\n   */\n  function convertFromVaultAsset(uint256 vaultAssetAmount) external override returns (uint256 dStableAmount) {\n    if (vaultAssetAmount == 0) {\n      revert InvalidAmount();\n    }\n\n    // 1. Pull wrappedDLendToken (shares) from caller (Router)\n    IERC20(address(wrappedDLendToken)).safeTransferFrom(msg.sender, address(this), vaultAssetAmount);\n\n    // 2. Withdraw from StaticATokenLM, sending dStable to msg.sender\n    dStableAmount = IERC4626(address(wrappedDLendToken)).redeem(vaultAssetAmount, msg.sender, address(this));\n\n    if (dStableAmount == 0) {\n      revert InvalidAmount();\n    }\n\n    return dStableAmount;\n  }\n\n  /**\n   * @inheritdoc IDStableConversionAdapter\n   * @dev Uses StaticATokenLM's previewRedeem function to get the underlying value (dStable).\n   */\n  function assetValueInDStable(address _vaultAsset, uint256 vaultAssetAmount) external view override returns (uint256 dStableValue) {\n    if (_vaultAsset != address(wrappedDLendToken)) {\n      revert InconsistentState(\"Incorrect vault asset address\");\n    }\n    // previewRedeem takes shares (vaultAssetAmount) and returns assets (dStableValue)\n    return IERC4626(address(wrappedDLendToken)).previewRedeem(vaultAssetAmount);\n  }\n\n  /**\n   * @inheritdoc IDStableConversionAdapter\n   */\n  function vaultAsset() external view override returns (address) {\n    return address(wrappedDLendToken);\n  }\n\n  /**\n   * @inheritdoc IDStableConversionAdapter\n   * @dev Preview the result of converting a given dSTABLE amount to wrappedDLendToken.\n   * @param dStableAmount Amount of dSTABLE to convert\n   * @return _vaultAsset Address of the vault asset (wrapped dLend token)\n   * @return vaultAssetAmount Amount of vault asset that would be received\n   */\n  function previewConvertToVaultAsset(uint256 dStableAmount) public view override returns (address _vaultAsset, uint256 vaultAssetAmount) {\n    _vaultAsset = address(wrappedDLendToken);\n    vaultAssetAmount = IERC4626(address(wrappedDLendToken)).previewDeposit(dStableAmount);\n  }\n\n  /**\n   * @inheritdoc IDStableConversionAdapter\n   * @dev Preview the result of converting a given wrappedDLendToken amount to dSTABLE.\n   * @param vaultAssetAmount Amount of vault asset to convert\n   * @return dStableAmount Amount of dSTABLE that would be received\n   */\n  function previewConvertFromVaultAsset(uint256 vaultAssetAmount) public view override returns (uint256 dStableAmount) {\n    dStableAmount = IERC4626(address(wrappedDLendToken)).previewRedeem(vaultAssetAmount);\n  }\n}\n"
    },
    "contracts/vaults/dstake/DStakeCollateralVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IDStakeCollateralVault } from \"./interfaces/IDStakeCollateralVault.sol\";\nimport { IDStableConversionAdapter } from \"./interfaces/IDStableConversionAdapter.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { EnumerableSet } from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n// ---------------------------------------------------------------------------\n// Internal interface to query the router's public mapping without importing the\n// full router contract (avoids circular dependencies).\n// ---------------------------------------------------------------------------\ninterface IAdapterProvider {\n  function vaultAssetToAdapter(address) external view returns (address);\n}\n\n/**\n * @title DStakeCollateralVault\n * @notice Holds various yield-bearing/convertible ERC20 tokens (`vault assets`) managed by dSTAKE.\n * @dev Calculates the total value of these assets in terms of the underlying dStable asset\n *      using registered adapters. This contract is non-upgradeable but replaceable via\n *      DStakeToken governance.\n *      Uses AccessControl for role-based access control.\n */\ncontract DStakeCollateralVault is IDStakeCollateralVault, AccessControl, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  // --- Roles ---\n  bytes32 public constant ROUTER_ROLE = keccak256(\"ROUTER_ROLE\");\n\n  // --- Errors ---\n  error ZeroAddress();\n  error AssetNotSupported(address asset);\n  error AssetAlreadySupported(address asset);\n  error NonZeroBalance(address asset);\n  error CannotRescueRestrictedToken(address token);\n  error ETHTransferFailed(address receiver, uint256 amount);\n\n  // --- Events ---\n  event TokenRescued(address indexed token, address indexed receiver, uint256 amount);\n  event ETHRescued(address indexed receiver, uint256 amount);\n\n  // --- State ---\n  address public immutable dStakeToken; // The DStakeToken this vault serves\n  address public immutable dStable; // The underlying dStable asset address\n\n  address public router; // The DStakeRouter allowed to interact\n\n  EnumerableSet.AddressSet private _supportedAssets; // Set of supported vault assets\n\n  // --- Constructor ---\n  constructor(address _dStakeVaultShare, address _dStableAsset) {\n    if (_dStakeVaultShare == address(0) || _dStableAsset == address(0)) {\n      revert ZeroAddress();\n    }\n    dStakeToken = _dStakeVaultShare;\n    dStable = _dStableAsset;\n\n    // Set up the DEFAULT_ADMIN_ROLE initially to the contract deployer\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n  }\n\n  // --- External Views (IDStakeCollateralVault Interface) ---\n\n  /**\n   * @inheritdoc IDStakeCollateralVault\n   */\n  function totalValueInDStable() external view override returns (uint256 dStableValue) {\n    uint256 totalValue = 0;\n    uint256 len = _supportedAssets.length();\n    for (uint256 i = 0; i < len; i++) {\n      address vaultAsset = _supportedAssets.at(i);\n      address adapterAddress = IAdapterProvider(router).vaultAssetToAdapter(vaultAsset);\n\n      if (adapterAddress == address(0)) {\n        // If there is no adapter configured, simply skip this asset to\n        // preserve liveness. Anyone can dust this vault and we cannot\n        // enforce that all assets have adapters before removal\n        continue;\n      }\n\n      uint256 balance = IERC20(vaultAsset).balanceOf(address(this));\n      if (balance > 0) {\n        totalValue += IDStableConversionAdapter(adapterAddress).assetValueInDStable(vaultAsset, balance);\n      }\n    }\n    return totalValue;\n  }\n\n  // --- External Functions (Router Interactions) ---\n\n  /**\n   * @notice Transfers `amount` of `vaultAsset` from this vault to `recipient`.\n   * @dev Only callable by the registered router (ROUTER_ROLE).\n   * @param vaultAsset The vault asset to transfer\n   * @param amount Amount of tokens to transfer\n   * @param recipient Address to receive the tokens\n   */\n  function sendAsset(address vaultAsset, uint256 amount, address recipient) external onlyRole(ROUTER_ROLE) {\n    if (!_isSupported(vaultAsset)) revert AssetNotSupported(vaultAsset);\n    IERC20(vaultAsset).safeTransfer(recipient, amount);\n  }\n\n  /**\n   * @notice Adds a new supported vault asset. Can only be invoked by the router.\n   * @dev Only callable by the registered router (ROUTER_ROLE).\n   * @param vaultAsset Address of the vault asset to add\n   */\n  function addSupportedAsset(address vaultAsset) external onlyRole(ROUTER_ROLE) {\n    if (vaultAsset == address(0)) revert ZeroAddress();\n    if (_isSupported(vaultAsset)) revert AssetAlreadySupported(vaultAsset);\n\n    _supportedAssets.add(vaultAsset);\n    emit SupportedAssetAdded(vaultAsset);\n  }\n\n  /**\n   * @notice Removes a supported vault asset. Can only be invoked by the router.\n   * @dev Only callable by the registered router (ROUTER_ROLE).\n   * @param vaultAsset Address of the vault asset to remove\n   */\n  function removeSupportedAsset(address vaultAsset) external onlyRole(ROUTER_ROLE) {\n    if (!_isSupported(vaultAsset)) revert AssetNotSupported(vaultAsset);\n    // NOTE: Previously this function reverted if the vault still held a\n    // non-zero balance of the asset, causing a griefing / DoS vector:\n    // anyone could deposit 1 wei of the token to block removal. The\n    // check has been removed so governance can always delist an asset.\n\n    _supportedAssets.remove(vaultAsset);\n    emit SupportedAssetRemoved(vaultAsset);\n  }\n\n  // --- Governance Functions ---\n\n  /**\n   * @notice Sets the router address. Grants ROUTER_ROLE to new router and\n   *         revokes it from the previous router.\n   * @dev Only callable by DEFAULT_ADMIN_ROLE.\n   * @param _newRouter Address of the new router\n   */\n  function setRouter(address _newRouter) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_newRouter == address(0)) revert ZeroAddress();\n\n    // Revoke role from old router\n    if (router != address(0)) {\n      _revokeRole(ROUTER_ROLE, router);\n    }\n\n    _grantRole(ROUTER_ROLE, _newRouter);\n    router = _newRouter;\n    emit RouterSet(_newRouter);\n  }\n\n  // --- Internal Utilities ---\n\n  function _isSupported(address asset) private view returns (bool) {\n    return _supportedAssets.contains(asset);\n  }\n\n  // --- External Views ---\n\n  /**\n   * @notice Returns the vault asset at `index` from the internal supported set.\n   *         Kept for backwards-compatibility with the previous public array getter.\n   */\n  function supportedAssets(uint256 index) external view override returns (address) {\n    return _supportedAssets.at(index);\n  }\n\n  /**\n   * @notice Returns the entire list of supported vault assets. Useful for UIs & off-chain tooling.\n   */\n  function getSupportedAssets() external view returns (address[] memory) {\n    return _supportedAssets.values();\n  }\n\n  // --- Recovery Functions ---\n\n  /**\n   * @notice Rescues tokens accidentally sent to the contract\n   * @dev Cannot rescue supported vault assets or the dStable token\n   * @param token Address of the token to rescue\n   * @param receiver Address to receive the rescued tokens\n   * @param amount Amount of tokens to rescue\n   */\n  function rescueToken(address token, address receiver, uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\n    if (receiver == address(0)) revert ZeroAddress();\n\n    // Check if token is a supported asset\n    if (_isSupported(token)) {\n      revert CannotRescueRestrictedToken(token);\n    }\n\n    // Check if token is the dStable token\n    if (token == dStable) {\n      revert CannotRescueRestrictedToken(token);\n    }\n\n    // Rescue the token\n    IERC20(token).safeTransfer(receiver, amount);\n    emit TokenRescued(token, receiver, amount);\n  }\n\n  /**\n   * @notice Rescues ETH accidentally sent to the contract\n   * @param receiver Address to receive the rescued ETH\n   * @param amount Amount of ETH to rescue\n   */\n  function rescueETH(address receiver, uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\n    if (receiver == address(0)) revert ZeroAddress();\n\n    (bool success, ) = receiver.call{ value: amount }(\"\");\n    if (!success) revert ETHTransferFailed(receiver, amount);\n\n    emit ETHRescued(receiver, amount);\n  }\n\n  /**\n   * @notice Returns the list of tokens that cannot be rescued\n   * @return restrictedTokens Array of restricted token addresses\n   */\n  function getRestrictedRescueTokens() external view returns (address[] memory) {\n    address[] memory assets = _supportedAssets.values();\n    address[] memory restrictedTokens = new address[](assets.length + 1);\n\n    // Add all supported assets\n    for (uint256 i = 0; i < assets.length; i++) {\n      restrictedTokens[i] = assets[i];\n    }\n\n    // Add dStable token\n    restrictedTokens[assets.length] = dStable;\n\n    return restrictedTokens;\n  }\n\n  /**\n   * @notice Allows the contract to receive ETH\n   */\n  receive() external payable {}\n}\n"
    },
    "contracts/vaults/dstake/DStakeProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// Dedicated ProxyAdmin for the dSTAKE subsystem.\n// Deploying a separate ProxyAdmin keeps dSTAKE upgrades isolated from the\n// global DefaultProxyAdmin used elsewhere in the protocol.\ncontract DStakeProxyAdmin is ProxyAdmin {\n  constructor(address initialOwner) ProxyAdmin(initialOwner) {}\n}\n"
    },
    "contracts/vaults/dstake/DStakeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { ERC4626Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\";\nimport { ERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport { AccessControlUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IDStakeCollateralVault } from \"./interfaces/IDStakeCollateralVault.sol\";\nimport { IDStakeRouter } from \"./interfaces/IDStakeRouter.sol\";\nimport { BasisPointConstants } from \"../../common/BasisPointConstants.sol\";\nimport { SupportsWithdrawalFee } from \"../../common/SupportsWithdrawalFee.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title DStakeToken\n * @dev ERC4626-compliant token representing shares in the DStakeCollateralVault.\n */\ncontract DStakeToken is Initializable, ERC4626Upgradeable, AccessControlUpgradeable, SupportsWithdrawalFee {\n  using SafeERC20 for IERC20;\n\n  // --- Roles ---\n  bytes32 public constant FEE_MANAGER_ROLE = keccak256(\"FEE_MANAGER_ROLE\");\n\n  // --- Errors ---\n  error ZeroAddress();\n  error ZeroShares();\n  error ERC4626ExceedsMaxWithdraw(uint256 assets, uint256 maxAssets);\n  error ERC4626ExceedsMaxRedeem(uint256 shares, uint256 maxShares);\n\n  // --- State ---\n  IDStakeCollateralVault public collateralVault;\n  IDStakeRouter public router;\n\n  uint256 public constant MAX_WITHDRAWAL_FEE_BPS = BasisPointConstants.ONE_PERCENT_BPS;\n\n  // --- Initializer ---\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  /**\n   * @notice Initializes the DStakeToken contract\n   * @dev This function replaces the constructor for upgradeable contracts\n   * @param _dStable The underlying dStable asset\n   * @param _name Name of the vault token\n   * @param _symbol Symbol of the vault token\n   * @param _initialAdmin Address to grant DEFAULT_ADMIN_ROLE\n   * @param _initialFeeManager Address to grant FEE_MANAGER_ROLE\n   */\n  function initialize(\n    IERC20 _dStable,\n    string memory _name,\n    string memory _symbol,\n    address _initialAdmin,\n    address _initialFeeManager\n  ) public initializer {\n    __ERC20_init(_name, _symbol);\n    __ERC4626_init(_dStable);\n    __AccessControl_init();\n    _initializeWithdrawalFee(0);\n\n    if (address(_dStable) == address(0) || _initialAdmin == address(0) || _initialFeeManager == address(0)) {\n      revert ZeroAddress();\n    }\n\n    _grantRole(DEFAULT_ADMIN_ROLE, _initialAdmin);\n    _grantRole(FEE_MANAGER_ROLE, _initialFeeManager);\n  }\n\n  // --- SupportsWithdrawalFee Implementation ---\n  function _maxWithdrawalFeeBps() internal view virtual override returns (uint256) {\n    return MAX_WITHDRAWAL_FEE_BPS;\n  }\n\n  /**\n   * @notice Public getter for the current withdrawal fee in basis points.\n   */\n  function withdrawalFeeBps() public view returns (uint256) {\n    return getWithdrawalFeeBps(); // Uses getter from SupportsWithdrawalFee\n  }\n\n  /**\n   * @notice Public getter for the maximum withdrawal fee in basis points.\n   */\n  function maxWithdrawalFeeBps() public pure returns (uint256) {\n    return MAX_WITHDRAWAL_FEE_BPS;\n  }\n\n  // --- ERC4626 Overrides ---\n\n  /**\n   * @inheritdoc ERC4626Upgradeable\n   * @dev\n   * IMPORTANT: When all vault shares have been redeemed, the router intentionally\n   * leaves up to `dustTolerance` (1 wei by default) of wrapper tokens in the\n   * `DStakeCollateralVault`. These wrapper tokens continue to accrue\n   * yield via an ever-increasing price-per-share. As a result, it is\n   * theoretically possible for `totalSupply() == 0` while `totalAssets()`\n   * returns a non-zero value.\n   *\n   * The protocol explicitly accepts that the **first depositor after such a\n   * complete withdrawal will receive whatever residual value has\n   * accumulated**.  Given the minuscule starting balance (≤ 1 wei) and slow\n   * growth rate, the team judged that the gas cost of enforcing a strict\n   * invariant outweighed the negligible windfall.\n   *\n   * Please keep this in mind if `dustTolerance` is increased to a non-negligible value.\n   */\n  function totalAssets() public view virtual override returns (uint256) {\n    if (address(collateralVault) == address(0)) {\n      return 0;\n    }\n    return collateralVault.totalValueInDStable();\n  }\n\n  /**\n   * @dev Pulls dSTABLE asset from depositor, then delegates the core deposit logic\n   *      (converting dSTABLE to vault assets) to the router.\n   */\n  function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual override {\n    // Revert early if the calculated share amount is zero to prevent depositing assets without receiving shares\n    if (shares == 0) {\n      revert ZeroShares();\n    }\n    if (address(router) == address(0) || address(collateralVault) == address(0)) {\n      revert ZeroAddress(); // Router or Vault not set\n    }\n\n    // Pull assets from caller\n    super._deposit(caller, receiver, assets, shares); // This handles the ERC20 transfer\n\n    // Approve router to spend the received assets (necessary because super._deposit transfers to this contract)\n    IERC20(asset()).forceApprove(address(router), assets);\n\n    // Delegate conversion and vault update logic to router\n    router.deposit(assets);\n  }\n\n  /**\n   * @dev Override to handle withdrawals with fees correctly.\n   *      The `assets` parameter is the net amount of assets the user wants to receive.\n   */\n  function withdraw(uint256 assets, address receiver, address owner) public virtual override returns (uint256 shares) {\n    // Calculate how many shares correspond to the desired NET `assets` amount.\n    shares = previewWithdraw(assets);\n\n    // Ensure the owner has enough shares to cover the withdrawal (checks in share terms rather than assets).\n    if (shares > maxRedeem(owner)) {\n      revert ERC4626ExceedsMaxRedeem(shares, maxRedeem(owner));\n    }\n\n    // Translate the shares back into the GROSS asset amount that needs to be withdrawn\n    // so that the internal logic can compute the fee only once.\n    uint256 grossAssets = convertToAssets(shares);\n\n    _withdraw(_msgSender(), receiver, owner, grossAssets, shares);\n    return shares;\n  }\n\n  /**\n   * @notice Returns the maximum NET assets that `owner` can withdraw taking the current\n   *         withdrawal fee into account.\n   *\n   *         OpenZeppelin's reference implementation returns the owner's share balance\n   *         converted to assets (i.e. a gross value).  In a fee-charging vault that\n   *         exposes `withdraw(netAssets)`, the intuitive expectation is that\n   *         `maxWithdraw` already reflects what the user will actually receive after\n   *         fees.  We therefore convert the share balance to GROSS assets first and then\n   *         subtract the fee.\n   */\n  function maxWithdraw(address owner) public view virtual override returns (uint256) {\n    uint256 grossAssets = convertToAssets(balanceOf(owner));\n    return _getNetAmountAfterFee(grossAssets);\n  }\n\n  /**\n   * @dev Override to ensure the withdrawal fee is deducted only once.\n   *      The `shares` parameter is converted to its equivalent gross asset value, then the\n   *      internal _withdraw handles fee calculation. The returned value is the net assets\n   *      actually received by the `receiver`, matching previewRedeem().\n   */\n  function redeem(uint256 shares, address receiver, address owner) public virtual override returns (uint256 assets) {\n    uint256 grossAssets = convertToAssets(shares); // shares → gross assets before fee\n\n    if (shares > maxRedeem(owner)) {\n      revert ERC4626ExceedsMaxRedeem(shares, maxRedeem(owner));\n    }\n\n    // Perform withdrawal using gross assets so that _withdraw computes the correct fee once\n    _withdraw(_msgSender(), receiver, owner, grossAssets, shares);\n\n    // Net assets the user effectively receives\n    assets = _getNetAmountAfterFee(grossAssets);\n    return assets;\n  }\n\n  /**\n   * @dev Calculates withdrawal fee, then delegates the core withdrawal logic\n   *      (converting vault assets back to dSTABLE) to the router.\n   *      The `assets` parameter is now the gross amount that needs to be withdrawn from the vault.\n   */\n  function _withdraw(\n    address caller,\n    address receiver,\n    address owner,\n    uint256 assets, // This is now the GROSS amount\n    uint256 shares\n  ) internal virtual override {\n    if (caller != owner) {\n      _spendAllowance(owner, caller, shares);\n    }\n\n    if (address(router) == address(0) || address(collateralVault) == address(0)) {\n      revert ZeroAddress(); // Router or Vault not set\n    }\n\n    uint256 fee = _calculateWithdrawalFee(assets); // Calculate fee on GROSS amount\n    uint256 amountToSend = assets - fee; // Send NET amount to user\n\n    // Burn shares from owner\n    _burn(owner, shares);\n\n    // Delegate conversion and vault update logic to router\n    // Router is responsible for ensuring `amountToSend` of dSTABLE reaches the `receiver`.\n    router.withdraw(amountToSend, receiver, owner);\n\n    // Emit ERC4626 Withdraw event with the NET assets that were actually sent\n    emit Withdraw(caller, receiver, owner, amountToSend, shares);\n\n    // Optional: Emit fee event\n    if (fee > 0) {\n      emit WithdrawalFee(owner, receiver, fee);\n    }\n  }\n\n  /**\n   * @dev Preview withdraw including withdrawal fee.\n   */\n  function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\n    uint256 grossAssetsRequired = _getGrossAmountRequiredForNet(assets);\n    return super.previewWithdraw(grossAssetsRequired);\n  }\n\n  /**\n   * @dev Preview redeem including withdrawal fee.\n   */\n  function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\n    uint256 grossAssets = super.previewRedeem(shares);\n    return _getNetAmountAfterFee(grossAssets);\n  }\n\n  // --- Governance Functions ---\n\n  /**\n   * @notice Sets the address of the DStakeRouter contract.\n   * @dev Only callable by DEFAULT_ADMIN_ROLE.\n   * @param _router The address of the new router contract.\n   */\n  function setRouter(address _router) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_router == address(0)) {\n      revert ZeroAddress();\n    }\n    router = IDStakeRouter(_router);\n    emit RouterSet(_router);\n  }\n\n  /**\n   * @notice Sets the address of the DStakeCollateralVault contract.\n   * @dev Only callable by DEFAULT_ADMIN_ROLE.\n   * @param _collateralVault The address of the new collateral vault contract.\n   */\n  function setCollateralVault(address _collateralVault) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_collateralVault == address(0)) {\n      revert ZeroAddress();\n    }\n    collateralVault = IDStakeCollateralVault(_collateralVault);\n    emit CollateralVaultSet(_collateralVault);\n  }\n\n  /**\n   * @notice Sets the withdrawal fee in basis points.\n   * @dev Requires FEE_MANAGER_ROLE.\n   * @param _feeBps The new withdrawal fee (e.g., 1000 = 0.1%).\n   */\n  function setWithdrawalFee(uint256 _feeBps) external onlyRole(FEE_MANAGER_ROLE) {\n    _setWithdrawalFee(_feeBps);\n  }\n\n  // --- Events ---\n  event RouterSet(address indexed router);\n  event CollateralVaultSet(address indexed collateralVault);\n}\n"
    },
    "contracts/vaults/dstake/interfaces/IDStableConversionAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IDStableConversionAdapter Interface\n * @notice Interface for contracts that handle the conversion between the core stable asset (dUSD/dETH)\n *         and a specific yield-bearing or convertible ERC20 token (`vault asset`), as well as\n *         valuing that `vault asset` in terms of the stable asset.\n * @dev Implementations interact with specific protocols (lending pools, DEX LPs, wrappers, etc.).\n */\ninterface IDStableConversionAdapter {\n  /**\n   * @notice Converts a specified amount of the stable asset into the specific `vaultAsset`\n   *         managed by this adapter.\n   * @dev The adapter MUST pull `stableAmount` of the stable asset from the caller (expected to be the Router).\n   * @dev The resulting `vaultAsset` MUST be sent/deposited/minted directly to the `collateralVault` address provided during adapter setup or retrieved.\n   * @param stableAmount The amount of stable asset to convert.\n   * @return vaultAsset The address of the specific `vault asset` token managed by this adapter.\n   * @return vaultAssetAmount The amount of `vaultAsset` generated from the conversion.\n   */\n  function convertToVaultAsset(uint256 stableAmount) external returns (address vaultAsset, uint256 vaultAssetAmount);\n\n  /**\n   * @notice Converts a specific amount of `vaultAsset` back into the stable asset.\n   * @dev The adapter MUST pull the required amount of `vaultAsset` from the caller (expected to be the Router).\n   * @dev The resulting stable asset MUST be sent to the caller.\n   * @param vaultAssetAmount The amount of `vaultAsset` to convert.\n   * @return stableAmount The amount of stable asset sent to the caller.\n   */\n  function convertFromVaultAsset(uint256 vaultAssetAmount) external returns (uint256 stableAmount);\n\n  /**\n   * @notice Preview the result of converting a given stable amount to vaultAsset (without state change).\n   * @param stableAmount The amount of stable asset to preview conversion for.\n   * @return vaultAsset The address of the specific `vault asset` token managed by this adapter.\n   * @return vaultAssetAmount The amount of `vaultAsset` that would be received.\n   */\n  function previewConvertToVaultAsset(uint256 stableAmount) external view returns (address vaultAsset, uint256 vaultAssetAmount);\n\n  /**\n   * @notice Preview the result of converting a given vaultAsset amount to stable asset (without state change).\n   * @param vaultAssetAmount The amount of `vaultAsset` to preview conversion for.\n   * @return stableAmount The amount of stable asset that would be received.\n   */\n  function previewConvertFromVaultAsset(uint256 vaultAssetAmount) external view returns (uint256 stableAmount);\n\n  /**\n   * @notice Calculates the value of a given amount of the specific `vaultAsset` managed by this adapter\n   *         in terms of the stable asset.\n   * @param vaultAsset The address of the vault asset token (should match getVaultAsset()). Included for explicitness.\n   * @param vaultAssetAmount The amount of the `vaultAsset` to value.\n   * @return stableValue The equivalent value in the stable asset.\n   */\n  function assetValueInDStable(address vaultAsset, uint256 vaultAssetAmount) external view returns (uint256 stableValue);\n\n  /**\n   * @notice Returns the address of the specific `vault asset` token managed by this adapter.\n   * @return The address of the `vault asset`.\n   */\n  function vaultAsset() external view returns (address);\n}\n"
    },
    "contracts/vaults/dstake/interfaces/IDStakeCollateralVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IDStakeCollateralVault Interface\n * @notice Defines the external functions of the DStakeCollateralVault required by other\n *         contracts in the dSTAKE system, primarily the DStakeToken.\n */\ninterface IDStakeCollateralVault {\n  /**\n   * @notice Calculates the total value of all managed `vault assets` held by the vault,\n   *         denominated in the underlying dStable asset.\n   * @dev This is typically called by the DStakeToken's `totalAssets()` function.\n   * @return dStableValue The total value of managed assets in terms of the dStable asset.\n   */\n  function totalValueInDStable() external view returns (uint256 dStableValue);\n\n  /**\n   * @notice Returns the address of the underlying dStable asset the vault operates with.\n   * @return The address of the dStable asset.\n   */\n  function dStable() external view returns (address);\n\n  /**\n   * @notice The DStakeToken contract address this vault serves.\n   */\n  function dStakeToken() external view returns (address);\n\n  /**\n   * @notice The DStakeRouter contract address allowed to interact.\n   */\n  function router() external view returns (address);\n\n  /**\n   * @notice Returns the vault asset at `index` from the internal supported list.\n   */\n  function supportedAssets(uint256 index) external view returns (address);\n\n  /**\n   * @notice Returns the entire list of supported vault assets. Convenient for UIs & off-chain analytics.\n   */\n  function getSupportedAssets() external view returns (address[] memory);\n\n  /**\n   * @notice Transfers `amount` of `vaultAsset` from this vault to the `recipient`.\n   * @dev Only callable by the registered router.\n   * @param vaultAsset The address of the vault asset to send.\n   * @param amount The amount to send.\n   * @param recipient The address to receive the asset.\n   */\n  function sendAsset(address vaultAsset, uint256 amount, address recipient) external;\n\n  /**\n   * @notice Sets the address of the DStakeRouter contract.\n   * @dev Only callable by an address with the DEFAULT_ADMIN_ROLE.\n   * @param _newRouter The address of the new router contract.\n   */\n  function setRouter(address _newRouter) external;\n\n  /**\n   * @notice Adds a vault asset to the supported list. Callable only by the router.\n   */\n  function addSupportedAsset(address vaultAsset) external;\n\n  /**\n   * @notice Removes a vault asset from the supported list. Callable only by the router.\n   */\n  function removeSupportedAsset(address vaultAsset) external;\n\n  /**\n   * @notice Emitted when the router address is set.\n   * @param router The address of the new router.\n   */\n  event RouterSet(address indexed router);\n\n  /**\n   * @notice Emitted when a new vault asset is added to the supported list.\n   */\n  event SupportedAssetAdded(address indexed vaultAsset);\n\n  /**\n   * @notice Emitted when a vault asset is removed from the supported list.\n   */\n  event SupportedAssetRemoved(address indexed vaultAsset);\n}\n"
    },
    "contracts/vaults/dstake/interfaces/IDStakeRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IDStakeRouter Interface\n * @notice Defines the external functions of the DStakeRouter required by the DStakeToken\n *         for handling deposits and withdrawals.\n */\ninterface IDStakeRouter {\n  /**\n   * @notice Handles the conversion of deposited dStable asset into a chosen `vaultAsset`\n   *         and informs the collateral vault.\n   * @dev Called by `DStakeToken._deposit()` after the token has received the dStable asset.\n   * @dev The router MUST pull `dStableAmount` from the caller (`DStakeToken`).\n   * @param dStableAmount The amount of dStable asset deposited by the user into the DStakeToken.\n   */\n  function deposit(uint256 dStableAmount) external;\n\n  /**\n   * @notice Handles the conversion of a `vaultAsset` back into the dStable asset for withdrawal.\n   * @dev Called by `DStakeToken._withdraw()`.\n   * @dev The router coordinates pulling the required `vaultAsset` from the collateral vault\n   *      and ensuring the converted dStable asset is sent to the `receiver`.\n   * @param dStableAmount The amount of dStable asset to be withdrawn to the `receiver` (after vault fees).\n   * @param receiver The address that will receive the withdrawn dStable asset.\n   * @param owner The original owner initiating the withdrawal (typically the user burning shares).\n   */\n  function withdraw(uint256 dStableAmount, address receiver, address owner) external;\n}\n"
    },
    "contracts/vaults/rewards_claimable/RewardClaimable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport { BasisPointConstants } from \"contracts/common/BasisPointConstants.sol\";\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @title RewardClaimable\n * @dev Abstract contract for vaults with claimable rewards\n * Implements functionality for claiming and compounding rewards\n */\nabstract contract RewardClaimable is AccessControl, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n\n  // Roles\n  bytes32 public constant REWARDS_MANAGER_ROLE = keccak256(\"REWARDS_MANAGER_ROLE\");\n\n  // State variables\n  address public treasury;\n  uint256 public treasuryFeeBps;\n  uint256 public exchangeThreshold;\n  address public immutable exchangeAsset;\n  uint256 public immutable maxTreasuryFeeBps;\n\n  // Events\n  event TreasuryUpdated(address oldTreasury, address newTreasury);\n  event TreasuryFeeBpsUpdated(uint256 oldTreasuryFeeBps, uint256 newTreasuryFeeBps);\n  event ExchangeThresholdUpdated(uint256 oldExchangeThreshold, uint256 newExchangeThreshold);\n  event RewardCompounded(address exchangeAsset, uint256 amount, address[] rewardTokens);\n\n  // Custom errors\n  error ExchangeAmountTooLow(uint256 amount, uint256 threshold);\n  error RewardAmountsLengthMismatch(uint256 claimedAmountsLength, uint256 rewardTokensLength);\n  error TreasuryFeeExceedsRewardAmount(uint256 treasuryFee, uint256 rewardAmount);\n  error ZeroExchangeAssetAddress();\n  error ZeroTreasuryAddress();\n  error MaxTreasuryFeeTooHigh(uint256 maxTreasuryFeeBps);\n  error TreasuryFeeTooHigh(uint256 treasuryFeeBps, uint256 maxTreasuryFeeBps);\n  error ZeroExchangeThreshold();\n  error ZeroReceiverAddress();\n  error ZeroRewardTokens();\n\n  /**\n   * @dev Constructor for the RewardClaimable contract\n   * @param _exchangeAsset The address of the exchange asset\n   * @param _treasury The address of the treasury\n   * @param _maxTreasuryFeeBps The maximum treasury fee in basis points (30000 = 3%), where 100 = 1bps (1e2 for decimals)\n   * @param _initialTreasuryFeeBps The initial treasury fee in basis points (100 = 1bps, 10000 = 100bps = 1%)\n   * @param _initialExchangeThreshold The initial minimum threshold amount (in the same unit as the exchange asset)\n   */\n  constructor(\n    address _exchangeAsset,\n    address _treasury,\n    uint256 _maxTreasuryFeeBps,\n    uint256 _initialTreasuryFeeBps,\n    uint256 _initialExchangeThreshold\n  ) {\n    if (_exchangeAsset == address(0)) {\n      revert ZeroExchangeAssetAddress();\n    }\n    if (_treasury == address(0)) {\n      revert ZeroTreasuryAddress();\n    }\n    // The fee cannot exceed the reward amount (100%)\n    if (_maxTreasuryFeeBps > BasisPointConstants.ONE_HUNDRED_PERCENT_BPS) {\n      revert MaxTreasuryFeeTooHigh(_maxTreasuryFeeBps);\n    }\n    // The initial fee cannot exceed the max fee, which means cannot be greater than 100% as well\n    if (_initialTreasuryFeeBps > _maxTreasuryFeeBps) {\n      revert TreasuryFeeTooHigh(_initialTreasuryFeeBps, _maxTreasuryFeeBps);\n    }\n    if (_initialExchangeThreshold == 0) {\n      revert ZeroExchangeThreshold();\n    }\n\n    exchangeAsset = _exchangeAsset;\n    treasury = _treasury;\n    maxTreasuryFeeBps = _maxTreasuryFeeBps;\n    treasuryFeeBps = _initialTreasuryFeeBps;\n    exchangeThreshold = _initialExchangeThreshold;\n\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _grantRole(REWARDS_MANAGER_ROLE, msg.sender);\n  }\n\n  /**\n   * @dev Sets the treasury address\n   * @param newTreasury The new treasury address\n   */\n  function setTreasury(address newTreasury) external onlyRole(REWARDS_MANAGER_ROLE) {\n    if (newTreasury == address(0)) {\n      revert ZeroTreasuryAddress();\n    }\n    address oldTreasury = treasury;\n    treasury = newTreasury;\n\n    emit TreasuryUpdated(oldTreasury, newTreasury);\n  }\n\n  /**\n   * @dev Sets the treasury fee in basis points\n   * @param newTreasuryFeeBps New treasury fee in basis points (100 = 1bps = 0.01%)\n   */\n  function setTreasuryFeeBps(uint256 newTreasuryFeeBps) external onlyRole(REWARDS_MANAGER_ROLE) {\n    if (newTreasuryFeeBps > maxTreasuryFeeBps) {\n      revert TreasuryFeeTooHigh(newTreasuryFeeBps, maxTreasuryFeeBps);\n    }\n\n    uint256 oldTreasuryFeeBps = treasuryFeeBps;\n    treasuryFeeBps = newTreasuryFeeBps;\n\n    emit TreasuryFeeBpsUpdated(oldTreasuryFeeBps, newTreasuryFeeBps);\n  }\n\n  /**\n   * @dev Sets the minimum threshold for exchange operations\n   * @param newExchangeThreshold New minimum threshold amount\n   */\n  function setExchangeThreshold(uint256 newExchangeThreshold) external onlyRole(REWARDS_MANAGER_ROLE) {\n    if (newExchangeThreshold == 0) {\n      revert ZeroExchangeThreshold();\n    }\n    uint256 oldExchangeThreshold = exchangeThreshold;\n    exchangeThreshold = newExchangeThreshold;\n\n    emit ExchangeThresholdUpdated(oldExchangeThreshold, newExchangeThreshold);\n  }\n\n  /**\n   * @dev Calculates the treasury fee for a given amount\n   * @param amount The amount to calculate the treasury fee for\n   * @return The treasury fee in the same unit as the amount\n   */\n  function getTreasuryFee(uint256 amount) public view returns (uint256) {\n    return Math.mulDiv(amount, treasuryFeeBps, BasisPointConstants.ONE_HUNDRED_PERCENT_BPS);\n  }\n\n  /**\n   * @dev Compounds multiple rewards\n   * @param amount The amount to compound\n   * @param rewardTokens The reward tokens to claim\n   * @param receiver The address to receive the compounded rewards\n   */\n  function compoundRewards(uint256 amount, address[] calldata rewardTokens, address receiver) public virtual nonReentrant {\n    if (amount < exchangeThreshold) {\n      revert ExchangeAmountTooLow(amount, exchangeThreshold);\n    }\n    if (receiver == address(0)) {\n      revert ZeroReceiverAddress();\n    }\n    if (rewardTokens.length == 0) {\n      revert ZeroRewardTokens();\n    }\n\n    // Transfer the exchange asset from the caller to the vault\n    IERC20(exchangeAsset).safeTransferFrom(msg.sender, address(this), amount);\n\n    // Emit the event before the internal call to avoid reentrancy\n    emit RewardCompounded(exchangeAsset, amount, rewardTokens);\n\n    // Claim the rewards\n    uint256[] memory rewardAmounts = _claimRewards(rewardTokens, address(this));\n\n    if (rewardAmounts.length != rewardTokens.length) {\n      revert RewardAmountsLengthMismatch(rewardAmounts.length, rewardTokens.length);\n    }\n\n    for (uint256 i = 0; i < rewardTokens.length; i++) {\n      uint256 rewardAmount = rewardAmounts[i];\n      uint256 treasuryFee = getTreasuryFee(rewardAmount);\n\n      // Overflow protection\n      if (treasuryFee > rewardAmount) {\n        revert TreasuryFeeExceedsRewardAmount(treasuryFee, rewardAmount);\n      }\n\n      // Transfer the treasury fee to the treasury\n      IERC20(rewardTokens[i]).safeTransfer(treasury, treasuryFee);\n\n      // Transfer the remaining amount to the caller\n      IERC20(rewardTokens[i]).safeTransfer(receiver, rewardAmount - treasuryFee);\n    }\n\n    // Process the exchange asset deposit\n    _processExchangeAssetDeposit(amount);\n  }\n\n  /**\n   * @dev Claims multiple rewards\n   * @param rewardTokens The reward tokens to claim\n   * @param receiver The address to receive the claimed rewards\n   * @return rewardAmounts The amount of rewards claimed for each token (have the same length as the tokens array)\n   */\n  function _claimRewards(address[] calldata rewardTokens, address receiver) internal virtual returns (uint256[] memory rewardAmounts);\n\n  /**\n   * @dev Processes the exchange asset deposit from the caller\n   * @param amount The amount of exchange asset to deposit\n   */\n  function _processExchangeAssetDeposit(uint256 amount) internal virtual;\n}\n"
    },
    "contracts/vaults/rewards_claimable/test/MockRewardClaimableVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../RewardClaimable.sol\";\n\n/**\n * @title MockRewardClaimableVault\n * @dev Mock implementation of RewardClaimable contract for testing purposes\n */\ncontract MockRewardClaimableVault is RewardClaimable {\n  using SafeERC20 for IERC20;\n\n  // Track deposited amounts for testing\n  mapping(address => uint256) public deposits;\n\n  // Mock reward tokens for testing\n  mapping(address => bool) public rewardTokens;\n  mapping(address => uint256) public rewardTokenEmissionAmount;\n\n  // Mock target pool address\n  address public targetPool;\n  // Mock fake reward pool address\n  address public fakeRewardPool;\n\n  error InsufficientAllowanceFromFakeRewardPool(address token, uint256 allowance, uint256 amount);\n\n  /**\n   * @dev Constructor for the MockRewardClaimableVault contract\n   * @param _exchangeAsset The address of the exchange asset\n   * @param _treasury The address of the treasury\n   * @param _maxTreasuryFeeBps The maximum treasury fee in basis points\n   * @param _initialTreasuryFeeBps The initial treasury fee in basis points\n   * @param _initialExchangeThreshold The initial minimum threshold amount\n   * @param _targetPool The address of the target pool\n   * @param _fakeRewardPool The address of the fake reward pool\n   */\n  constructor(\n    address _exchangeAsset,\n    address _treasury,\n    uint256 _maxTreasuryFeeBps,\n    uint256 _initialTreasuryFeeBps,\n    uint256 _initialExchangeThreshold,\n    address _targetPool,\n    address _fakeRewardPool\n  ) RewardClaimable(_exchangeAsset, _treasury, _maxTreasuryFeeBps, _initialTreasuryFeeBps, _initialExchangeThreshold) {\n    targetPool = _targetPool;\n    fakeRewardPool = _fakeRewardPool;\n  }\n\n  /**\n   * @dev Adds a reward token to the list of mock reward tokens (for testing purposes)\n   * @param _rewardToken The address of the reward token to add\n   * @param _emissionAmount The emission amount of the reward token each time the vault claims rewards\n   */\n  function addRewardToken(address _rewardToken, uint256 _emissionAmount) external {\n    rewardTokens[_rewardToken] = true;\n\n    require(_emissionAmount > 0, \"Emission amount must be greater than 0\");\n    rewardTokenEmissionAmount[_rewardToken] = _emissionAmount;\n  }\n\n  /**\n   * @dev Public function to expose the internal _claimRewards function for testing\n   */\n  function claimRewards(address[] calldata tokens, address receiver) external {\n    _claimRewards(tokens, receiver);\n  }\n\n  /**\n   * @dev Mocks claiming rewards\n   * @param tokens The reward tokens to claim\n   * @param receiver The address to receive the claimed rewards\n   * @return rewardAmounts The amount of rewards claimed for each token (have the same length as the tokens array)\n   */\n  function _claimRewards(address[] calldata tokens, address receiver) internal override returns (uint256[] memory rewardAmounts) {\n    rewardAmounts = new uint256[](tokens.length);\n    for (uint256 i = 0; i < tokens.length; i++) {\n      if (!rewardTokens[tokens[i]]) {\n        revert(\"Invalid reward token\");\n      }\n\n      // Now, we will drain reward tokens from the fake reward pool to mimic the behavior of the real vault\n      // claiming the rewards\n      uint256 amount = rewardTokenEmissionAmount[tokens[i]];\n\n      // Make sure having enough allowance to transfer from the fake reward pool\n      uint256 allowance = IERC20(tokens[i]).allowance(fakeRewardPool, address(this));\n      if (allowance < amount) {\n        revert InsufficientAllowanceFromFakeRewardPool(tokens[i], allowance, amount);\n      }\n\n      // Transfer the tokens to the receiver\n      IERC20(tokens[i]).safeTransferFrom(fakeRewardPool, receiver, amount);\n\n      rewardAmounts[i] = amount;\n    }\n\n    return rewardAmounts;\n  }\n\n  /**\n   * @dev Mocks processing the exchange asset deposit from the caller\n   * @param amount The amount of exchange asset to deposit\n   */\n  function _processExchangeAssetDeposit(uint256 amount) internal virtual override {\n    deposits[exchangeAsset] += amount;\n    // Transfer tokens from contract to the target pool (tokens are already in the contract)\n    IERC20(exchangeAsset).safeTransfer(targetPool, amount);\n  }\n}\n"
    },
    "contracts/vaults/rewards_claimable/test/RewardClaimableMockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* ———————————————————————————————————————————————————————————————————————————————— *\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\n *   /\\  __-.  /\\__  _\\ /\\  == \\   /\\ \\   /\\ \"-.\\ \\   /\\ \\   /\\__  _\\ /\\ \\_\\ \\      *\n *   \\ \\ \\/\\ \\ \\/_/\\ \\/ \\ \\  __<   \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\  \\/_/\\ \\/ \\ \\____ \\     *\n *    \\ \\____-    \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\    \\ \\_\\  \\/\\_____\\    *\n *     \\/____/     \\/_/   \\/_/ /_/   \\/_/   \\/_/ \\/_/   \\/_/     \\/_/   \\/_____/    *\n *                                                                                  *\n * ————————————————————————————————— dtrinity.org ————————————————————————————————— *\n *                                                                                  *\n *                                         ▲                                        *\n *                                        ▲ ▲                                       *\n *                                                                                  *\n * ———————————————————————————————————————————————————————————————————————————————— *\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\n * ———————————————————————————————————————————————————————————————————————————————— */\n\n// This is a custom ERC20 token that is used to test the RewardClaimable contract\n// It is a simple ERC20 token that allows for minting and burning of tokens\n// It allows burning directly from anyone to simplify testing\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title RewardClaimableMockERC20\n * @dev Mock ERC20 token for testing purposes with additional mint and burn functions\n */\ncontract RewardClaimableMockERC20 is ERC20 {\n  /**\n   * @dev Constructor for the RewardClaimableMockERC20 contract\n   * @param name The name of the token\n   * @param symbol The symbol of the token\n   */\n  constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\n\n  /**\n   * @dev Mints tokens to a specified address\n   * @param to The address to mint tokens to\n   * @param amount The amount of tokens to mint\n   */\n  function mint(address to, uint256 amount) external {\n    _mint(to, amount);\n  }\n\n  /**\n   * @dev Burns tokens from a specified address\n   * @param from The address to burn tokens from\n   * @param amount The amount of tokens to burn\n   */\n  function burn(address from, uint256 amount) external {\n    _burn(from, amount);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
